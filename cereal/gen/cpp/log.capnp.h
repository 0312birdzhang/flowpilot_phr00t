// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: log.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "car.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b775080c7a22869a);
CAPNP_DECLARE_SCHEMA(eb724a566d17af0f);
CAPNP_DECLARE_SCHEMA(d099a8ba9b899200);
CAPNP_DECLARE_SCHEMA(bcc258f46d52cc5c);
CAPNP_DECLARE_SCHEMA(aa5a29e4faba7031);
enum class DeviceType_aa5a29e4faba7031: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  CHFFR_IOS,
  TICI,
  PC,
};
CAPNP_DECLARE_ENUM(DeviceType, aa5a29e4faba7031);
CAPNP_DECLARE_SCHEMA(a445f422964be8dd);
CAPNP_DECLARE_SCHEMA(81fce175e083f089);
CAPNP_DECLARE_SCHEMA(9985673a3ab6dcc3);
CAPNP_DECLARE_SCHEMA(b9c11485af64dc95);
CAPNP_DECLARE_SCHEMA(f754289a5358d589);
CAPNP_DECLARE_SCHEMA(d7b1dbe8509c9646);
CAPNP_DECLARE_SCHEMA(81da736f589329be);
CAPNP_DECLARE_SCHEMA(d72e97f5fa8bc3cd);
enum class SentinelType_d72e97f5fa8bc3cd: uint16_t {
  END_OF_SEGMENT,
  END_OF_ROUTE,
  START_OF_SEGMENT,
  START_OF_ROUTE,
};
CAPNP_DECLARE_ENUM(SentinelType, d72e97f5fa8bc3cd);
CAPNP_DECLARE_SCHEMA(8f5fa4c60635312b);
CAPNP_DECLARE_SCHEMA(e5efb833710d8807);
enum class Status_e5efb833710d8807: uint16_t {
  UNCALIBRATED,
  CALIBRATED,
  INVALID,
  RECALIBRATING,
};
CAPNP_DECLARE_ENUM(Status, e5efb833710d8807);
CAPNP_DECLARE_SCHEMA(fbd668246d7b61a0);
CAPNP_DECLARE_SCHEMA(97f9abe3ca33b13e);
CAPNP_DECLARE_SCHEMA(b5d25ac22e31081d);
CAPNP_DECLARE_SCHEMA(f9bdd8cc37e5b840);
CAPNP_DECLARE_SCHEMA(df68addd815cfa2d);
CAPNP_DECLARE_SCHEMA(bd9b79e4f2638b63);
CAPNP_DECLARE_SCHEMA(f4addb43f2c6466a);
CAPNP_DECLARE_SCHEMA(82f308943329e86c);
CAPNP_DECLARE_SCHEMA(c26c331215adef9e);
CAPNP_DECLARE_SCHEMA(8555d89184b821ed);
CAPNP_DECLARE_SCHEMA(a07b750e2cc8ddcc);
CAPNP_DECLARE_SCHEMA(ee101d40d2f55677);
CAPNP_DECLARE_SCHEMA(8f7ba48aebe08cab);
CAPNP_DECLARE_SCHEMA(feaa28eb05e9172b);
enum class FrameType_feaa28eb05e9172b: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  FRONT,
};
CAPNP_DECLARE_ENUM(FrameType, feaa28eb05e9172b);
CAPNP_DECLARE_SCHEMA(aa7aa1c491b7168e);
CAPNP_DECLARE_SCHEMA(9298072c24500368);
CAPNP_DECLARE_SCHEMA(b195602d804b459a);
enum class Encoding_b195602d804b459a: uint16_t {
  YUV,
  RGB,
};
CAPNP_DECLARE_ENUM(Encoding, b195602d804b459a);
CAPNP_DECLARE_SCHEMA(9d48b80d756f770b);
CAPNP_DECLARE_SCHEMA(e181c84010194daa);
CAPNP_DECLARE_SCHEMA(f364aa4ebb4c269e);
CAPNP_DECLARE_SCHEMA(eea7fc1767834347);
enum class Desire_eea7fc1767834347: uint16_t {
  NONE,
  TURN_LEFT,
  TURN_RIGHT,
  LANE_CHANGE_LEFT,
  LANE_CHANGE_RIGHT,
  KEEP_LEFT,
  KEEP_RIGHT,
};
CAPNP_DECLARE_ENUM(Desire, eea7fc1767834347);
CAPNP_DECLARE_SCHEMA(b7194302c0682cfd);
enum class LaneChangeState_b7194302c0682cfd: uint16_t {
  OFF,
  PRE_LANE_CHANGE,
  LANE_CHANGE_STARTING,
  LANE_CHANGE_FINISHING,
};
CAPNP_DECLARE_ENUM(LaneChangeState, b7194302c0682cfd);
CAPNP_DECLARE_SCHEMA(92fd04cb0a240892);
enum class LaneChangeDirection_92fd04cb0a240892: uint16_t {
  NONE,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(LaneChangeDirection, 92fd04cb0a240892);
CAPNP_DECLARE_SCHEMA(97ff69c53601abf1);
CAPNP_DECLARE_SCHEMA(dbe58b96d2d1ac61);
enum class FlowpilotState_dbe58b96d2d1ac61: uint16_t {
  DISABLED,
  PRE_ENABLED,
  ENABLED,
  SOFT_DISABLING,
  OVERRIDING,
};
CAPNP_DECLARE_ENUM(FlowpilotState, dbe58b96d2d1ac61);
CAPNP_DECLARE_SCHEMA(a0d0dcd113193c62);
enum class AlertStatus_a0d0dcd113193c62: uint16_t {
  NORMAL,
  USER_PROMPT,
  CRITICAL,
};
CAPNP_DECLARE_ENUM(AlertStatus, a0d0dcd113193c62);
CAPNP_DECLARE_SCHEMA(e98bb99d6e985f64);
enum class AlertSize_e98bb99d6e985f64: uint16_t {
  NONE,
  SMALL,
  MID,
  FULL,
};
CAPNP_DECLARE_ENUM(AlertSize, e98bb99d6e985f64);
CAPNP_DECLARE_SCHEMA(939463348632375e);
CAPNP_DECLARE_SCHEMA(f28c5dc9e09375e3);
CAPNP_DECLARE_SCHEMA(e774a050cbf689a4);
CAPNP_DECLARE_SCHEMA(9024e2d790c82ade);
CAPNP_DECLARE_SCHEMA(a2e4ea88ac9980f1);
CAPNP_DECLARE_SCHEMA(ad9d8095c06f7c61);
CAPNP_DECLARE_SCHEMA(a63a46f0f2889b2d);
CAPNP_DECLARE_SCHEMA(fd5b914d6b444695);
CAPNP_DECLARE_SCHEMA(c6a0c62568c95159);
CAPNP_DECLARE_SCHEMA(d6180846594f85ce);
CAPNP_DECLARE_SCHEMA(9fb7443cf08200e1);
CAPNP_DECLARE_SCHEMA(8da9e21970d91351);
enum class LongitudinalPlanSource_8da9e21970d91351: uint16_t {
  CRUISE,
  LEAD0,
  LEAD1,
  LEAD2,
  E2E,
};
CAPNP_DECLARE_ENUM(LongitudinalPlanSource, 8da9e21970d91351);
CAPNP_DECLARE_SCHEMA(efe6823543da884d);
CAPNP_DECLARE_SCHEMA(b671bfcc436dc8a6);
CAPNP_DECLARE_SCHEMA(89bae02eedbfdee5);
CAPNP_DECLARE_SCHEMA(dbc02dba745bd22c);
enum class SensorSource_dbc02dba745bd22c: uint16_t {
  ANDROID,
  I_O_S,
  FIBER,
  VELODYNE,
  BNO055,
  LSM6DS3,
  BMP280,
  MMC3416X,
  BMX055,
  RPR0521,
  LSM6DS3TRC,
  MMC5603NJ,
};
CAPNP_DECLARE_ENUM(SensorSource, dbc02dba745bd22c);
CAPNP_DECLARE_SCHEMA(87f3e837c5d94800);
CAPNP_DECLARE_SCHEMA(9aba03ef6a4709c3);
enum class SensorSource_9aba03ef6a4709c3: uint16_t {
  ANDROID,
  I_O_S,
  CAR,
  VELODYNE,
  FUSION,
  EXTERNAL,
  UBLOX,
  TRIMBLE,
  QCOMDIAG,
};
CAPNP_DECLARE_ENUM(SensorSource, 9aba03ef6a4709c3);
CAPNP_DECLARE_SCHEMA(86232b81eea9738a);
CAPNP_DECLARE_SCHEMA(a8883583b32c9877);
enum class UsbPowerModeDEPRECATED_a8883583b32c9877: uint16_t {
  NONE,
  CLIENT,
  CDP,
  DCP,
};
CAPNP_DECLARE_ENUM(UsbPowerModeDEPRECATED, a8883583b32c9877);
CAPNP_DECLARE_SCHEMA(a7649e2575e4591e);
CAPNP_DECLARE_SCHEMA(f2fd0b8b0ac9adbb);
enum class FaultStatus_f2fd0b8b0ac9adbb: uint16_t {
  NONE,
  FAULT_TEMP,
  FAULT_PERM,
};
CAPNP_DECLARE_ENUM(FaultStatus, f2fd0b8b0ac9adbb);
CAPNP_DECLARE_SCHEMA(cd55c07f69249798);
enum class FaultType_cd55c07f69249798: uint16_t {
  RELAY_MALFUNCTION,
  UNUSED_INTERRUPT_HANDLED,
  INTERRUPT_RATE_CAN1,
  INTERRUPT_RATE_CAN2,
  INTERRUPT_RATE_CAN3,
  INTERRUPT_RATE_TACH,
  INTERRUPT_RATE_GMLAN,
  INTERRUPT_RATE_INTERRUPTS,
  INTERRUPT_RATE_SPI_DMA,
  INTERRUPT_RATE_SPI_CS,
  INTERRUPT_RATE_UART1,
  INTERRUPT_RATE_UART2,
  INTERRUPT_RATE_UART3,
  INTERRUPT_RATE_UART5,
  INTERRUPT_RATE_UART_DMA,
  INTERRUPT_RATE_USB,
  INTERRUPT_RATE_TIM1,
  INTERRUPT_RATE_TIM3,
  REGISTER_DIVERGENT,
  INTERRUPT_RATE_KLINE_INIT,
  INTERRUPT_RATE_CLOCK_SOURCE,
  INTERRUPT_RATE_TICK,
  INTERRUPT_RATE_EXTI,
  INTERRUPT_RATE_SPI,
  INTERRUPT_RATE_UART7,
};
CAPNP_DECLARE_ENUM(FaultType, cd55c07f69249798);
CAPNP_DECLARE_SCHEMA(8a58adf93e5b3751);
enum class PandaType_8a58adf93e5b3751: uint16_t {
  UNKNOWN,
  WHITE_PANDA,
  GREY_PANDA,
  BLACK_PANDA,
  PEDAL,
  UNO,
  DOS,
  RED_PANDA,
  RED_PANDA_V2,
  TRES,
};
CAPNP_DECLARE_ENUM(PandaType, 8a58adf93e5b3751);
CAPNP_DECLARE_SCHEMA(f69a3ed1e8c081bf);
enum class HarnessStatus_f69a3ed1e8c081bf: uint16_t {
  NOT_CONNECTED,
  NORMAL,
  FLIPPED,
};
CAPNP_DECLARE_ENUM(HarnessStatus, f69a3ed1e8c081bf);
CAPNP_DECLARE_SCHEMA(f8d2972deb0cd45c);
CAPNP_DECLARE_SCHEMA(c0db50b4d13283ff);
enum class LecErrorCode_c0db50b4d13283ff: uint16_t {
  NO_ERROR,
  STUFF_ERROR,
  FORM_ERROR,
  ACK_ERROR,
  BIT1_ERROR,
  BIT0_ERROR,
  CRC_ERROR,
  NO_CHANGE,
};
CAPNP_DECLARE_ENUM(LecErrorCode, c0db50b4d13283ff);
CAPNP_DECLARE_SCHEMA(dd88fbf222155566);
CAPNP_DECLARE_SCHEMA(a3a01ed09437eb34);
CAPNP_DECLARE_SCHEMA(a386584380ffe0bd);
CAPNP_DECLARE_SCHEMA(c31272edd1b1d21e);
CAPNP_DECLARE_SCHEMA(ca196ecce07166df);
enum class ThermalStatus_ca196ecce07166df: uint16_t {
  GREEN,
  YELLOW,
  RED,
  DANGER,
};
CAPNP_DECLARE_ENUM(ThermalStatus, ca196ecce07166df);
CAPNP_DECLARE_SCHEMA(c54c8c8bd55c2710);
enum class NetworkType_c54c8c8bd55c2710: uint16_t {
  NONE,
  WIFI,
  CELL2_G,
  CELL3_G,
  CELL4_G,
  CELL5_G,
  ETHERNET,
};
CAPNP_DECLARE_ENUM(NetworkType, c54c8c8bd55c2710);
CAPNP_DECLARE_SCHEMA(9ecd7a74993887c1);
enum class NetworkStrength_9ecd7a74993887c1: uint16_t {
  UNKNOWN,
  POOR,
  MODERATE,
  GOOD,
  GREAT,
};
CAPNP_DECLARE_ENUM(NetworkStrength, 9ecd7a74993887c1);
CAPNP_DECLARE_SCHEMA(c8c2c578132d3bf6);
CAPNP_DECLARE_SCHEMA(a523debe37f16533);
CAPNP_DECLARE_SCHEMA(867ecb65595182db);
CAPNP_DECLARE_SCHEMA(984c228814893618);
CAPNP_DECLARE_SCHEMA(c86450cae74481f6);
CAPNP_DECLARE_SCHEMA(eab1cad68eb8144a);
CAPNP_DECLARE_SCHEMA(dc29441550799fa7);
enum class Status_dc29441550799fa7: uint16_t {
  UNINITIALIZED,
  UNCALIBRATED,
  VALID,
};
CAPNP_DECLARE_ENUM(Status, dc29441550799fa7);
CAPNP_DECLARE_SCHEMA(9147579615bccd20);
CAPNP_DECLARE_SCHEMA(a3bfe1e8492c1f31);
CAPNP_DECLARE_SCHEMA(fd366a42abe2743a);
CAPNP_DECLARE_SCHEMA(d9c850376aa1522f);
CAPNP_DECLARE_SCHEMA(c382961abb2fdb68);
CAPNP_DECLARE_SCHEMA(cf2b10706cbfc3c9);
CAPNP_DECLARE_SCHEMA(bd5abe05aca27407);
CAPNP_DECLARE_SCHEMA(edbeba4deb67b7eb);
CAPNP_DECLARE_SCHEMA(c107051312d4441a);
CAPNP_DECLARE_SCHEMA(8d95d0b834bfad44);
enum class ConstellationId_8d95d0b834bfad44: uint16_t {
  GPS,
  SBAS,
  GALILEO,
  BEIDOU,
  IMES,
  QZNSS,
  GLONASS,
};
CAPNP_DECLARE_ENUM(ConstellationId, 8d95d0b834bfad44);
CAPNP_DECLARE_SCHEMA(d5c2568ab4205eac);
enum class EphemerisSourceType_d5c2568ab4205eac: uint16_t {
  NAV,
  NASA_ULTRA_RAPID,
  GLONASS_IAC_ULTRA_RAPID,
  QCOM,
};
CAPNP_DECLARE_ENUM(EphemerisSourceType, d5c2568ab4205eac);
CAPNP_DECLARE_SCHEMA(9c6e5fb2b74b5ce8);
CAPNP_DECLARE_SCHEMA(8dfa6c7f708d8981);
CAPNP_DECLARE_SCHEMA(ad706f94cc7d05c5);
CAPNP_DECLARE_SCHEMA(fb0e8b4dac3a0454);
CAPNP_DECLARE_SCHEMA(b96c4482a1dc22b2);
CAPNP_DECLARE_SCHEMA(ccaa2496c52a151c);
CAPNP_DECLARE_SCHEMA(c998440b487f99c1);
CAPNP_DECLARE_SCHEMA(da3355c33228906b);
CAPNP_DECLARE_SCHEMA(d103f6e8fdeb0d3e);
enum class AntennaSupervisorState_d103f6e8fdeb0d3e: uint16_t {
  INIT,
  DONTKNOW,
  OK,
  SHORT,
  OPEN,
};
CAPNP_DECLARE_ENUM(AntennaSupervisorState, d103f6e8fdeb0d3e);
CAPNP_DECLARE_SCHEMA(925b12c611e9cd42);
enum class AntennaPowerStatus_925b12c611e9cd42: uint16_t {
  OFF,
  ON,
  DONTKNOW,
};
CAPNP_DECLARE_ENUM(AntennaPowerStatus, 925b12c611e9cd42);
CAPNP_DECLARE_SCHEMA(aad9288676991d23);
CAPNP_DECLARE_SCHEMA(bf1367b4f76db933);
enum class ConfigSource_bf1367b4f76db933: uint16_t {
  UNDEFINED,
  ROM,
  OTP,
  CONFIGPINS,
  FLASH,
};
CAPNP_DECLARE_ENUM(ConfigSource, bf1367b4f76db933);
CAPNP_DECLARE_SCHEMA(c6a9f59363521e72);
CAPNP_DECLARE_SCHEMA(a603f15d9395121f);
CAPNP_DECLARE_SCHEMA(e40beb789d906474);
CAPNP_DECLARE_SCHEMA(a5f79e685eb1bd16);
CAPNP_DECLARE_SCHEMA(96798de4dfab5de8);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

static constexpr  ::int32_t LOG_VERSION = 1;
template <typename Key = ::capnp::AnyPointer, typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb724a566d17af0f, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d099a8ba9b899200, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct InitData {
  InitData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DeviceType_aa5a29e4faba7031 DeviceType;

  struct PandaInfo;
  struct AndroidBuildInfo;
  struct AndroidSensor;
  struct ChffrAndroidExtra;
  struct IosBuildInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcc258f46d52cc5c, 1, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::PandaInfo {
  PandaInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a445f422964be8dd, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidBuildInfo {
  AndroidBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81fce175e083f089, 2, 21)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidSensor {
  AndroidSensor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9985673a3ab6dcc3, 6, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::ChffrAndroidExtra {
  ChffrAndroidExtra() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9c11485af64dc95, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::IosBuildInfo {
  IosBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f754289a5358d589, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraOdometry {
  CameraOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7b1dbe8509c9646, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sentinel {
  Sentinel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SentinelType_d72e97f5fa8bc3cd SentinelType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81da736f589329be, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveCalibrationData {
  LiveCalibrationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_e5efb833710d8807 Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f5fa4c60635312b, 2, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2 {
  ModelDataV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct XYZTData;
  struct LeadDataV2;
  struct LeadDataV3;
  struct MetaData;
  struct DisengagePredictions;
  struct Pose;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbd668246d7b61a0, 4, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::XYZTData {
  XYZTData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97f9abe3ca33b13e, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::LeadDataV2 {
  LeadDataV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5d25ac22e31081d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::LeadDataV3 {
  LeadDataV3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9bdd8cc37e5b840, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::MetaData {
  MetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df68addd815cfa2d, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::DisengagePredictions {
  DisengagePredictions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd9b79e4f2638b63, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::Pose {
  Pose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4addb43f2c6466a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavModelData {
  NavModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct XYData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82f308943329e86c, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavModelData::XYData {
  XYData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c26c331215adef9e, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Desire {
  Desire() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8555d89184b821ed, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gyroscope {
  Gyroscope() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a07b750e2cc8ddcc, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Accelerometer {
  Accelerometer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee101d40d2f55677, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData {
  FrameData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FrameType_feaa28eb05e9172b FrameType;

  struct AndroidCaptureResult;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f7ba48aebe08cab, 10, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData::AndroidCaptureResult {
  AndroidCaptureResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa7aa1c491b7168e, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameBuffer {
  FrameBuffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Encoding_b195602d804b459a Encoding;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9298072c24500368, 7, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Memory {
  Memory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d48b80d756f770b, 9, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CanData {
  CanData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e181c84010194daa, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LateralPlan {
  LateralPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Desire_eea7fc1767834347 Desire;

  typedef ::capnp::schemas::LaneChangeState_b7194302c0682cfd LaneChangeState;

  typedef ::capnp::schemas::LaneChangeDirection_92fd04cb0a240892 LaneChangeDirection;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f364aa4ebb4c269e, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState {
  ControlsState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FlowpilotState_dbe58b96d2d1ac61 FlowpilotState;

  typedef ::capnp::schemas::AlertStatus_a0d0dcd113193c62 AlertStatus;

  typedef ::capnp::schemas::AlertSize_e98bb99d6e985f64 AlertSize;

  struct LateralINDIState;
  struct LateralPIDState;
  struct LateralTorqueState;
  struct LateralLQRState;
  struct LateralAngleState;
  struct LateralCurvatureState;
  struct LateralDebugState;
  struct LateralControlState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ff69c53601abf1, 24, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralINDIState {
  LateralINDIState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(939463348632375e, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralPIDState {
  LateralPIDState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f28c5dc9e09375e3, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralTorqueState {
  LateralTorqueState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e774a050cbf689a4, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralLQRState {
  LateralLQRState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9024e2d790c82ade, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralAngleState {
  LateralAngleState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2e4ea88ac9980f1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralCurvatureState {
  LateralCurvatureState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad9d8095c06f7c61, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralDebugState {
  LateralDebugState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a63a46f0f2889b2d, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralControlState {
  LateralControlState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INDI_STATE,
    PID_STATE,
    LQR_STATE_D_E_P_R_E_C_A_T_E_D,
    ANGLE_STATE,
    DEBUG_STATE,
    TORQUE_STATE,
    CURVATURE_STATE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd5b914d6b444695, 24, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState {
  RadarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LeadData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6a0c62568c95159, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6180846594f85ce, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlan {
  LongitudinalPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LongitudinalPlanSource_8da9e21970d91351 LongitudinalPlanSource;

  struct GpsTrajectory;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9fb7443cf08200e1, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlan::GpsTrajectory {
  GpsTrajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efe6823543da884d, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData {
  SensorEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACCELERATION,
    MAGNETIC,
    ORIENTATION,
    GYRO,
    PRESSURE,
    MAGNETIC_UNCALIBRATED,
    GYRO_UNCALIBRATED,
    PROXIMITY,
    LIGHT,
    TEMPERATURE,
  };
  struct SensorVec;
  typedef ::capnp::schemas::SensorSource_dbc02dba745bd22c SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b671bfcc436dc8a6, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData::SensorVec {
  SensorVec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89bae02eedbfdee5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GpsLocationData {
  GpsLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SensorSource_9aba03ef6a4709c3 SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87f3e837c5d94800, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PeripheralState {
  PeripheralState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::UsbPowerModeDEPRECATED_a8883583b32c9877 UsbPowerModeDEPRECATED;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86232b81eea9738a, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PandaState {
  PandaState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FaultStatus_f2fd0b8b0ac9adbb FaultStatus;

  typedef ::capnp::schemas::FaultType_cd55c07f69249798 FaultType;

  typedef ::capnp::schemas::PandaType_8a58adf93e5b3751 PandaType;

  typedef ::capnp::schemas::HarnessStatus_f69a3ed1e8c081bf HarnessStatus;

  struct PandaCanState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7649e2575e4591e, 8, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PandaState::PandaCanState {
  PandaCanState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LecErrorCode_c0db50b4d13283ff LecErrorCode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8d2972deb0cd45c, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverState {
  DriverState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd88fbf222155566, 8, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverMonitoringState {
  DriverMonitoringState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3a01ed09437eb34, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState {
  DeviceState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ThermalZone;
  typedef ::capnp::schemas::ThermalStatus_ca196ecce07166df ThermalStatus;

  typedef ::capnp::schemas::NetworkType_c54c8c8bd55c2710 NetworkType;

  typedef ::capnp::schemas::NetworkStrength_9ecd7a74993887c1 NetworkStrength;

  struct NetworkInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a386584380ffe0bd, 8, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState::ThermalZone {
  ThermalZone() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c31272edd1b1d21e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState::NetworkInfo {
  NetworkInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8c2c578132d3bf6, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog {
  ProcLog() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Process;
  struct CPUTimes;
  struct Mem;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a523debe37f16533, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(867ecb65595182db, 9, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::CPUTimes {
  CPUTimes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(984c228814893618, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Mem {
  Mem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c86450cae74481f6, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationKalman {
  LiveLocationKalman() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_dc29441550799fa7 Status;

  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eab1cad68eb8144a, 5, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationKalman::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9147579615bccd20, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ManagerState {
  ManagerState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ProcessState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3bfe1e8492c1f31, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ManagerState::ProcessState {
  ProcessState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd366a42abe2743a, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveTracks {
  LiveTracks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9c850376aa1522f, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveParametersData {
  LiveParametersData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c382961abb2fdb68, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UploaderState {
  UploaderState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf2b10706cbfc3c9, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements {
  GnssMeasurements() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct CorrectedMeasurement;
  struct EphemerisSource;
  typedef ::capnp::schemas::ConstellationId_8d95d0b834bfad44 ConstellationId;

  typedef ::capnp::schemas::EphemerisSourceType_d5c2568ab4205eac EphemerisSourceType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd5abe05aca27407, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements::CorrectedMeasurement {
  CorrectedMeasurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(edbeba4deb67b7eb, 5, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements::EphemerisSource {
  EphemerisSource() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c107051312d4441a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss {
  UbloxGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENT_REPORT,
    EPHEMERIS,
    IONO_DATA,
    HW_STATUS,
    HW_STATUS2,
  };
  struct MeasurementReport;
  struct Ephemeris;
  struct IonoData;
  struct HwStatus;
  struct HwStatus2;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c6e5fb2b74b5ce8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport {
  MeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ReceiverStatus;
  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8dfa6c7f708d8981, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::ReceiverStatus {
  ReceiverStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad706f94cc7d05c5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TrackingStatus;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb0e8b4dac3a0454, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement::TrackingStatus {
  TrackingStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b96c4482a1dc22b2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::Ephemeris {
  Ephemeris() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccaa2496c52a151c, 33, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::IonoData {
  IonoData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c998440b487f99c1, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::HwStatus {
  HwStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::AntennaSupervisorState_d103f6e8fdeb0d3e AntennaSupervisorState;

  typedef ::capnp::schemas::AntennaPowerStatus_925b12c611e9cd42 AntennaPowerStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da3355c33228906b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::HwStatus2 {
  HwStatus2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ConfigSource_bf1367b4f76db933 ConfigSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aad9288676991d23, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelRaw {
  ModelRaw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6a9f59363521e72, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clocks {
  Clocks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a603f15d9395121f, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Joystick {
  Joystick() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e40beb789d906474, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveTorqueParametersData {
  LiveTorqueParametersData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5f79e685eb1bd16, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PROC_LOG,
    ROAD_CAMERA_STATE,
    ACCELEROMETER,
    GYROSCOPE,
    DESIRE_D_E_P_R_E_C_A_T_E_D,
    MODEL_V2,
    LIVE_CALIBRATION,
    CAMERA_ODOMETRY,
    CAR_STATE,
    CAR_CONTROL,
    CAN,
    SENDCAN,
    LATERAL_PLAN,
    CAR_PARAMS,
    CONTROLS_STATE,
    RADAR_STATE,
    LONGITUDINAL_PLAN,
    CAR_EVENTS,
    FRAME_DATA_D_E_P_R_E_C_A_T_E_D,
    SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D,
    GPS_LOCATION_EXTERNAL,
    PERIPHERAL_STATE,
    PANDA_STATES,
    DRIVER_STATE,
    DRIVER_MONITORING_STATE,
    DRIVER_CAMERA_STATE,
    DEVICE_STATE,
    LIVE_LOCATION_KALMAN,
    MANAGER_STATE,
    LIVE_PARAMETERS,
    WIDE_ROAD_CAMERA_STATE,
    LOG_MESSAGE,
    ERROR_LOG_MESSAGE,
    INIT_DATA,
    UBLOX_RAW,
    LIVE_TRACKS,
    SENTINEL,
    UPLOADER_STATE,
    GNSS_MEASUREMENTS,
    UBLOX_GNSS,
    GYROSCOPE2,
    ACCELEROMETER2,
    GPS_LOCATION,
    NAV_MODEL,
    MODEL_RAW,
    ROAD_CAMERA_BUFFER,
    WIDE_ROAD_CAMERA_BUFFER,
    DRIVER_CAMERA_BUFFER,
    TEST_JOYSTICK,
    CLOCKS,
    LIVE_TORQUE_PARAMETERS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96798de4dfab5de8, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline  ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<Value> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline  ::capnp::BuilderFor<Key> getKey();
  inline void setKey( ::capnp::ReaderFor<Key> value);
  inline  ::capnp::BuilderFor<Key> initKey();
  inline  ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline  ::capnp::BuilderFor<Value> getValue();
  inline void setValue( ::capnp::ReaderFor<Value> value);
  inline  ::capnp::BuilderFor<Value> initValue();
  inline  ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Key> getKey();
  inline  ::capnp::PipelineFor<Value> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::Reader {
public:
  typedef InitData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getKernelArgs() const;

  inline bool hasGctxDEPRECATED() const;
  inline  ::capnp::Text::Reader getGctxDEPRECATED() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline  ::cereal::InitData::DeviceType getDeviceType() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasAndroidBuildInfo() const;
  inline  ::cereal::InitData::AndroidBuildInfo::Reader getAndroidBuildInfo() const;

  inline bool hasAndroidSensorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader getAndroidSensorsDEPRECATED() const;

  inline bool hasChffrAndroidExtraDEPRECATED() const;
  inline  ::cereal::InitData::ChffrAndroidExtra::Reader getChffrAndroidExtraDEPRECATED() const;

  inline bool hasPandaInfo() const;
  inline  ::cereal::InitData::PandaInfo::Reader getPandaInfo() const;

  inline bool getDirty() const;

  inline bool hasGitCommit() const;
  inline  ::capnp::Text::Reader getGitCommit() const;

  inline bool hasGitBranch() const;
  inline  ::capnp::Text::Reader getGitBranch() const;

  inline bool getPassive() const;

  inline bool hasGitRemote() const;
  inline  ::capnp::Text::Reader getGitRemote() const;

  inline bool hasIosBuildInfoDEPRECATED() const;
  inline  ::cereal::InitData::IosBuildInfo::Reader getIosBuildInfoDEPRECATED() const;

  inline bool hasKernelVersion() const;
  inline  ::capnp::Text::Reader getKernelVersion() const;

  inline bool hasAndroidProperties() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAndroidProperties() const;

  inline bool hasParams() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getParams() const;

  inline bool hasOsVersion() const;
  inline  ::capnp::Text::Reader getOsVersion() const;

  inline bool hasCommands() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getCommands() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::Builder {
public:
  typedef InitData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getKernelArgs();
  inline void setKernelArgs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initKernelArgs(unsigned int size);
  inline void adoptKernelArgs(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownKernelArgs();

  inline bool hasGctxDEPRECATED();
  inline  ::capnp::Text::Builder getGctxDEPRECATED();
  inline void setGctxDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGctxDEPRECATED(unsigned int size);
  inline void adoptGctxDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGctxDEPRECATED();

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline  ::cereal::InitData::DeviceType getDeviceType();
  inline void setDeviceType( ::cereal::InitData::DeviceType value);

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasAndroidBuildInfo();
  inline  ::cereal::InitData::AndroidBuildInfo::Builder getAndroidBuildInfo();
  inline void setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value);
  inline  ::cereal::InitData::AndroidBuildInfo::Builder initAndroidBuildInfo();
  inline void adoptAndroidBuildInfo(::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> disownAndroidBuildInfo();

  inline bool hasAndroidSensorsDEPRECATED();
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder getAndroidSensorsDEPRECATED();
  inline void setAndroidSensorsDEPRECATED( ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder initAndroidSensorsDEPRECATED(unsigned int size);
  inline void adoptAndroidSensorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>> disownAndroidSensorsDEPRECATED();

  inline bool hasChffrAndroidExtraDEPRECATED();
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder getChffrAndroidExtraDEPRECATED();
  inline void setChffrAndroidExtraDEPRECATED( ::cereal::InitData::ChffrAndroidExtra::Reader value);
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder initChffrAndroidExtraDEPRECATED();
  inline void adoptChffrAndroidExtraDEPRECATED(::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> disownChffrAndroidExtraDEPRECATED();

  inline bool hasPandaInfo();
  inline  ::cereal::InitData::PandaInfo::Builder getPandaInfo();
  inline void setPandaInfo( ::cereal::InitData::PandaInfo::Reader value);
  inline  ::cereal::InitData::PandaInfo::Builder initPandaInfo();
  inline void adoptPandaInfo(::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> disownPandaInfo();

  inline bool getDirty();
  inline void setDirty(bool value);

  inline bool hasGitCommit();
  inline  ::capnp::Text::Builder getGitCommit();
  inline void setGitCommit( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitCommit(unsigned int size);
  inline void adoptGitCommit(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitCommit();

  inline bool hasGitBranch();
  inline  ::capnp::Text::Builder getGitBranch();
  inline void setGitBranch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitBranch(unsigned int size);
  inline void adoptGitBranch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitBranch();

  inline bool getPassive();
  inline void setPassive(bool value);

  inline bool hasGitRemote();
  inline  ::capnp::Text::Builder getGitRemote();
  inline void setGitRemote( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitRemote(unsigned int size);
  inline void adoptGitRemote(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitRemote();

  inline bool hasIosBuildInfoDEPRECATED();
  inline  ::cereal::InitData::IosBuildInfo::Builder getIosBuildInfoDEPRECATED();
  inline void setIosBuildInfoDEPRECATED( ::cereal::InitData::IosBuildInfo::Reader value);
  inline  ::cereal::InitData::IosBuildInfo::Builder initIosBuildInfoDEPRECATED();
  inline void adoptIosBuildInfoDEPRECATED(::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> disownIosBuildInfoDEPRECATED();

  inline bool hasKernelVersion();
  inline  ::capnp::Text::Builder getKernelVersion();
  inline void setKernelVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKernelVersion(unsigned int size);
  inline void adoptKernelVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKernelVersion();

  inline bool hasAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAndroidProperties();
  inline void setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAndroidProperties();
  inline void adoptAndroidProperties(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAndroidProperties();

  inline bool hasParams();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getParams();
  inline void setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownParams();

  inline bool hasOsVersion();
  inline  ::capnp::Text::Builder getOsVersion();
  inline void setOsVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOsVersion(unsigned int size);
  inline void adoptOsVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOsVersion();

  inline bool hasCommands();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getCommands();
  inline void setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initCommands();
  inline void adoptCommands(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownCommands();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::Pipeline {
public:
  typedef InitData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::InitData::AndroidBuildInfo::Pipeline getAndroidBuildInfo();
  inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline getChffrAndroidExtraDEPRECATED();
  inline  ::cereal::InitData::PandaInfo::Pipeline getPandaInfo();
  inline  ::cereal::InitData::IosBuildInfo::Pipeline getIosBuildInfoDEPRECATED();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getParams();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getCommands();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::PandaInfo::Reader {
public:
  typedef PandaInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHasPanda() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline bool hasStVersion() const;
  inline  ::capnp::Text::Reader getStVersion() const;

  inline bool hasEspVersion() const;
  inline  ::capnp::Text::Reader getEspVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::PandaInfo::Builder {
public:
  typedef PandaInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHasPanda();
  inline void setHasPanda(bool value);

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline bool hasStVersion();
  inline  ::capnp::Text::Builder getStVersion();
  inline void setStVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStVersion(unsigned int size);
  inline void adoptStVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStVersion();

  inline bool hasEspVersion();
  inline  ::capnp::Text::Builder getEspVersion();
  inline void setEspVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEspVersion(unsigned int size);
  inline void adoptEspVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEspVersion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::PandaInfo::Pipeline {
public:
  typedef PandaInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidBuildInfo::Reader {
public:
  typedef AndroidBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBoard() const;
  inline  ::capnp::Text::Reader getBoard() const;

  inline bool hasBootloader() const;
  inline  ::capnp::Text::Reader getBootloader() const;

  inline bool hasBrand() const;
  inline  ::capnp::Text::Reader getBrand() const;

  inline bool hasDevice() const;
  inline  ::capnp::Text::Reader getDevice() const;

  inline bool hasDisplay() const;
  inline  ::capnp::Text::Reader getDisplay() const;

  inline bool hasFingerprint() const;
  inline  ::capnp::Text::Reader getFingerprint() const;

  inline bool hasHardware() const;
  inline  ::capnp::Text::Reader getHardware() const;

  inline bool hasHost() const;
  inline  ::capnp::Text::Reader getHost() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasManufacturer() const;
  inline  ::capnp::Text::Reader getManufacturer() const;

  inline bool hasModel() const;
  inline  ::capnp::Text::Reader getModel() const;

  inline bool hasProduct() const;
  inline  ::capnp::Text::Reader getProduct() const;

  inline bool hasRadioVersion() const;
  inline  ::capnp::Text::Reader getRadioVersion() const;

  inline bool hasSerial() const;
  inline  ::capnp::Text::Reader getSerial() const;

  inline bool hasSupportedAbis() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSupportedAbis() const;

  inline bool hasTags() const;
  inline  ::capnp::Text::Reader getTags() const;

  inline  ::int64_t getTime() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasVersionCodename() const;
  inline  ::capnp::Text::Reader getVersionCodename() const;

  inline bool hasVersionRelease() const;
  inline  ::capnp::Text::Reader getVersionRelease() const;

  inline  ::int32_t getVersionSdk() const;

  inline bool hasVersionSecurityPatch() const;
  inline  ::capnp::Text::Reader getVersionSecurityPatch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidBuildInfo::Builder {
public:
  typedef AndroidBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBoard();
  inline  ::capnp::Text::Builder getBoard();
  inline void setBoard( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBoard(unsigned int size);
  inline void adoptBoard(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBoard();

  inline bool hasBootloader();
  inline  ::capnp::Text::Builder getBootloader();
  inline void setBootloader( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBootloader(unsigned int size);
  inline void adoptBootloader(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBootloader();

  inline bool hasBrand();
  inline  ::capnp::Text::Builder getBrand();
  inline void setBrand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBrand(unsigned int size);
  inline void adoptBrand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBrand();

  inline bool hasDevice();
  inline  ::capnp::Text::Builder getDevice();
  inline void setDevice( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDevice(unsigned int size);
  inline void adoptDevice(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDevice();

  inline bool hasDisplay();
  inline  ::capnp::Text::Builder getDisplay();
  inline void setDisplay( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisplay(unsigned int size);
  inline void adoptDisplay(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisplay();

  inline bool hasFingerprint();
  inline  ::capnp::Text::Builder getFingerprint();
  inline void setFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFingerprint(unsigned int size);
  inline void adoptFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFingerprint();

  inline bool hasHardware();
  inline  ::capnp::Text::Builder getHardware();
  inline void setHardware( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHardware(unsigned int size);
  inline void adoptHardware(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHardware();

  inline bool hasHost();
  inline  ::capnp::Text::Builder getHost();
  inline void setHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHost();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasManufacturer();
  inline  ::capnp::Text::Builder getManufacturer();
  inline void setManufacturer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManufacturer(unsigned int size);
  inline void adoptManufacturer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManufacturer();

  inline bool hasModel();
  inline  ::capnp::Text::Builder getModel();
  inline void setModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModel(unsigned int size);
  inline void adoptModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModel();

  inline bool hasProduct();
  inline  ::capnp::Text::Builder getProduct();
  inline void setProduct( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProduct(unsigned int size);
  inline void adoptProduct(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProduct();

  inline bool hasRadioVersion();
  inline  ::capnp::Text::Builder getRadioVersion();
  inline void setRadioVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRadioVersion(unsigned int size);
  inline void adoptRadioVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRadioVersion();

  inline bool hasSerial();
  inline  ::capnp::Text::Builder getSerial();
  inline void setSerial( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSerial(unsigned int size);
  inline void adoptSerial(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSerial();

  inline bool hasSupportedAbis();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSupportedAbis();
  inline void setSupportedAbis( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSupportedAbis(unsigned int size);
  inline void adoptSupportedAbis(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSupportedAbis();

  inline bool hasTags();
  inline  ::capnp::Text::Builder getTags();
  inline void setTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTags();

  inline  ::int64_t getTime();
  inline void setTime( ::int64_t value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasVersionCodename();
  inline  ::capnp::Text::Builder getVersionCodename();
  inline void setVersionCodename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionCodename(unsigned int size);
  inline void adoptVersionCodename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionCodename();

  inline bool hasVersionRelease();
  inline  ::capnp::Text::Builder getVersionRelease();
  inline void setVersionRelease( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionRelease(unsigned int size);
  inline void adoptVersionRelease(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionRelease();

  inline  ::int32_t getVersionSdk();
  inline void setVersionSdk( ::int32_t value);

  inline bool hasVersionSecurityPatch();
  inline  ::capnp::Text::Builder getVersionSecurityPatch();
  inline void setVersionSecurityPatch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionSecurityPatch(unsigned int size);
  inline void adoptVersionSecurityPatch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionSecurityPatch();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidBuildInfo::Pipeline {
public:
  typedef AndroidBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidSensor::Reader {
public:
  typedef AndroidSensor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasVendor() const;
  inline  ::capnp::Text::Reader getVendor() const;

  inline  ::int32_t getVersion() const;

  inline  ::int32_t getHandle() const;

  inline  ::int32_t getType() const;

  inline float getMaxRange() const;

  inline float getResolution() const;

  inline float getPower() const;

  inline  ::int32_t getMinDelay() const;

  inline  ::uint32_t getFifoReservedEventCount() const;

  inline  ::uint32_t getFifoMaxEventCount() const;

  inline bool hasStringType() const;
  inline  ::capnp::Text::Reader getStringType() const;

  inline  ::int32_t getMaxDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidSensor::Builder {
public:
  typedef AndroidSensor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasVendor();
  inline  ::capnp::Text::Builder getVendor();
  inline void setVendor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVendor(unsigned int size);
  inline void adoptVendor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVendor();

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getHandle();
  inline void setHandle( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline float getMaxRange();
  inline void setMaxRange(float value);

  inline float getResolution();
  inline void setResolution(float value);

  inline float getPower();
  inline void setPower(float value);

  inline  ::int32_t getMinDelay();
  inline void setMinDelay( ::int32_t value);

  inline  ::uint32_t getFifoReservedEventCount();
  inline void setFifoReservedEventCount( ::uint32_t value);

  inline  ::uint32_t getFifoMaxEventCount();
  inline void setFifoMaxEventCount( ::uint32_t value);

  inline bool hasStringType();
  inline  ::capnp::Text::Builder getStringType();
  inline void setStringType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStringType(unsigned int size);
  inline void adoptStringType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStringType();

  inline  ::int32_t getMaxDelay();
  inline void setMaxDelay( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidSensor::Pipeline {
public:
  typedef AndroidSensor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::ChffrAndroidExtra::Reader {
public:
  typedef ChffrAndroidExtra Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAllCameraCharacteristics() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::ChffrAndroidExtra::Builder {
public:
  typedef ChffrAndroidExtra Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAllCameraCharacteristics();
  inline void setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAllCameraCharacteristics();
  inline void adoptAllCameraCharacteristics(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAllCameraCharacteristics();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::ChffrAndroidExtra::Pipeline {
public:
  typedef ChffrAndroidExtra Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAllCameraCharacteristics();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::IosBuildInfo::Reader {
public:
  typedef IosBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion() const;
  inline  ::capnp::Text::Reader getAppVersion() const;

  inline  ::uint32_t getAppBuild() const;

  inline bool hasOsVersion() const;
  inline  ::capnp::Text::Reader getOsVersion() const;

  inline bool hasDeviceModel() const;
  inline  ::capnp::Text::Reader getDeviceModel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::IosBuildInfo::Builder {
public:
  typedef IosBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion();
  inline  ::capnp::Text::Builder getAppVersion();
  inline void setAppVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppVersion(unsigned int size);
  inline void adoptAppVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppVersion();

  inline  ::uint32_t getAppBuild();
  inline void setAppBuild( ::uint32_t value);

  inline bool hasOsVersion();
  inline  ::capnp::Text::Builder getOsVersion();
  inline void setOsVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOsVersion(unsigned int size);
  inline void adoptOsVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOsVersion();

  inline bool hasDeviceModel();
  inline  ::capnp::Text::Builder getDeviceModel();
  inline void setDeviceModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDeviceModel(unsigned int size);
  inline void adoptDeviceModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDeviceModel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::IosBuildInfo::Pipeline {
public:
  typedef IosBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraOdometry::Reader {
public:
  typedef CameraOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRotStd() const;

  inline  ::uint32_t getFrameId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasWideFromDeviceEuler() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEuler() const;

  inline bool hasWideFromDeviceEulerStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEulerStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraOdometry::Builder {
public:
  typedef CameraOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTrans();
  inline void setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRot();
  inline void setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRotStd();

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasWideFromDeviceEuler();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEuler();
  inline void setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEuler(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEuler(unsigned int size);
  inline void adoptWideFromDeviceEuler(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEuler();

  inline bool hasWideFromDeviceEulerStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEulerStd();
  inline void setWideFromDeviceEulerStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEulerStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEulerStd(unsigned int size);
  inline void adoptWideFromDeviceEulerStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEulerStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraOdometry::Pipeline {
public:
  typedef CameraOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sentinel::Reader {
public:
  typedef Sentinel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::Sentinel::SentinelType getType() const;

  inline  ::int32_t getSignal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sentinel::Builder {
public:
  typedef Sentinel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::Sentinel::SentinelType getType();
  inline void setType( ::cereal::Sentinel::SentinelType value);

  inline  ::int32_t getSignal();
  inline void setSignal( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sentinel::Pipeline {
public:
  typedef Sentinel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveCalibrationData::Reader {
public:
  typedef LiveCalibrationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrixDEPRECATED() const;

  inline  ::int8_t getCalStatusDEPRECATED() const;

  inline  ::int32_t getCalCycle() const;

  inline  ::int8_t getCalPerc() const;

  inline bool hasExtrinsicMatrix() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getExtrinsicMatrix() const;

  inline bool hasWarpMatrix2DEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrix2DEPRECATED() const;

  inline bool hasWarpMatrixBigDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrixBigDEPRECATED() const;

  inline bool hasRpyCalib() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRpyCalib() const;

  inline bool hasRpyCalibSpread() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRpyCalibSpread() const;

  inline  ::int32_t getValidBlocks() const;

  inline bool hasWideFromDeviceEuler() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEuler() const;

  inline  ::cereal::LiveCalibrationData::Status getCalStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveCalibrationData::Builder {
public:
  typedef LiveCalibrationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrixDEPRECATED();
  inline void setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrixDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrixDEPRECATED();

  inline  ::int8_t getCalStatusDEPRECATED();
  inline void setCalStatusDEPRECATED( ::int8_t value);

  inline  ::int32_t getCalCycle();
  inline void setCalCycle( ::int32_t value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

  inline bool hasExtrinsicMatrix();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getExtrinsicMatrix();
  inline void setExtrinsicMatrix( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setExtrinsicMatrix(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initExtrinsicMatrix(unsigned int size);
  inline void adoptExtrinsicMatrix(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownExtrinsicMatrix();

  inline bool hasWarpMatrix2DEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrix2DEPRECATED();
  inline void setWarpMatrix2DEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrix2DEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrix2DEPRECATED(unsigned int size);
  inline void adoptWarpMatrix2DEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrix2DEPRECATED();

  inline bool hasWarpMatrixBigDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrixBigDEPRECATED();
  inline void setWarpMatrixBigDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrixBigDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrixBigDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixBigDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrixBigDEPRECATED();

  inline bool hasRpyCalib();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRpyCalib();
  inline void setRpyCalib( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRpyCalib(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRpyCalib(unsigned int size);
  inline void adoptRpyCalib(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRpyCalib();

  inline bool hasRpyCalibSpread();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRpyCalibSpread();
  inline void setRpyCalibSpread( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRpyCalibSpread(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRpyCalibSpread(unsigned int size);
  inline void adoptRpyCalibSpread(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRpyCalibSpread();

  inline  ::int32_t getValidBlocks();
  inline void setValidBlocks( ::int32_t value);

  inline bool hasWideFromDeviceEuler();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEuler();
  inline void setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEuler(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEuler(unsigned int size);
  inline void adoptWideFromDeviceEuler(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEuler();

  inline  ::cereal::LiveCalibrationData::Status getCalStatus();
  inline void setCalStatus( ::cereal::LiveCalibrationData::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveCalibrationData::Pipeline {
public:
  typedef LiveCalibrationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::Reader {
public:
  typedef ModelDataV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getFrameAge() const;

  inline float getFrameDropPerc() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasPosition() const;
  inline  ::cereal::ModelDataV2::XYZTData::Reader getPosition() const;

  inline bool hasOrientation() const;
  inline  ::cereal::ModelDataV2::XYZTData::Reader getOrientation() const;

  inline bool hasVelocity() const;
  inline  ::cereal::ModelDataV2::XYZTData::Reader getVelocity() const;

  inline bool hasOrientationRate() const;
  inline  ::cereal::ModelDataV2::XYZTData::Reader getOrientationRate() const;

  inline bool hasLaneLines() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader getLaneLines() const;

  inline bool hasLaneLineProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLaneLineProbs() const;

  inline bool hasRoadEdges() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader getRoadEdges() const;

  inline bool hasLeads() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader getLeads() const;

  inline bool hasMeta() const;
  inline  ::cereal::ModelDataV2::MetaData::Reader getMeta() const;

  inline bool hasLaneLineStds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLaneLineStds() const;

  inline bool hasRoadEdgeStds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadEdgeStds() const;

  inline float getModelExecutionTime() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::Data::Reader getRawPredictions() const;

  inline float getGpuExecutionTime() const;

  inline bool hasLeadsV3() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader getLeadsV3() const;

  inline bool hasAcceleration() const;
  inline  ::cereal::ModelDataV2::XYZTData::Reader getAcceleration() const;

  inline  ::uint32_t getFrameIdExtra() const;

  inline bool hasTemporalPose() const;
  inline  ::cereal::ModelDataV2::Pose::Reader getTemporalPose() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::Builder {
public:
  typedef ModelDataV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getFrameAge();
  inline void setFrameAge( ::uint32_t value);

  inline float getFrameDropPerc();
  inline void setFrameDropPerc(float value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasPosition();
  inline  ::cereal::ModelDataV2::XYZTData::Builder getPosition();
  inline void setPosition( ::cereal::ModelDataV2::XYZTData::Reader value);
  inline  ::cereal::ModelDataV2::XYZTData::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> disownPosition();

  inline bool hasOrientation();
  inline  ::cereal::ModelDataV2::XYZTData::Builder getOrientation();
  inline void setOrientation( ::cereal::ModelDataV2::XYZTData::Reader value);
  inline  ::cereal::ModelDataV2::XYZTData::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> disownOrientation();

  inline bool hasVelocity();
  inline  ::cereal::ModelDataV2::XYZTData::Builder getVelocity();
  inline void setVelocity( ::cereal::ModelDataV2::XYZTData::Reader value);
  inline  ::cereal::ModelDataV2::XYZTData::Builder initVelocity();
  inline void adoptVelocity(::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> disownVelocity();

  inline bool hasOrientationRate();
  inline  ::cereal::ModelDataV2::XYZTData::Builder getOrientationRate();
  inline void setOrientationRate( ::cereal::ModelDataV2::XYZTData::Reader value);
  inline  ::cereal::ModelDataV2::XYZTData::Builder initOrientationRate();
  inline void adoptOrientationRate(::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> disownOrientationRate();

  inline bool hasLaneLines();
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder getLaneLines();
  inline void setLaneLines( ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder initLaneLines(unsigned int size);
  inline void adoptLaneLines(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>> disownLaneLines();

  inline bool hasLaneLineProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLaneLineProbs();
  inline void setLaneLineProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneLineProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLaneLineProbs(unsigned int size);
  inline void adoptLaneLineProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLaneLineProbs();

  inline bool hasRoadEdges();
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder getRoadEdges();
  inline void setRoadEdges( ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder initRoadEdges(unsigned int size);
  inline void adoptRoadEdges(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>> disownRoadEdges();

  inline bool hasLeads();
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder getLeads();
  inline void setLeads( ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder initLeads(unsigned int size);
  inline void adoptLeads(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>> disownLeads();

  inline bool hasMeta();
  inline  ::cereal::ModelDataV2::MetaData::Builder getMeta();
  inline void setMeta( ::cereal::ModelDataV2::MetaData::Reader value);
  inline  ::cereal::ModelDataV2::MetaData::Builder initMeta();
  inline void adoptMeta(::capnp::Orphan< ::cereal::ModelDataV2::MetaData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::MetaData> disownMeta();

  inline bool hasLaneLineStds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLaneLineStds();
  inline void setLaneLineStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneLineStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLaneLineStds(unsigned int size);
  inline void adoptLaneLineStds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLaneLineStds();

  inline bool hasRoadEdgeStds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadEdgeStds();
  inline void setRoadEdgeStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadEdgeStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadEdgeStds(unsigned int size);
  inline void adoptRoadEdgeStds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadEdgeStds();

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline bool hasRawPredictions();
  inline  ::capnp::Data::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPredictions();

  inline float getGpuExecutionTime();
  inline void setGpuExecutionTime(float value);

  inline bool hasLeadsV3();
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder getLeadsV3();
  inline void setLeadsV3( ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder initLeadsV3(unsigned int size);
  inline void adoptLeadsV3(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>> disownLeadsV3();

  inline bool hasAcceleration();
  inline  ::cereal::ModelDataV2::XYZTData::Builder getAcceleration();
  inline void setAcceleration( ::cereal::ModelDataV2::XYZTData::Reader value);
  inline  ::cereal::ModelDataV2::XYZTData::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> disownAcceleration();

  inline  ::uint32_t getFrameIdExtra();
  inline void setFrameIdExtra( ::uint32_t value);

  inline bool hasTemporalPose();
  inline  ::cereal::ModelDataV2::Pose::Builder getTemporalPose();
  inline void setTemporalPose( ::cereal::ModelDataV2::Pose::Reader value);
  inline  ::cereal::ModelDataV2::Pose::Builder initTemporalPose();
  inline void adoptTemporalPose(::capnp::Orphan< ::cereal::ModelDataV2::Pose>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::Pose> disownTemporalPose();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::Pipeline {
public:
  typedef ModelDataV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelDataV2::XYZTData::Pipeline getPosition();
  inline  ::cereal::ModelDataV2::XYZTData::Pipeline getOrientation();
  inline  ::cereal::ModelDataV2::XYZTData::Pipeline getVelocity();
  inline  ::cereal::ModelDataV2::XYZTData::Pipeline getOrientationRate();
  inline  ::cereal::ModelDataV2::MetaData::Pipeline getMeta();
  inline  ::cereal::ModelDataV2::XYZTData::Pipeline getAcceleration();
  inline  ::cereal::ModelDataV2::Pose::Pipeline getTemporalPose();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::XYZTData::Reader {
public:
  typedef XYZTData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasZ() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getZ() const;

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

  inline bool hasZStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getZStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::XYZTData::Builder {
public:
  typedef XYZTData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasZ();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getZ();
  inline void setZ( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setZ(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initZ(unsigned int size);
  inline void adoptZ(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownZ();

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

  inline bool hasZStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getZStd();
  inline void setZStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setZStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initZStd(unsigned int size);
  inline void adoptZStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownZStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::XYZTData::Pipeline {
public:
  typedef XYZTData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::LeadDataV2::Reader {
public:
  typedef LeadDataV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getProb() const;

  inline float getT() const;

  inline bool hasXyva() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXyva() const;

  inline bool hasXyvaStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXyvaStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::LeadDataV2::Builder {
public:
  typedef LeadDataV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getProb();
  inline void setProb(float value);

  inline float getT();
  inline void setT(float value);

  inline bool hasXyva();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXyva();
  inline void setXyva( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyva(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXyva(unsigned int size);
  inline void adoptXyva(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXyva();

  inline bool hasXyvaStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXyvaStd();
  inline void setXyvaStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyvaStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXyvaStd(unsigned int size);
  inline void adoptXyvaStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXyvaStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::LeadDataV2::Pipeline {
public:
  typedef LeadDataV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::LeadDataV3::Reader {
public:
  typedef LeadDataV3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getProb() const;

  inline float getProbTime() const;

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

  inline bool hasV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getV() const;

  inline bool hasVStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVStd() const;

  inline bool hasA() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getA() const;

  inline bool hasAStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::LeadDataV3::Builder {
public:
  typedef LeadDataV3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getProb();
  inline void setProb(float value);

  inline float getProbTime();
  inline void setProbTime(float value);

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

  inline bool hasV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getV();
  inline void setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownV();

  inline bool hasVStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVStd();
  inline void setVStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVStd(unsigned int size);
  inline void adoptVStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVStd();

  inline bool hasA();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getA();
  inline void setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setA(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownA();

  inline bool hasAStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAStd();
  inline void setAStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAStd(unsigned int size);
  inline void adoptAStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::LeadDataV3::Pipeline {
public:
  typedef LeadDataV3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::MetaData::Reader {
public:
  typedef MetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getEngagedProb() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesirePrediction() const;

  inline float getBrakeDisengageProbDEPRECATED() const;

  inline float getGasDisengageProbDEPRECATED() const;

  inline float getSteerOverrideProbDEPRECATED() const;

  inline bool hasDesireState() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesireState() const;

  inline bool hasDisengagePredictions() const;
  inline  ::cereal::ModelDataV2::DisengagePredictions::Reader getDisengagePredictions() const;

  inline bool getHardBrakePredicted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::MetaData::Builder {
public:
  typedef MetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getEngagedProb();
  inline void setEngagedProb(float value);

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesirePrediction();

  inline float getBrakeDisengageProbDEPRECATED();
  inline void setBrakeDisengageProbDEPRECATED(float value);

  inline float getGasDisengageProbDEPRECATED();
  inline void setGasDisengageProbDEPRECATED(float value);

  inline float getSteerOverrideProbDEPRECATED();
  inline void setSteerOverrideProbDEPRECATED(float value);

  inline bool hasDesireState();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesireState();
  inline void setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesireState(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesireState(unsigned int size);
  inline void adoptDesireState(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesireState();

  inline bool hasDisengagePredictions();
  inline  ::cereal::ModelDataV2::DisengagePredictions::Builder getDisengagePredictions();
  inline void setDisengagePredictions( ::cereal::ModelDataV2::DisengagePredictions::Reader value);
  inline  ::cereal::ModelDataV2::DisengagePredictions::Builder initDisengagePredictions();
  inline void adoptDisengagePredictions(::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions> disownDisengagePredictions();

  inline bool getHardBrakePredicted();
  inline void setHardBrakePredicted(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::MetaData::Pipeline {
public:
  typedef MetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelDataV2::DisengagePredictions::Pipeline getDisengagePredictions();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::DisengagePredictions::Reader {
public:
  typedef DisengagePredictions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasBrakeDisengageProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeDisengageProbs() const;

  inline bool hasGasDisengageProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasDisengageProbs() const;

  inline bool hasSteerOverrideProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerOverrideProbs() const;

  inline bool hasBrake3MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake3MetersPerSecondSquaredProbs() const;

  inline bool hasBrake4MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake4MetersPerSecondSquaredProbs() const;

  inline bool hasBrake5MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake5MetersPerSecondSquaredProbs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::DisengagePredictions::Builder {
public:
  typedef DisengagePredictions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasBrakeDisengageProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeDisengageProbs();
  inline void setBrakeDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeDisengageProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeDisengageProbs(unsigned int size);
  inline void adoptBrakeDisengageProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeDisengageProbs();

  inline bool hasGasDisengageProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasDisengageProbs();
  inline void setGasDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasDisengageProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasDisengageProbs(unsigned int size);
  inline void adoptGasDisengageProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasDisengageProbs();

  inline bool hasSteerOverrideProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerOverrideProbs();
  inline void setSteerOverrideProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerOverrideProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerOverrideProbs(unsigned int size);
  inline void adoptSteerOverrideProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerOverrideProbs();

  inline bool hasBrake3MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake3MetersPerSecondSquaredProbs();
  inline void setBrake3MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake3MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake3MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake3MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake3MetersPerSecondSquaredProbs();

  inline bool hasBrake4MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake4MetersPerSecondSquaredProbs();
  inline void setBrake4MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake4MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake4MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake4MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake4MetersPerSecondSquaredProbs();

  inline bool hasBrake5MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake5MetersPerSecondSquaredProbs();
  inline void setBrake5MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake5MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake5MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake5MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake5MetersPerSecondSquaredProbs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::DisengagePredictions::Pipeline {
public:
  typedef DisengagePredictions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::Pose::Reader {
public:
  typedef Pose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRotStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::Pose::Builder {
public:
  typedef Pose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTrans();
  inline void setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRot();
  inline void setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRotStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::Pose::Pipeline {
public:
  typedef Pose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavModelData::Reader {
public:
  typedef NavModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline float getModelExecutionTime() const;

  inline float getDspExecutionTime() const;

  inline bool hasFeatures() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFeatures() const;

  inline bool hasPosition() const;
  inline  ::cereal::NavModelData::XYData::Reader getPosition() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesirePrediction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavModelData::Builder {
public:
  typedef NavModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline float getDspExecutionTime();
  inline void setDspExecutionTime(float value);

  inline bool hasFeatures();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFeatures();
  inline void setFeatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFeatures(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFeatures(unsigned int size);
  inline void adoptFeatures(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFeatures();

  inline bool hasPosition();
  inline  ::cereal::NavModelData::XYData::Builder getPosition();
  inline void setPosition( ::cereal::NavModelData::XYData::Reader value);
  inline  ::cereal::NavModelData::XYData::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::cereal::NavModelData::XYData>&& value);
  inline ::capnp::Orphan< ::cereal::NavModelData::XYData> disownPosition();

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesirePrediction();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavModelData::Pipeline {
public:
  typedef NavModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavModelData::XYData::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavModelData::XYData::Reader {
public:
  typedef XYData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavModelData::XYData::Builder {
public:
  typedef XYData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavModelData::XYData::Pipeline {
public:
  typedef XYData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Desire::Reader {
public:
  typedef Desire Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMeta() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getMeta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Desire::Builder {
public:
  typedef Desire Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMeta();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getMeta();
  inline void setMeta( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMeta(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initMeta(unsigned int size);
  inline void adoptMeta(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownMeta();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Desire::Pipeline {
public:
  typedef Desire Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gyroscope::Reader {
public:
  typedef Gyroscope Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gyroscope::Builder {
public:
  typedef Gyroscope Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gyroscope::Pipeline {
public:
  typedef Gyroscope Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Accelerometer::Reader {
public:
  typedef Accelerometer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Accelerometer::Builder {
public:
  typedef Accelerometer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Accelerometer::Pipeline {
public:
  typedef Accelerometer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::Reader {
public:
  typedef FrameData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline  ::int32_t getFrameLength() const;

  inline  ::int32_t getIntegLines() const;

  inline  ::int32_t getGlobalGainDEPRECATED() const;

  inline bool hasImage() const;
  inline  ::capnp::Data::Reader getImage() const;

  inline  ::cereal::FrameData::FrameType getFrameType() const;

  inline  ::uint64_t getTimestampSof() const;

  inline bool hasAndroidCaptureResult() const;
  inline  ::cereal::FrameData::AndroidCaptureResult::Reader getAndroidCaptureResult() const;

  inline bool hasIntrinsics() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getIntrinsics() const;

  inline  ::int32_t getLensPos() const;

  inline float getLensSag() const;

  inline float getLensErr() const;

  inline float getLensTruePos() const;

  inline float getGain() const;

  inline bool hasFocusVal() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getFocusVal() const;

  inline bool hasFocusConf() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getFocusConf() const;

  inline bool hasSharpnessScore() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getSharpnessScore() const;

  inline  ::int32_t getRecoverState() const;

  inline bool getHighConversionGain() const;

  inline float getMeasuredGreyFraction() const;

  inline float getTargetGreyFraction() const;

  inline  ::uint64_t getNativeImageAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::Builder {
public:
  typedef FrameData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::int32_t getFrameLength();
  inline void setFrameLength( ::int32_t value);

  inline  ::int32_t getIntegLines();
  inline void setIntegLines( ::int32_t value);

  inline  ::int32_t getGlobalGainDEPRECATED();
  inline void setGlobalGainDEPRECATED( ::int32_t value);

  inline bool hasImage();
  inline  ::capnp::Data::Builder getImage();
  inline void setImage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImage();

  inline  ::cereal::FrameData::FrameType getFrameType();
  inline void setFrameType( ::cereal::FrameData::FrameType value);

  inline  ::uint64_t getTimestampSof();
  inline void setTimestampSof( ::uint64_t value);

  inline bool hasAndroidCaptureResult();
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder getAndroidCaptureResult();
  inline void setAndroidCaptureResult( ::cereal::FrameData::AndroidCaptureResult::Reader value);
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder initAndroidCaptureResult();
  inline void adoptAndroidCaptureResult(::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> disownAndroidCaptureResult();

  inline bool hasIntrinsics();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getIntrinsics();
  inline void setIntrinsics( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIntrinsics(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initIntrinsics(unsigned int size);
  inline void adoptIntrinsics(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownIntrinsics();

  inline  ::int32_t getLensPos();
  inline void setLensPos( ::int32_t value);

  inline float getLensSag();
  inline void setLensSag(float value);

  inline float getLensErr();
  inline void setLensErr(float value);

  inline float getLensTruePos();
  inline void setLensTruePos(float value);

  inline float getGain();
  inline void setGain(float value);

  inline bool hasFocusVal();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getFocusVal();
  inline void setFocusVal( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFocusVal(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initFocusVal(unsigned int size);
  inline void adoptFocusVal(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownFocusVal();

  inline bool hasFocusConf();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getFocusConf();
  inline void setFocusConf( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFocusConf(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initFocusConf(unsigned int size);
  inline void adoptFocusConf(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownFocusConf();

  inline bool hasSharpnessScore();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getSharpnessScore();
  inline void setSharpnessScore( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSharpnessScore(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initSharpnessScore(unsigned int size);
  inline void adoptSharpnessScore(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownSharpnessScore();

  inline  ::int32_t getRecoverState();
  inline void setRecoverState( ::int32_t value);

  inline bool getHighConversionGain();
  inline void setHighConversionGain(bool value);

  inline float getMeasuredGreyFraction();
  inline void setMeasuredGreyFraction(float value);

  inline float getTargetGreyFraction();
  inline void setTargetGreyFraction(float value);

  inline  ::uint64_t getNativeImageAddr();
  inline void setNativeImageAddr( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::Pipeline {
public:
  typedef FrameData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline getAndroidCaptureResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::AndroidCaptureResult::Reader {
public:
  typedef AndroidCaptureResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity() const;

  inline  ::int64_t getFrameDuration() const;

  inline  ::int64_t getExposureTime() const;

  inline  ::uint64_t getRollingShutterSkew() const;

  inline bool hasColorCorrectionTransform() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getColorCorrectionTransform() const;

  inline bool hasColorCorrectionGains() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getColorCorrectionGains() const;

  inline  ::int8_t getDisplayRotation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::AndroidCaptureResult::Builder {
public:
  typedef AndroidCaptureResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity();
  inline void setSensitivity( ::int32_t value);

  inline  ::int64_t getFrameDuration();
  inline void setFrameDuration( ::int64_t value);

  inline  ::int64_t getExposureTime();
  inline void setExposureTime( ::int64_t value);

  inline  ::uint64_t getRollingShutterSkew();
  inline void setRollingShutterSkew( ::uint64_t value);

  inline bool hasColorCorrectionTransform();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getColorCorrectionTransform();
  inline void setColorCorrectionTransform( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initColorCorrectionTransform(unsigned int size);
  inline void adoptColorCorrectionTransform(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownColorCorrectionTransform();

  inline bool hasColorCorrectionGains();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getColorCorrectionGains();
  inline void setColorCorrectionGains( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColorCorrectionGains(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initColorCorrectionGains(unsigned int size);
  inline void adoptColorCorrectionGains(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownColorCorrectionGains();

  inline  ::int8_t getDisplayRotation();
  inline void setDisplayRotation( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::AndroidCaptureResult::Pipeline {
public:
  typedef AndroidCaptureResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameBuffer::Reader {
public:
  typedef FrameBuffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasImage() const;
  inline  ::capnp::Data::Reader getImage() const;

  inline  ::uint64_t getImageAddress() const;

  inline  ::cereal::FrameBuffer::Encoding getEncoding() const;

  inline  ::int32_t getFrameWidth() const;

  inline  ::int32_t getFrameHeight() const;

  inline  ::int32_t getStride() const;

  inline  ::int32_t getYWidth() const;

  inline  ::int32_t getYHeight() const;

  inline  ::int32_t getYPixelStride() const;

  inline  ::int32_t getUvWidth() const;

  inline  ::int32_t getUvHeight() const;

  inline  ::int32_t getUvPixelStride() const;

  inline  ::int32_t getUOffset() const;

  inline  ::int32_t getVOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameBuffer::Builder {
public:
  typedef FrameBuffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasImage();
  inline  ::capnp::Data::Builder getImage();
  inline void setImage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImage();

  inline  ::uint64_t getImageAddress();
  inline void setImageAddress( ::uint64_t value);

  inline  ::cereal::FrameBuffer::Encoding getEncoding();
  inline void setEncoding( ::cereal::FrameBuffer::Encoding value);

  inline  ::int32_t getFrameWidth();
  inline void setFrameWidth( ::int32_t value);

  inline  ::int32_t getFrameHeight();
  inline void setFrameHeight( ::int32_t value);

  inline  ::int32_t getStride();
  inline void setStride( ::int32_t value);

  inline  ::int32_t getYWidth();
  inline void setYWidth( ::int32_t value);

  inline  ::int32_t getYHeight();
  inline void setYHeight( ::int32_t value);

  inline  ::int32_t getYPixelStride();
  inline void setYPixelStride( ::int32_t value);

  inline  ::int32_t getUvWidth();
  inline void setUvWidth( ::int32_t value);

  inline  ::int32_t getUvHeight();
  inline void setUvHeight( ::int32_t value);

  inline  ::int32_t getUvPixelStride();
  inline void setUvPixelStride( ::int32_t value);

  inline  ::int32_t getUOffset();
  inline void setUOffset( ::int32_t value);

  inline  ::int32_t getVOffset();
  inline void setVOffset( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameBuffer::Pipeline {
public:
  typedef FrameBuffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Memory::Reader {
public:
  typedef Memory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getFree() const;

  inline  ::uint64_t getAvailable() const;

  inline  ::uint64_t getBuffers() const;

  inline  ::uint64_t getCached() const;

  inline  ::uint64_t getActive() const;

  inline  ::uint64_t getInactive() const;

  inline  ::uint64_t getShared() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Memory::Builder {
public:
  typedef Memory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getFree();
  inline void setFree( ::uint64_t value);

  inline  ::uint64_t getAvailable();
  inline void setAvailable( ::uint64_t value);

  inline  ::uint64_t getBuffers();
  inline void setBuffers( ::uint64_t value);

  inline  ::uint64_t getCached();
  inline void setCached( ::uint64_t value);

  inline  ::uint64_t getActive();
  inline void setActive( ::uint64_t value);

  inline  ::uint64_t getInactive();
  inline void setInactive( ::uint64_t value);

  inline  ::uint64_t getShared();
  inline void setShared( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Memory::Pipeline {
public:
  typedef Memory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CanData::Reader {
public:
  typedef CanData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress() const;

  inline  ::uint16_t getBusTime() const;

  inline bool hasDat() const;
  inline  ::capnp::Data::Reader getDat() const;

  inline  ::uint8_t getSrc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CanData::Builder {
public:
  typedef CanData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint16_t getBusTime();
  inline void setBusTime( ::uint16_t value);

  inline bool hasDat();
  inline  ::capnp::Data::Builder getDat();
  inline void setDat( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDat(unsigned int size);
  inline void adoptDat(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDat();

  inline  ::uint8_t getSrc();
  inline void setSrc( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CanData::Pipeline {
public:
  typedef CanData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LateralPlan::Reader {
public:
  typedef LateralPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getModelMonoTime() const;

  inline float getLaneWidth() const;

  inline float getLProb() const;

  inline float getRProb() const;

  inline bool hasDPathPoints() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPathPoints() const;

  inline float getDProb() const;

  inline bool getMpcSolutionValid() const;

  inline  ::cereal::LateralPlan::Desire getDesire() const;

  inline  ::cereal::LateralPlan::LaneChangeState getLaneChangeState() const;

  inline  ::cereal::LateralPlan::LaneChangeDirection getLaneChangeDirection() const;

  inline bool getUseLaneLines() const;

  inline bool hasPsis() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPsis() const;

  inline bool hasCurvatures() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCurvatures() const;

  inline bool hasCurvatureRates() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCurvatureRates() const;

  inline float getSolverExecutionTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LateralPlan::Builder {
public:
  typedef LateralPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getModelMonoTime();
  inline void setModelMonoTime( ::uint64_t value);

  inline float getLaneWidth();
  inline void setLaneWidth(float value);

  inline float getLProb();
  inline void setLProb(float value);

  inline float getRProb();
  inline void setRProb(float value);

  inline bool hasDPathPoints();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPathPoints();
  inline void setDPathPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPathPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPathPoints(unsigned int size);
  inline void adoptDPathPoints(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPathPoints();

  inline float getDProb();
  inline void setDProb(float value);

  inline bool getMpcSolutionValid();
  inline void setMpcSolutionValid(bool value);

  inline  ::cereal::LateralPlan::Desire getDesire();
  inline void setDesire( ::cereal::LateralPlan::Desire value);

  inline  ::cereal::LateralPlan::LaneChangeState getLaneChangeState();
  inline void setLaneChangeState( ::cereal::LateralPlan::LaneChangeState value);

  inline  ::cereal::LateralPlan::LaneChangeDirection getLaneChangeDirection();
  inline void setLaneChangeDirection( ::cereal::LateralPlan::LaneChangeDirection value);

  inline bool getUseLaneLines();
  inline void setUseLaneLines(bool value);

  inline bool hasPsis();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPsis();
  inline void setPsis( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPsis(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPsis(unsigned int size);
  inline void adoptPsis(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPsis();

  inline bool hasCurvatures();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCurvatures();
  inline void setCurvatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCurvatures(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCurvatures(unsigned int size);
  inline void adoptCurvatures(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCurvatures();

  inline bool hasCurvatureRates();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCurvatureRates();
  inline void setCurvatureRates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCurvatureRates(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCurvatureRates(unsigned int size);
  inline void adoptCurvatureRates(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCurvatureRates();

  inline float getSolverExecutionTime();
  inline void setSolverExecutionTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LateralPlan::Pipeline {
public:
  typedef LateralPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::Reader {
public:
  typedef ControlsState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVEgoDEPRECATED() const;

  inline float getAEgoDEPRECATED() const;

  inline float getVPid() const;

  inline float getVTargetLead() const;

  inline float getUpAccelCmd() const;

  inline float getUiAccelCmd() const;

  inline float getYActualDEPRECATED() const;

  inline float getYDesDEPRECATED() const;

  inline float getUpSteerDEPRECATED() const;

  inline float getUiSteerDEPRECATED() const;

  inline float getATargetMinDEPRECATED() const;

  inline float getATargetMaxDEPRECATED() const;

  inline float getJerkFactorDEPRECATED() const;

  inline float getAngleSteersDEPRECATED() const;

  inline  ::int32_t getHudLeadDEPRECATED() const;

  inline float getCumLagMs() const;

  inline  ::uint64_t getCanMonoTimeDEPRECATED() const;

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED() const;

  inline  ::uint64_t getMdMonoTimeDEPRECATED() const;

  inline bool getEnabled() const;

  inline bool getSteerOverrideDEPRECATED() const;

  inline bool hasCanMonoTimesDEPRECATED() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimesDEPRECATED() const;

  inline float getVCruise() const;

  inline bool getRearViewCamDEPRECATED() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatusDEPRECATED() const;

  inline float getAngleModelBiasDEPRECATED() const;

  inline  ::uint64_t getLongitudinalPlanMonoTime() const;

  inline float getSteeringAngleDesiredDegDEPRECATED() const;

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState() const;

  inline  ::cereal::ControlsState::FlowpilotState getState() const;

  inline float getVEgoRawDEPRECATED() const;

  inline float getUfAccelCmd() const;

  inline float getUfSteerDEPRECATED() const;

  inline float getATarget() const;

  inline bool getActive() const;

  inline float getCurvature() const;

  inline  ::cereal::ControlsState::AlertStatus getAlertStatus() const;

  inline  ::cereal::ControlsState::AlertSize getAlertSize() const;

  inline bool getGpsPlannerActiveDEPRECATED() const;

  inline bool getEngageable() const;

  inline float getAlertBlinkingRate() const;

  inline bool getDriverMonitoringOnDEPRECATED() const;

  inline bool hasAlertType() const;
  inline  ::capnp::Text::Reader getAlertType() const;

  inline bool hasAlertSoundDEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertSoundDEPRECATED() const;

  inline float getVCurvatureDEPRECATED() const;

  inline bool getDecelForTurnDEPRECATED() const;

  inline  ::uint64_t getStartMonoTime() const;

  inline bool getMapValidDEPRECATED() const;

  inline  ::uint64_t getLateralPlanMonoTime() const;

  inline bool getForceDecel() const;

  inline typename LateralControlState::Reader getLateralControlState() const;

  inline bool getDecelForModelDEPRECATED() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound() const;

  inline  ::uint32_t getCanErrorCounter() const;

  inline float getDesiredCurvature() const;

  inline float getDesiredCurvatureRate() const;

  inline float getVCruiseCluster() const;

  inline bool getExperimentalMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::Builder {
public:
  typedef ControlsState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVEgoDEPRECATED();
  inline void setVEgoDEPRECATED(float value);

  inline float getAEgoDEPRECATED();
  inline void setAEgoDEPRECATED(float value);

  inline float getVPid();
  inline void setVPid(float value);

  inline float getVTargetLead();
  inline void setVTargetLead(float value);

  inline float getUpAccelCmd();
  inline void setUpAccelCmd(float value);

  inline float getUiAccelCmd();
  inline void setUiAccelCmd(float value);

  inline float getYActualDEPRECATED();
  inline void setYActualDEPRECATED(float value);

  inline float getYDesDEPRECATED();
  inline void setYDesDEPRECATED(float value);

  inline float getUpSteerDEPRECATED();
  inline void setUpSteerDEPRECATED(float value);

  inline float getUiSteerDEPRECATED();
  inline void setUiSteerDEPRECATED(float value);

  inline float getATargetMinDEPRECATED();
  inline void setATargetMinDEPRECATED(float value);

  inline float getATargetMaxDEPRECATED();
  inline void setATargetMaxDEPRECATED(float value);

  inline float getJerkFactorDEPRECATED();
  inline void setJerkFactorDEPRECATED(float value);

  inline float getAngleSteersDEPRECATED();
  inline void setAngleSteersDEPRECATED(float value);

  inline  ::int32_t getHudLeadDEPRECATED();
  inline void setHudLeadDEPRECATED( ::int32_t value);

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline  ::uint64_t getCanMonoTimeDEPRECATED();
  inline void setCanMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED();
  inline void setRadarStateMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getMdMonoTimeDEPRECATED();
  inline void setMdMonoTimeDEPRECATED( ::uint64_t value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getSteerOverrideDEPRECATED();
  inline void setSteerOverrideDEPRECATED(bool value);

  inline bool hasCanMonoTimesDEPRECATED();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimesDEPRECATED();
  inline void setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimesDEPRECATED(unsigned int size);
  inline void adoptCanMonoTimesDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimesDEPRECATED();

  inline float getVCruise();
  inline void setVCruise(float value);

  inline bool getRearViewCamDEPRECATED();
  inline void setRearViewCamDEPRECATED(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatusDEPRECATED();
  inline void setAwarenessStatusDEPRECATED(float value);

  inline float getAngleModelBiasDEPRECATED();
  inline void setAngleModelBiasDEPRECATED(float value);

  inline  ::uint64_t getLongitudinalPlanMonoTime();
  inline void setLongitudinalPlanMonoTime( ::uint64_t value);

  inline float getSteeringAngleDesiredDegDEPRECATED();
  inline void setSteeringAngleDesiredDegDEPRECATED(float value);

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState();
  inline void setLongControlState( ::cereal::CarControl::Actuators::LongControlState value);

  inline  ::cereal::ControlsState::FlowpilotState getState();
  inline void setState( ::cereal::ControlsState::FlowpilotState value);

  inline float getVEgoRawDEPRECATED();
  inline void setVEgoRawDEPRECATED(float value);

  inline float getUfAccelCmd();
  inline void setUfAccelCmd(float value);

  inline float getUfSteerDEPRECATED();
  inline void setUfSteerDEPRECATED(float value);

  inline float getATarget();
  inline void setATarget(float value);

  inline bool getActive();
  inline void setActive(bool value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline  ::cereal::ControlsState::AlertStatus getAlertStatus();
  inline void setAlertStatus( ::cereal::ControlsState::AlertStatus value);

  inline  ::cereal::ControlsState::AlertSize getAlertSize();
  inline void setAlertSize( ::cereal::ControlsState::AlertSize value);

  inline bool getGpsPlannerActiveDEPRECATED();
  inline void setGpsPlannerActiveDEPRECATED(bool value);

  inline bool getEngageable();
  inline void setEngageable(bool value);

  inline float getAlertBlinkingRate();
  inline void setAlertBlinkingRate(float value);

  inline bool getDriverMonitoringOnDEPRECATED();
  inline void setDriverMonitoringOnDEPRECATED(bool value);

  inline bool hasAlertType();
  inline  ::capnp::Text::Builder getAlertType();
  inline void setAlertType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertType(unsigned int size);
  inline void adoptAlertType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertType();

  inline bool hasAlertSoundDEPRECATED();
  inline  ::capnp::Text::Builder getAlertSoundDEPRECATED();
  inline void setAlertSoundDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertSoundDEPRECATED(unsigned int size);
  inline void adoptAlertSoundDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertSoundDEPRECATED();

  inline float getVCurvatureDEPRECATED();
  inline void setVCurvatureDEPRECATED(float value);

  inline bool getDecelForTurnDEPRECATED();
  inline void setDecelForTurnDEPRECATED(bool value);

  inline  ::uint64_t getStartMonoTime();
  inline void setStartMonoTime( ::uint64_t value);

  inline bool getMapValidDEPRECATED();
  inline void setMapValidDEPRECATED(bool value);

  inline  ::uint64_t getLateralPlanMonoTime();
  inline void setLateralPlanMonoTime( ::uint64_t value);

  inline bool getForceDecel();
  inline void setForceDecel(bool value);

  inline typename LateralControlState::Builder getLateralControlState();
  inline typename LateralControlState::Builder initLateralControlState();

  inline bool getDecelForModelDEPRECATED();
  inline void setDecelForModelDEPRECATED(bool value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound();
  inline void setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline  ::uint32_t getCanErrorCounter();
  inline void setCanErrorCounter( ::uint32_t value);

  inline float getDesiredCurvature();
  inline void setDesiredCurvature(float value);

  inline float getDesiredCurvatureRate();
  inline void setDesiredCurvatureRate(float value);

  inline float getVCruiseCluster();
  inline void setVCruiseCluster(float value);

  inline bool getExperimentalMode();
  inline void setExperimentalMode(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::Pipeline {
public:
  typedef ControlsState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename LateralControlState::Pipeline getLateralControlState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralINDIState::Reader {
public:
  typedef LateralINDIState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringRateDeg() const;

  inline float getSteeringAccelDeg() const;

  inline float getRateSetPoint() const;

  inline float getAccelSetPoint() const;

  inline float getAccelError() const;

  inline float getDelayedOutput() const;

  inline float getDelta() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

  inline float getSteeringRateDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralINDIState::Builder {
public:
  typedef LateralINDIState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getSteeringAccelDeg();
  inline void setSteeringAccelDeg(float value);

  inline float getRateSetPoint();
  inline void setRateSetPoint(float value);

  inline float getAccelSetPoint();
  inline void setAccelSetPoint(float value);

  inline float getAccelError();
  inline void setAccelError(float value);

  inline float getDelayedOutput();
  inline void setDelayedOutput(float value);

  inline float getDelta();
  inline void setDelta(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

  inline float getSteeringRateDesiredDeg();
  inline void setSteeringRateDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralINDIState::Pipeline {
public:
  typedef LateralINDIState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralPIDState::Reader {
public:
  typedef LateralPIDState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringRateDeg() const;

  inline float getAngleError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralPIDState::Builder {
public:
  typedef LateralPIDState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getAngleError();
  inline void setAngleError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralPIDState::Pipeline {
public:
  typedef LateralPIDState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralTorqueState::Reader {
public:
  typedef LateralTorqueState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getD() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getErrorRate() const;

  inline float getActualLateralAccel() const;

  inline float getDesiredLateralAccel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralTorqueState::Builder {
public:
  typedef LateralTorqueState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getError();
  inline void setError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getD();
  inline void setD(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getErrorRate();
  inline void setErrorRate(float value);

  inline float getActualLateralAccel();
  inline void setActualLateralAccel(float value);

  inline float getDesiredLateralAccel();
  inline void setDesiredLateralAccel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralTorqueState::Pipeline {
public:
  typedef LateralTorqueState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralLQRState::Reader {
public:
  typedef LateralLQRState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getI() const;

  inline float getOutput() const;

  inline float getLqrOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralLQRState::Builder {
public:
  typedef LateralLQRState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getI();
  inline void setI(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline float getLqrOutput();
  inline void setLqrOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralLQRState::Pipeline {
public:
  typedef LateralLQRState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralAngleState::Reader {
public:
  typedef LateralAngleState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralAngleState::Builder {
public:
  typedef LateralAngleState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralAngleState::Pipeline {
public:
  typedef LateralAngleState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralCurvatureState::Reader {
public:
  typedef LateralCurvatureState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getActualCurvature() const;

  inline float getDesiredCurvature() const;

  inline float getError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralCurvatureState::Builder {
public:
  typedef LateralCurvatureState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getActualCurvature();
  inline void setActualCurvature(float value);

  inline float getDesiredCurvature();
  inline void setDesiredCurvature(float value);

  inline float getError();
  inline void setError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralCurvatureState::Pipeline {
public:
  typedef LateralCurvatureState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralDebugState::Reader {
public:
  typedef LateralDebugState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralDebugState::Builder {
public:
  typedef LateralDebugState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralDebugState::Pipeline {
public:
  typedef LateralDebugState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralControlState::Reader {
public:
  typedef LateralControlState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIndiState() const;
  inline bool hasIndiState() const;
  inline  ::cereal::ControlsState::LateralINDIState::Reader getIndiState() const;

  inline bool isPidState() const;
  inline bool hasPidState() const;
  inline  ::cereal::ControlsState::LateralPIDState::Reader getPidState() const;

  inline bool isLqrStateDEPRECATED() const;
  inline bool hasLqrStateDEPRECATED() const;
  inline  ::cereal::ControlsState::LateralLQRState::Reader getLqrStateDEPRECATED() const;

  inline bool isAngleState() const;
  inline bool hasAngleState() const;
  inline  ::cereal::ControlsState::LateralAngleState::Reader getAngleState() const;

  inline bool isDebugState() const;
  inline bool hasDebugState() const;
  inline  ::cereal::ControlsState::LateralDebugState::Reader getDebugState() const;

  inline bool isTorqueState() const;
  inline bool hasTorqueState() const;
  inline  ::cereal::ControlsState::LateralTorqueState::Reader getTorqueState() const;

  inline bool isCurvatureState() const;
  inline bool hasCurvatureState() const;
  inline  ::cereal::ControlsState::LateralCurvatureState::Reader getCurvatureState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralControlState::Builder {
public:
  typedef LateralControlState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIndiState();
  inline bool hasIndiState();
  inline  ::cereal::ControlsState::LateralINDIState::Builder getIndiState();
  inline void setIndiState( ::cereal::ControlsState::LateralINDIState::Reader value);
  inline  ::cereal::ControlsState::LateralINDIState::Builder initIndiState();
  inline void adoptIndiState(::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> disownIndiState();

  inline bool isPidState();
  inline bool hasPidState();
  inline  ::cereal::ControlsState::LateralPIDState::Builder getPidState();
  inline void setPidState( ::cereal::ControlsState::LateralPIDState::Reader value);
  inline  ::cereal::ControlsState::LateralPIDState::Builder initPidState();
  inline void adoptPidState(::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> disownPidState();

  inline bool isLqrStateDEPRECATED();
  inline bool hasLqrStateDEPRECATED();
  inline  ::cereal::ControlsState::LateralLQRState::Builder getLqrStateDEPRECATED();
  inline void setLqrStateDEPRECATED( ::cereal::ControlsState::LateralLQRState::Reader value);
  inline  ::cereal::ControlsState::LateralLQRState::Builder initLqrStateDEPRECATED();
  inline void adoptLqrStateDEPRECATED(::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> disownLqrStateDEPRECATED();

  inline bool isAngleState();
  inline bool hasAngleState();
  inline  ::cereal::ControlsState::LateralAngleState::Builder getAngleState();
  inline void setAngleState( ::cereal::ControlsState::LateralAngleState::Reader value);
  inline  ::cereal::ControlsState::LateralAngleState::Builder initAngleState();
  inline void adoptAngleState(::capnp::Orphan< ::cereal::ControlsState::LateralAngleState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState> disownAngleState();

  inline bool isDebugState();
  inline bool hasDebugState();
  inline  ::cereal::ControlsState::LateralDebugState::Builder getDebugState();
  inline void setDebugState( ::cereal::ControlsState::LateralDebugState::Reader value);
  inline  ::cereal::ControlsState::LateralDebugState::Builder initDebugState();
  inline void adoptDebugState(::capnp::Orphan< ::cereal::ControlsState::LateralDebugState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState> disownDebugState();

  inline bool isTorqueState();
  inline bool hasTorqueState();
  inline  ::cereal::ControlsState::LateralTorqueState::Builder getTorqueState();
  inline void setTorqueState( ::cereal::ControlsState::LateralTorqueState::Reader value);
  inline  ::cereal::ControlsState::LateralTorqueState::Builder initTorqueState();
  inline void adoptTorqueState(::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState> disownTorqueState();

  inline bool isCurvatureState();
  inline bool hasCurvatureState();
  inline  ::cereal::ControlsState::LateralCurvatureState::Builder getCurvatureState();
  inline void setCurvatureState( ::cereal::ControlsState::LateralCurvatureState::Reader value);
  inline  ::cereal::ControlsState::LateralCurvatureState::Builder initCurvatureState();
  inline void adoptCurvatureState(::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState> disownCurvatureState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralControlState::Pipeline {
public:
  typedef LateralControlState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::Reader {
public:
  typedef RadarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimes() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline  ::uint64_t getCarStateMonoTime() const;

  inline bool hasRadarErrors() const;
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader getRadarErrors() const;

  inline bool hasLeadOne() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadOne() const;

  inline bool hasLeadTwo() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadTwo() const;

  inline float getCumLagMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::Builder {
public:
  typedef RadarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimes();

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline  ::uint64_t getCarStateMonoTime();
  inline void setCarStateMonoTime( ::uint64_t value);

  inline bool hasRadarErrors();
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder getRadarErrors();
  inline void setRadarErrors( ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRadarErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value);
  inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder initRadarErrors(unsigned int size);
  inline void adoptRadarErrors(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>> disownRadarErrors();

  inline bool hasLeadOne();
  inline  ::cereal::RadarState::LeadData::Builder getLeadOne();
  inline void setLeadOne( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadOne();
  inline void adoptLeadOne(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadOne();

  inline bool hasLeadTwo();
  inline  ::cereal::RadarState::LeadData::Builder getLeadTwo();
  inline void setLeadTwo( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadTwo();
  inline void adoptLeadTwo(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadTwo();

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::Pipeline {
public:
  typedef RadarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::RadarState::LeadData::Pipeline getLeadOne();
  inline  ::cereal::RadarState::LeadData::Pipeline getLeadTwo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getVLead() const;

  inline float getDPath() const;

  inline float getVLat() const;

  inline float getVLeadK() const;

  inline float getALeadK() const;

  inline bool getFcw() const;

  inline bool getStatus() const;

  inline float getALeadTau() const;

  inline float getModelProb() const;

  inline bool getRadar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getVLead();
  inline void setVLead(float value);

  inline float getDPath();
  inline void setDPath(float value);

  inline float getVLat();
  inline void setVLat(float value);

  inline float getVLeadK();
  inline void setVLeadK(float value);

  inline float getALeadK();
  inline void setALeadK(float value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline bool getStatus();
  inline void setStatus(bool value);

  inline float getALeadTau();
  inline void setALeadTau(float value);

  inline float getModelProb();
  inline void setModelProb(float value);

  inline bool getRadar();
  inline void setRadar(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlan::Reader {
public:
  typedef LongitudinalPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getModelMonoTime() const;

  inline bool getHasLead() const;

  inline bool getFcw() const;

  inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource getLongitudinalPlanSource() const;

  inline float getProcessingDelay() const;

  inline bool hasAccels() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAccels() const;

  inline bool hasSpeeds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSpeeds() const;

  inline bool hasJerks() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getJerks() const;

  inline float getSolverExecutionTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlan::Builder {
public:
  typedef LongitudinalPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getModelMonoTime();
  inline void setModelMonoTime( ::uint64_t value);

  inline bool getHasLead();
  inline void setHasLead(bool value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource getLongitudinalPlanSource();
  inline void setLongitudinalPlanSource( ::cereal::LongitudinalPlan::LongitudinalPlanSource value);

  inline float getProcessingDelay();
  inline void setProcessingDelay(float value);

  inline bool hasAccels();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAccels();
  inline void setAccels( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccels(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAccels(unsigned int size);
  inline void adoptAccels(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAccels();

  inline bool hasSpeeds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSpeeds();
  inline void setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpeeds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSpeeds(unsigned int size);
  inline void adoptSpeeds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSpeeds();

  inline bool hasJerks();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getJerks();
  inline void setJerks( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setJerks(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initJerks(unsigned int size);
  inline void adoptJerks(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownJerks();

  inline float getSolverExecutionTime();
  inline void setSolverExecutionTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlan::Pipeline {
public:
  typedef LongitudinalPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlan::GpsTrajectory::Reader {
public:
  typedef GpsTrajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlan::GpsTrajectory::Builder {
public:
  typedef GpsTrajectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlan::GpsTrajectory::Pipeline {
public:
  typedef GpsTrajectory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::Reader {
public:
  typedef SensorEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int32_t getVersion() const;

  inline  ::int32_t getSensor() const;

  inline  ::int32_t getType() const;

  inline  ::int64_t getTimestamp() const;

  inline bool isAcceleration() const;
  inline bool hasAcceleration() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getAcceleration() const;

  inline bool isMagnetic() const;
  inline bool hasMagnetic() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagnetic() const;

  inline bool isOrientation() const;
  inline bool hasOrientation() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getOrientation() const;

  inline bool isGyro() const;
  inline bool hasGyro() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyro() const;

  inline  ::cereal::SensorEventData::SensorSource getSource() const;

  inline bool isPressure() const;
  inline bool hasPressure() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getPressure() const;

  inline bool getUncalibratedDEPRECATED() const;

  inline bool isMagneticUncalibrated() const;
  inline bool hasMagneticUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagneticUncalibrated() const;

  inline bool isGyroUncalibrated() const;
  inline bool hasGyroUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyroUncalibrated() const;

  inline bool isProximity() const;
  inline float getProximity() const;

  inline bool isLight() const;
  inline float getLight() const;

  inline bool isTemperature() const;
  inline float getTemperature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::Builder {
public:
  typedef SensorEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getSensor();
  inline void setSensor( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool isAcceleration();
  inline bool hasAcceleration();
  inline  ::cereal::SensorEventData::SensorVec::Builder getAcceleration();
  inline void setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownAcceleration();

  inline bool isMagnetic();
  inline bool hasMagnetic();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagnetic();
  inline void setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagnetic();
  inline void adoptMagnetic(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagnetic();

  inline bool isOrientation();
  inline bool hasOrientation();
  inline  ::cereal::SensorEventData::SensorVec::Builder getOrientation();
  inline void setOrientation( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownOrientation();

  inline bool isGyro();
  inline bool hasGyro();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyro();
  inline void setGyro( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyro();
  inline void adoptGyro(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyro();

  inline  ::cereal::SensorEventData::SensorSource getSource();
  inline void setSource( ::cereal::SensorEventData::SensorSource value);

  inline bool isPressure();
  inline bool hasPressure();
  inline  ::cereal::SensorEventData::SensorVec::Builder getPressure();
  inline void setPressure( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initPressure();
  inline void adoptPressure(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownPressure();

  inline bool getUncalibratedDEPRECATED();
  inline void setUncalibratedDEPRECATED(bool value);

  inline bool isMagneticUncalibrated();
  inline bool hasMagneticUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagneticUncalibrated();
  inline void setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagneticUncalibrated();
  inline void adoptMagneticUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagneticUncalibrated();

  inline bool isGyroUncalibrated();
  inline bool hasGyroUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyroUncalibrated();
  inline void setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyroUncalibrated();
  inline void adoptGyroUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyroUncalibrated();

  inline bool isProximity();
  inline float getProximity();
  inline void setProximity(float value);

  inline bool isLight();
  inline float getLight();
  inline void setLight(float value);

  inline bool isTemperature();
  inline float getTemperature();
  inline void setTemperature(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::Pipeline {
public:
  typedef SensorEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::SensorVec::Reader {
public:
  typedef SensorVec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getV() const;

  inline  ::int8_t getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::SensorVec::Builder {
public:
  typedef SensorVec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getV();
  inline void setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownV();

  inline  ::int8_t getStatus();
  inline void setStatus( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::SensorVec::Pipeline {
public:
  typedef SensorVec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GpsLocationData::Reader {
public:
  typedef GpsLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags() const;

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getAltitude() const;

  inline float getSpeed() const;

  inline float getBearingDeg() const;

  inline float getAccuracy() const;

  inline  ::int64_t getUnixTimestampMillis() const;

  inline  ::cereal::GpsLocationData::SensorSource getSource() const;

  inline bool hasVNED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVNED() const;

  inline float getVerticalAccuracy() const;

  inline float getBearingAccuracyDeg() const;

  inline float getSpeedAccuracy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GpsLocationData::Builder {
public:
  typedef GpsLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags();
  inline void setFlags( ::uint16_t value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getBearingDeg();
  inline void setBearingDeg(float value);

  inline float getAccuracy();
  inline void setAccuracy(float value);

  inline  ::int64_t getUnixTimestampMillis();
  inline void setUnixTimestampMillis( ::int64_t value);

  inline  ::cereal::GpsLocationData::SensorSource getSource();
  inline void setSource( ::cereal::GpsLocationData::SensorSource value);

  inline bool hasVNED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVNED();
  inline void setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVNED(unsigned int size);
  inline void adoptVNED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVNED();

  inline float getVerticalAccuracy();
  inline void setVerticalAccuracy(float value);

  inline float getBearingAccuracyDeg();
  inline void setBearingAccuracyDeg(float value);

  inline float getSpeedAccuracy();
  inline void setSpeedAccuracy(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GpsLocationData::Pipeline {
public:
  typedef GpsLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PeripheralState::Reader {
public:
  typedef PeripheralState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::PandaState::PandaType getPandaType() const;

  inline  ::uint32_t getVoltage() const;

  inline  ::uint32_t getCurrent() const;

  inline  ::uint16_t getFanSpeedRpm() const;

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PeripheralState::Builder {
public:
  typedef PeripheralState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::PandaState::PandaType getPandaType();
  inline void setPandaType( ::cereal::PandaState::PandaType value);

  inline  ::uint32_t getVoltage();
  inline void setVoltage( ::uint32_t value);

  inline  ::uint32_t getCurrent();
  inline void setCurrent( ::uint32_t value);

  inline  ::uint16_t getFanSpeedRpm();
  inline void setFanSpeedRpm( ::uint16_t value);

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED();
  inline void setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PeripheralState::Pipeline {
public:
  typedef PeripheralState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PandaState::Reader {
public:
  typedef PandaState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltageDEPRECATED() const;

  inline  ::uint32_t getCurrentDEPRECATED() const;

  inline bool getIgnitionLine() const;

  inline bool getControlsAllowed() const;

  inline bool getGasInterceptorDetected() const;

  inline bool getStartedSignalDetectedDEPRECATED() const;

  inline bool getHasGpsDEPRECATED() const;

  inline  ::uint32_t getRxBufferOverflow() const;

  inline  ::uint32_t getTxBufferOverflow() const;

  inline  ::uint32_t getGmlanSendErrs() const;

  inline  ::cereal::PandaState::PandaType getPandaType() const;

  inline  ::uint16_t getFanSpeedRpmDEPRECATED() const;

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED() const;

  inline bool getIgnitionCan() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::cereal::PandaState::FaultStatus getFaultStatus() const;

  inline bool getPowerSaveEnabled() const;

  inline  ::uint32_t getUptime() const;

  inline bool hasFaults() const;
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader getFaults() const;

  inline  ::uint32_t getSafetyRxInvalid() const;

  inline  ::int16_t getSafetyParamDEPRECATED() const;

  inline  ::cereal::PandaState::HarnessStatus getHarnessStatus() const;

  inline bool getHeartbeatLost() const;

  inline  ::int16_t getAlternativeExperience() const;

  inline  ::uint32_t getSafetyTxBlocked() const;

  inline float getInterruptLoad() const;

  inline  ::uint32_t getSafetyParam2DEPRECATED() const;

  inline  ::uint16_t getSafetyParam() const;

  inline  ::uint8_t getFanPower() const;

  inline bool hasCanState0() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState0() const;

  inline bool hasCanState1() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState1() const;

  inline bool hasCanState2() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState2() const;

  inline bool getSafetyRxChecksInvalid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PandaState::Builder {
public:
  typedef PandaState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltageDEPRECATED();
  inline void setVoltageDEPRECATED( ::uint32_t value);

  inline  ::uint32_t getCurrentDEPRECATED();
  inline void setCurrentDEPRECATED( ::uint32_t value);

  inline bool getIgnitionLine();
  inline void setIgnitionLine(bool value);

  inline bool getControlsAllowed();
  inline void setControlsAllowed(bool value);

  inline bool getGasInterceptorDetected();
  inline void setGasInterceptorDetected(bool value);

  inline bool getStartedSignalDetectedDEPRECATED();
  inline void setStartedSignalDetectedDEPRECATED(bool value);

  inline bool getHasGpsDEPRECATED();
  inline void setHasGpsDEPRECATED(bool value);

  inline  ::uint32_t getRxBufferOverflow();
  inline void setRxBufferOverflow( ::uint32_t value);

  inline  ::uint32_t getTxBufferOverflow();
  inline void setTxBufferOverflow( ::uint32_t value);

  inline  ::uint32_t getGmlanSendErrs();
  inline void setGmlanSendErrs( ::uint32_t value);

  inline  ::cereal::PandaState::PandaType getPandaType();
  inline void setPandaType( ::cereal::PandaState::PandaType value);

  inline  ::uint16_t getFanSpeedRpmDEPRECATED();
  inline void setFanSpeedRpmDEPRECATED( ::uint16_t value);

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED();
  inline void setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value);

  inline bool getIgnitionCan();
  inline void setIgnitionCan(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::PandaState::FaultStatus getFaultStatus();
  inline void setFaultStatus( ::cereal::PandaState::FaultStatus value);

  inline bool getPowerSaveEnabled();
  inline void setPowerSaveEnabled(bool value);

  inline  ::uint32_t getUptime();
  inline void setUptime( ::uint32_t value);

  inline bool hasFaults();
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder getFaults();
  inline void setFaults( ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader value);
  inline void setFaults(::kj::ArrayPtr<const  ::cereal::PandaState::FaultType> value);
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder initFaults(unsigned int size);
  inline void adoptFaults(::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>> disownFaults();

  inline  ::uint32_t getSafetyRxInvalid();
  inline void setSafetyRxInvalid( ::uint32_t value);

  inline  ::int16_t getSafetyParamDEPRECATED();
  inline void setSafetyParamDEPRECATED( ::int16_t value);

  inline  ::cereal::PandaState::HarnessStatus getHarnessStatus();
  inline void setHarnessStatus( ::cereal::PandaState::HarnessStatus value);

  inline bool getHeartbeatLost();
  inline void setHeartbeatLost(bool value);

  inline  ::int16_t getAlternativeExperience();
  inline void setAlternativeExperience( ::int16_t value);

  inline  ::uint32_t getSafetyTxBlocked();
  inline void setSafetyTxBlocked( ::uint32_t value);

  inline float getInterruptLoad();
  inline void setInterruptLoad(float value);

  inline  ::uint32_t getSafetyParam2DEPRECATED();
  inline void setSafetyParam2DEPRECATED( ::uint32_t value);

  inline  ::uint16_t getSafetyParam();
  inline void setSafetyParam( ::uint16_t value);

  inline  ::uint8_t getFanPower();
  inline void setFanPower( ::uint8_t value);

  inline bool hasCanState0();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState0();
  inline void setCanState0( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState0();
  inline void adoptCanState0(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState0();

  inline bool hasCanState1();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState1();
  inline void setCanState1( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState1();
  inline void adoptCanState1(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState1();

  inline bool hasCanState2();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState2();
  inline void setCanState2( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState2();
  inline void adoptCanState2(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState2();

  inline bool getSafetyRxChecksInvalid();
  inline void setSafetyRxChecksInvalid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PandaState::Pipeline {
public:
  typedef PandaState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState0();
  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState1();
  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState2();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PandaState::PandaCanState::Reader {
public:
  typedef PandaCanState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getBusOff() const;

  inline  ::uint32_t getBusOffCnt() const;

  inline bool getErrorWarning() const;

  inline bool getErrorPassive() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastStoredError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataStoredError() const;

  inline  ::uint8_t getReceiveErrorCnt() const;

  inline  ::uint8_t getTransmitErrorCnt() const;

  inline  ::uint32_t getTotalErrorCnt() const;

  inline  ::uint32_t getTotalTxLostCnt() const;

  inline  ::uint32_t getTotalRxLostCnt() const;

  inline  ::uint32_t getTotalTxCnt() const;

  inline  ::uint32_t getTotalRxCnt() const;

  inline  ::uint32_t getTotalFwdCnt() const;

  inline  ::uint16_t getCanSpeed() const;

  inline  ::uint16_t getCanDataSpeed() const;

  inline bool getCanfdEnabled() const;

  inline bool getBrsEnabled() const;

  inline bool getCanfdNonIso() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PandaState::PandaCanState::Builder {
public:
  typedef PandaCanState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getBusOff();
  inline void setBusOff(bool value);

  inline  ::uint32_t getBusOffCnt();
  inline void setBusOffCnt( ::uint32_t value);

  inline bool getErrorWarning();
  inline void setErrorWarning(bool value);

  inline bool getErrorPassive();
  inline void setErrorPassive(bool value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastError();
  inline void setLastError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastStoredError();
  inline void setLastStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataError();
  inline void setLastDataError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataStoredError();
  inline void setLastDataStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::uint8_t getReceiveErrorCnt();
  inline void setReceiveErrorCnt( ::uint8_t value);

  inline  ::uint8_t getTransmitErrorCnt();
  inline void setTransmitErrorCnt( ::uint8_t value);

  inline  ::uint32_t getTotalErrorCnt();
  inline void setTotalErrorCnt( ::uint32_t value);

  inline  ::uint32_t getTotalTxLostCnt();
  inline void setTotalTxLostCnt( ::uint32_t value);

  inline  ::uint32_t getTotalRxLostCnt();
  inline void setTotalRxLostCnt( ::uint32_t value);

  inline  ::uint32_t getTotalTxCnt();
  inline void setTotalTxCnt( ::uint32_t value);

  inline  ::uint32_t getTotalRxCnt();
  inline void setTotalRxCnt( ::uint32_t value);

  inline  ::uint32_t getTotalFwdCnt();
  inline void setTotalFwdCnt( ::uint32_t value);

  inline  ::uint16_t getCanSpeed();
  inline void setCanSpeed( ::uint16_t value);

  inline  ::uint16_t getCanDataSpeed();
  inline void setCanDataSpeed( ::uint16_t value);

  inline bool getCanfdEnabled();
  inline void setCanfdEnabled(bool value);

  inline bool getBrsEnabled();
  inline void setBrsEnabled(bool value);

  inline bool getCanfdNonIso();
  inline void setCanfdNonIso(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PandaState::PandaCanState::Pipeline {
public:
  typedef PandaCanState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverState::Reader {
public:
  typedef DriverState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline float getModelExecutionTime() const;

  inline float getDspExecutionTime() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::Data::Reader getRawPredictions() const;

  inline bool hasFaceOrientation() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientation() const;

  inline bool hasFacePosition() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePosition() const;

  inline float getFaceProb() const;

  inline float getLeftEyeProb() const;

  inline float getRightEyeProb() const;

  inline float getLeftBlinkProb() const;

  inline float getRightBlinkProb() const;

  inline bool hasFaceOrientationStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientationStd() const;

  inline bool hasFacePositionStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePositionStd() const;

  inline float getSunglassesProb() const;

  inline float getPoorVision() const;

  inline float getPartialFace() const;

  inline float getDistractedPose() const;

  inline float getDistractedEyes() const;

  inline float getEyesOnRoad() const;

  inline float getPhoneUse() const;

  inline float getOccludedProb() const;

  inline bool hasReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getReadyProb() const;

  inline bool hasNotReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNotReadyProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverState::Builder {
public:
  typedef DriverState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline float getDspExecutionTime();
  inline void setDspExecutionTime(float value);

  inline bool hasRawPredictions();
  inline  ::capnp::Data::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPredictions();

  inline bool hasFaceOrientation();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientation();
  inline void setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientation(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientation(unsigned int size);
  inline void adoptFaceOrientation(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientation();

  inline bool hasFacePosition();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePosition();
  inline void setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePosition(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePosition(unsigned int size);
  inline void adoptFacePosition(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePosition();

  inline float getFaceProb();
  inline void setFaceProb(float value);

  inline float getLeftEyeProb();
  inline void setLeftEyeProb(float value);

  inline float getRightEyeProb();
  inline void setRightEyeProb(float value);

  inline float getLeftBlinkProb();
  inline void setLeftBlinkProb(float value);

  inline float getRightBlinkProb();
  inline void setRightBlinkProb(float value);

  inline bool hasFaceOrientationStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientationStd();
  inline void setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientationStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientationStd(unsigned int size);
  inline void adoptFaceOrientationStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientationStd();

  inline bool hasFacePositionStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePositionStd();
  inline void setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePositionStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePositionStd(unsigned int size);
  inline void adoptFacePositionStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePositionStd();

  inline float getSunglassesProb();
  inline void setSunglassesProb(float value);

  inline float getPoorVision();
  inline void setPoorVision(float value);

  inline float getPartialFace();
  inline void setPartialFace(float value);

  inline float getDistractedPose();
  inline void setDistractedPose(float value);

  inline float getDistractedEyes();
  inline void setDistractedEyes(float value);

  inline float getEyesOnRoad();
  inline void setEyesOnRoad(float value);

  inline float getPhoneUse();
  inline void setPhoneUse(float value);

  inline float getOccludedProb();
  inline void setOccludedProb(float value);

  inline bool hasReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getReadyProb();
  inline void setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initReadyProb(unsigned int size);
  inline void adoptReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownReadyProb();

  inline bool hasNotReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNotReadyProb();
  inline void setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNotReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNotReadyProb(unsigned int size);
  inline void adoptNotReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNotReadyProb();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverState::Pipeline {
public:
  typedef DriverState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverMonitoringState::Reader {
public:
  typedef DriverMonitoringState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader getEvents() const;

  inline bool getFaceDetected() const;

  inline bool getIsDistracted() const;

  inline  ::uint32_t getDistractedType() const;

  inline float getAwarenessStatus() const;

  inline float getPosePitchOffset() const;

  inline  ::uint32_t getPosePitchValidCount() const;

  inline float getPoseYawOffset() const;

  inline  ::uint32_t getPoseYawValidCount() const;

  inline float getStepChange() const;

  inline float getAwarenessActive() const;

  inline float getAwarenessPassive() const;

  inline bool getIsLowStd() const;

  inline  ::uint32_t getHiStdCount() const;

  inline bool getIsActiveMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverMonitoringState::Builder {
public:
  typedef DriverMonitoringState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> disownEvents();

  inline bool getFaceDetected();
  inline void setFaceDetected(bool value);

  inline bool getIsDistracted();
  inline void setIsDistracted(bool value);

  inline  ::uint32_t getDistractedType();
  inline void setDistractedType( ::uint32_t value);

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

  inline float getPosePitchOffset();
  inline void setPosePitchOffset(float value);

  inline  ::uint32_t getPosePitchValidCount();
  inline void setPosePitchValidCount( ::uint32_t value);

  inline float getPoseYawOffset();
  inline void setPoseYawOffset(float value);

  inline  ::uint32_t getPoseYawValidCount();
  inline void setPoseYawValidCount( ::uint32_t value);

  inline float getStepChange();
  inline void setStepChange(float value);

  inline float getAwarenessActive();
  inline void setAwarenessActive(float value);

  inline float getAwarenessPassive();
  inline void setAwarenessPassive(float value);

  inline bool getIsLowStd();
  inline void setIsLowStd(bool value);

  inline  ::uint32_t getHiStdCount();
  inline void setHiStdCount( ::uint32_t value);

  inline bool getIsActiveMode();
  inline void setIsActiveMode(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverMonitoringState::Pipeline {
public:
  typedef DriverMonitoringState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::Reader {
public:
  typedef DeviceState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getUsbOnline() const;

  inline  ::cereal::DeviceState::NetworkType getNetworkType() const;

  inline bool hasNetworkInfo() const;
  inline  ::cereal::DeviceState::NetworkInfo::Reader getNetworkInfo() const;

  inline  ::cereal::DeviceState::NetworkStrength getNetworkStrength() const;

  inline bool getNetworkMetered() const;

  inline  ::uint64_t getLastAthenaPingTime() const;

  inline bool getStarted() const;

  inline  ::uint64_t getStartedMonoTime() const;

  inline float getFreeSpacePercent() const;

  inline  ::int8_t getMemoryUsagePercent() const;

  inline  ::int8_t getGpuUsagePercent() const;

  inline bool hasCpuUsagePercent() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getCpuUsagePercent() const;

  inline  ::int16_t getBatteryPercent() const;

  inline  ::int32_t getBatteryCurrent() const;

  inline bool getChargingError() const;

  inline bool getChargingDisabled() const;

  inline  ::uint32_t getOffroadPowerUsageUwh() const;

  inline  ::uint32_t getCarBatteryCapacityUwh() const;

  inline float getPowerDrawW() const;

  inline bool hasCpuTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCpuTempC() const;

  inline bool hasGpuTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGpuTempC() const;

  inline float getMemoryTempC() const;

  inline float getAmbientTempC() const;

  inline bool hasNvmeTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNvmeTempC() const;

  inline bool hasModemTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getModemTempC() const;

  inline bool hasPmicTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPmicTempC() const;

  inline bool hasThermalZones() const;
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader getThermalZones() const;

  inline  ::cereal::DeviceState::ThermalStatus getThermalStatus() const;

  inline  ::uint16_t getFanSpeedPercentDesired() const;

  inline  ::int8_t getScreenBrightnessPercent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::Builder {
public:
  typedef DeviceState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getUsbOnline();
  inline void setUsbOnline(bool value);

  inline  ::cereal::DeviceState::NetworkType getNetworkType();
  inline void setNetworkType( ::cereal::DeviceState::NetworkType value);

  inline bool hasNetworkInfo();
  inline  ::cereal::DeviceState::NetworkInfo::Builder getNetworkInfo();
  inline void setNetworkInfo( ::cereal::DeviceState::NetworkInfo::Reader value);
  inline  ::cereal::DeviceState::NetworkInfo::Builder initNetworkInfo();
  inline void adoptNetworkInfo(::capnp::Orphan< ::cereal::DeviceState::NetworkInfo>&& value);
  inline ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo> disownNetworkInfo();

  inline  ::cereal::DeviceState::NetworkStrength getNetworkStrength();
  inline void setNetworkStrength( ::cereal::DeviceState::NetworkStrength value);

  inline bool getNetworkMetered();
  inline void setNetworkMetered(bool value);

  inline  ::uint64_t getLastAthenaPingTime();
  inline void setLastAthenaPingTime( ::uint64_t value);

  inline bool getStarted();
  inline void setStarted(bool value);

  inline  ::uint64_t getStartedMonoTime();
  inline void setStartedMonoTime( ::uint64_t value);

  inline float getFreeSpacePercent();
  inline void setFreeSpacePercent(float value);

  inline  ::int8_t getMemoryUsagePercent();
  inline void setMemoryUsagePercent( ::int8_t value);

  inline  ::int8_t getGpuUsagePercent();
  inline void setGpuUsagePercent( ::int8_t value);

  inline bool hasCpuUsagePercent();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getCpuUsagePercent();
  inline void setCpuUsagePercent( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCpuUsagePercent(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initCpuUsagePercent(unsigned int size);
  inline void adoptCpuUsagePercent(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownCpuUsagePercent();

  inline  ::int16_t getBatteryPercent();
  inline void setBatteryPercent( ::int16_t value);

  inline  ::int32_t getBatteryCurrent();
  inline void setBatteryCurrent( ::int32_t value);

  inline bool getChargingError();
  inline void setChargingError(bool value);

  inline bool getChargingDisabled();
  inline void setChargingDisabled(bool value);

  inline  ::uint32_t getOffroadPowerUsageUwh();
  inline void setOffroadPowerUsageUwh( ::uint32_t value);

  inline  ::uint32_t getCarBatteryCapacityUwh();
  inline void setCarBatteryCapacityUwh( ::uint32_t value);

  inline float getPowerDrawW();
  inline void setPowerDrawW(float value);

  inline bool hasCpuTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCpuTempC();
  inline void setCpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCpuTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCpuTempC(unsigned int size);
  inline void adoptCpuTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCpuTempC();

  inline bool hasGpuTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGpuTempC();
  inline void setGpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGpuTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGpuTempC(unsigned int size);
  inline void adoptGpuTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGpuTempC();

  inline float getMemoryTempC();
  inline void setMemoryTempC(float value);

  inline float getAmbientTempC();
  inline void setAmbientTempC(float value);

  inline bool hasNvmeTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNvmeTempC();
  inline void setNvmeTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNvmeTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNvmeTempC(unsigned int size);
  inline void adoptNvmeTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNvmeTempC();

  inline bool hasModemTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getModemTempC();
  inline void setModemTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModemTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initModemTempC(unsigned int size);
  inline void adoptModemTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownModemTempC();

  inline bool hasPmicTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPmicTempC();
  inline void setPmicTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPmicTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPmicTempC(unsigned int size);
  inline void adoptPmicTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPmicTempC();

  inline bool hasThermalZones();
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder getThermalZones();
  inline void setThermalZones( ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder initThermalZones(unsigned int size);
  inline void adoptThermalZones(::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>> disownThermalZones();

  inline  ::cereal::DeviceState::ThermalStatus getThermalStatus();
  inline void setThermalStatus( ::cereal::DeviceState::ThermalStatus value);

  inline  ::uint16_t getFanSpeedPercentDesired();
  inline void setFanSpeedPercentDesired( ::uint16_t value);

  inline  ::int8_t getScreenBrightnessPercent();
  inline void setScreenBrightnessPercent( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::Pipeline {
public:
  typedef DeviceState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::DeviceState::NetworkInfo::Pipeline getNetworkInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::ThermalZone::Reader {
public:
  typedef ThermalZone Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline float getTemp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::ThermalZone::Builder {
public:
  typedef ThermalZone Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline float getTemp();
  inline void setTemp(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::ThermalZone::Pipeline {
public:
  typedef ThermalZone Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::NetworkInfo::Reader {
public:
  typedef NetworkInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTechnology() const;
  inline  ::capnp::Text::Reader getTechnology() const;

  inline bool hasOperator() const;
  inline  ::capnp::Text::Reader getOperator() const;

  inline bool hasBand() const;
  inline  ::capnp::Text::Reader getBand() const;

  inline  ::uint16_t getChannel() const;

  inline bool hasExtra() const;
  inline  ::capnp::Text::Reader getExtra() const;

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::NetworkInfo::Builder {
public:
  typedef NetworkInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTechnology();
  inline  ::capnp::Text::Builder getTechnology();
  inline void setTechnology( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTechnology(unsigned int size);
  inline void adoptTechnology(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTechnology();

  inline bool hasOperator();
  inline  ::capnp::Text::Builder getOperator();
  inline void setOperator( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOperator(unsigned int size);
  inline void adoptOperator(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOperator();

  inline bool hasBand();
  inline  ::capnp::Text::Builder getBand();
  inline void setBand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBand(unsigned int size);
  inline void adoptBand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBand();

  inline  ::uint16_t getChannel();
  inline void setChannel( ::uint16_t value);

  inline bool hasExtra();
  inline  ::capnp::Text::Builder getExtra();
  inline void setExtra( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExtra(unsigned int size);
  inline void adoptExtra(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExtra();

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::NetworkInfo::Pipeline {
public:
  typedef NetworkInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Reader {
public:
  typedef ProcLog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes() const;
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader getCpuTimes() const;

  inline bool hasMem() const;
  inline  ::cereal::ProcLog::Mem::Reader getMem() const;

  inline bool hasProcs() const;
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader getProcs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Builder {
public:
  typedef ProcLog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes();
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder getCpuTimes();
  inline void setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder initCpuTimes(unsigned int size);
  inline void adoptCpuTimes(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>> disownCpuTimes();

  inline bool hasMem();
  inline  ::cereal::ProcLog::Mem::Builder getMem();
  inline void setMem( ::cereal::ProcLog::Mem::Reader value);
  inline  ::cereal::ProcLog::Mem::Builder initMem();
  inline void adoptMem(::capnp::Orphan< ::cereal::ProcLog::Mem>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog::Mem> disownMem();

  inline bool hasProcs();
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder getProcs();
  inline void setProcs( ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder initProcs(unsigned int size);
  inline void adoptProcs(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>> disownProcs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Pipeline {
public:
  typedef ProcLog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ProcLog::Mem::Pipeline getMem();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint8_t getState() const;

  inline  ::int32_t getPpid() const;

  inline float getCpuUser() const;

  inline float getCpuSystem() const;

  inline float getCpuChildrenUser() const;

  inline float getCpuChildrenSystem() const;

  inline  ::int64_t getPriority() const;

  inline  ::int32_t getNice() const;

  inline  ::int32_t getNumThreads() const;

  inline double getStartTime() const;

  inline  ::uint64_t getMemVms() const;

  inline  ::uint64_t getMemRss() const;

  inline  ::int32_t getProcessor() const;

  inline bool hasCmdline() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCmdline() const;

  inline bool hasExe() const;
  inline  ::capnp::Text::Reader getExe() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint8_t getState();
  inline void setState( ::uint8_t value);

  inline  ::int32_t getPpid();
  inline void setPpid( ::int32_t value);

  inline float getCpuUser();
  inline void setCpuUser(float value);

  inline float getCpuSystem();
  inline void setCpuSystem(float value);

  inline float getCpuChildrenUser();
  inline void setCpuChildrenUser(float value);

  inline float getCpuChildrenSystem();
  inline void setCpuChildrenSystem(float value);

  inline  ::int64_t getPriority();
  inline void setPriority( ::int64_t value);

  inline  ::int32_t getNice();
  inline void setNice( ::int32_t value);

  inline  ::int32_t getNumThreads();
  inline void setNumThreads( ::int32_t value);

  inline double getStartTime();
  inline void setStartTime(double value);

  inline  ::uint64_t getMemVms();
  inline void setMemVms( ::uint64_t value);

  inline  ::uint64_t getMemRss();
  inline void setMemRss( ::uint64_t value);

  inline  ::int32_t getProcessor();
  inline void setProcessor( ::int32_t value);

  inline bool hasCmdline();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCmdline();
  inline void setCmdline( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCmdline(unsigned int size);
  inline void adoptCmdline(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCmdline();

  inline bool hasExe();
  inline  ::capnp::Text::Builder getExe();
  inline void setExe( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExe(unsigned int size);
  inline void adoptExe(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExe();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::CPUTimes::Reader {
public:
  typedef CPUTimes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum() const;

  inline float getUser() const;

  inline float getNice() const;

  inline float getSystem() const;

  inline float getIdle() const;

  inline float getIowait() const;

  inline float getIrq() const;

  inline float getSoftirq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::CPUTimes::Builder {
public:
  typedef CPUTimes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum();
  inline void setCpuNum( ::int64_t value);

  inline float getUser();
  inline void setUser(float value);

  inline float getNice();
  inline void setNice(float value);

  inline float getSystem();
  inline void setSystem(float value);

  inline float getIdle();
  inline void setIdle(float value);

  inline float getIowait();
  inline void setIowait(float value);

  inline float getIrq();
  inline void setIrq(float value);

  inline float getSoftirq();
  inline void setSoftirq(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::CPUTimes::Pipeline {
public:
  typedef CPUTimes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Mem::Reader {
public:
  typedef Mem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getFree() const;

  inline  ::uint64_t getAvailable() const;

  inline  ::uint64_t getBuffers() const;

  inline  ::uint64_t getCached() const;

  inline  ::uint64_t getActive() const;

  inline  ::uint64_t getInactive() const;

  inline  ::uint64_t getShared() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Mem::Builder {
public:
  typedef Mem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getFree();
  inline void setFree( ::uint64_t value);

  inline  ::uint64_t getAvailable();
  inline void setAvailable( ::uint64_t value);

  inline  ::uint64_t getBuffers();
  inline void setBuffers( ::uint64_t value);

  inline  ::uint64_t getCached();
  inline void setCached( ::uint64_t value);

  inline  ::uint64_t getActive();
  inline void setActive( ::uint64_t value);

  inline  ::uint64_t getInactive();
  inline void setInactive( ::uint64_t value);

  inline  ::uint64_t getShared();
  inline void setShared( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Mem::Pipeline {
public:
  typedef Mem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationKalman::Reader {
public:
  typedef LiveLocationKalman Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionECEF() const;

  inline bool hasPositionGeodetic() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionGeodetic() const;

  inline bool hasVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityECEF() const;

  inline bool hasVelocityNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityNED() const;

  inline bool hasVelocityDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityDevice() const;

  inline bool hasAccelerationDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAccelerationDevice() const;

  inline bool hasOrientationECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getOrientationECEF() const;

  inline bool hasOrientationNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getOrientationNED() const;

  inline bool hasAngularVelocityDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAngularVelocityDevice() const;

  inline bool hasCalibratedOrientationNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getCalibratedOrientationNED() const;

  inline bool hasVelocityCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityCalibrated() const;

  inline bool hasAccelerationCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAccelerationCalibrated() const;

  inline bool hasAngularVelocityCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAngularVelocityCalibrated() const;

  inline  ::int32_t getGpsWeek() const;

  inline double getGpsTimeOfWeek() const;

  inline  ::cereal::LiveLocationKalman::Status getStatus() const;

  inline  ::int64_t getUnixTimestampMillis() const;

  inline bool getInputsOK() const;

  inline bool getPosenetOK() const;

  inline bool getGpsOK() const;

  inline bool hasCalibratedOrientationECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getCalibratedOrientationECEF() const;

  inline bool getSensorsOK() const;

  inline bool getDeviceStable() const;

  inline double getTimeSinceReset() const;

  inline bool getExcessiveResets() const;

  inline float getTimeToFirstFix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationKalman::Builder {
public:
  typedef LiveLocationKalman Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionECEF();
  inline void setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionECEF();
  inline void adoptPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionECEF();

  inline bool hasPositionGeodetic();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionGeodetic();
  inline void setPositionGeodetic( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionGeodetic();
  inline void adoptPositionGeodetic(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionGeodetic();

  inline bool hasVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityECEF();
  inline void setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityECEF();
  inline void adoptVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityECEF();

  inline bool hasVelocityNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityNED();
  inline void setVelocityNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityNED();
  inline void adoptVelocityNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityNED();

  inline bool hasVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityDevice();
  inline void setVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityDevice();
  inline void adoptVelocityDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityDevice();

  inline bool hasAccelerationDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAccelerationDevice();
  inline void setAccelerationDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAccelerationDevice();
  inline void adoptAccelerationDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAccelerationDevice();

  inline bool hasOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getOrientationECEF();
  inline void setOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initOrientationECEF();
  inline void adoptOrientationECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownOrientationECEF();

  inline bool hasOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getOrientationNED();
  inline void setOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initOrientationNED();
  inline void adoptOrientationNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownOrientationNED();

  inline bool hasAngularVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAngularVelocityDevice();
  inline void setAngularVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAngularVelocityDevice();
  inline void adoptAngularVelocityDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAngularVelocityDevice();

  inline bool hasCalibratedOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getCalibratedOrientationNED();
  inline void setCalibratedOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initCalibratedOrientationNED();
  inline void adoptCalibratedOrientationNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownCalibratedOrientationNED();

  inline bool hasVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityCalibrated();
  inline void setVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityCalibrated();
  inline void adoptVelocityCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityCalibrated();

  inline bool hasAccelerationCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAccelerationCalibrated();
  inline void setAccelerationCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAccelerationCalibrated();
  inline void adoptAccelerationCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAccelerationCalibrated();

  inline bool hasAngularVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAngularVelocityCalibrated();
  inline void setAngularVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAngularVelocityCalibrated();
  inline void adoptAngularVelocityCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAngularVelocityCalibrated();

  inline  ::int32_t getGpsWeek();
  inline void setGpsWeek( ::int32_t value);

  inline double getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek(double value);

  inline  ::cereal::LiveLocationKalman::Status getStatus();
  inline void setStatus( ::cereal::LiveLocationKalman::Status value);

  inline  ::int64_t getUnixTimestampMillis();
  inline void setUnixTimestampMillis( ::int64_t value);

  inline bool getInputsOK();
  inline void setInputsOK(bool value);

  inline bool getPosenetOK();
  inline void setPosenetOK(bool value);

  inline bool getGpsOK();
  inline void setGpsOK(bool value);

  inline bool hasCalibratedOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getCalibratedOrientationECEF();
  inline void setCalibratedOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initCalibratedOrientationECEF();
  inline void adoptCalibratedOrientationECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownCalibratedOrientationECEF();

  inline bool getSensorsOK();
  inline void setSensorsOK(bool value);

  inline bool getDeviceStable();
  inline void setDeviceStable(bool value);

  inline double getTimeSinceReset();
  inline void setTimeSinceReset(double value);

  inline bool getExcessiveResets();
  inline void setExcessiveResets(bool value);

  inline float getTimeToFirstFix();
  inline void setTimeToFirstFix(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationKalman::Pipeline {
public:
  typedef LiveLocationKalman Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionGeodetic();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAccelerationDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAngularVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getCalibratedOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAccelerationCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAngularVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getCalibratedOrientationECEF();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationKalman::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

  inline bool hasStd() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStd() const;

  inline bool getValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationKalman::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownValue();

  inline bool hasStd();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStd();
  inline void setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStd(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStd(unsigned int size);
  inline void adoptStd(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStd();

  inline bool getValid();
  inline void setValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationKalman::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ManagerState::Reader {
public:
  typedef ManagerState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasProcesses() const;
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader getProcesses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ManagerState::Builder {
public:
  typedef ManagerState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProcesses();
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder getProcesses();
  inline void setProcesses( ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder initProcesses(unsigned int size);
  inline void adoptProcesses(::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>> disownProcesses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ManagerState::Pipeline {
public:
  typedef ManagerState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ManagerState::ProcessState::Reader {
public:
  typedef ProcessState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int32_t getPid() const;

  inline bool getRunning() const;

  inline  ::int32_t getExitCode() const;

  inline bool getShouldBeRunning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ManagerState::ProcessState::Builder {
public:
  typedef ProcessState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline bool getRunning();
  inline void setRunning(bool value);

  inline  ::int32_t getExitCode();
  inline void setExitCode( ::int32_t value);

  inline bool getShouldBeRunning();
  inline void setShouldBeRunning(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ManagerState::ProcessState::Pipeline {
public:
  typedef ProcessState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTracks::Reader {
public:
  typedef LiveTracks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getTimeStamp() const;

  inline float getStatus() const;

  inline float getCurrentTime() const;

  inline bool getStationary() const;

  inline bool getOncoming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTracks::Builder {
public:
  typedef LiveTracks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getTimeStamp();
  inline void setTimeStamp(float value);

  inline float getStatus();
  inline void setStatus(float value);

  inline float getCurrentTime();
  inline void setCurrentTime(float value);

  inline bool getStationary();
  inline void setStationary(bool value);

  inline bool getOncoming();
  inline void setOncoming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTracks::Pipeline {
public:
  typedef LiveTracks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveParametersData::Reader {
public:
  typedef LiveParametersData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getValid() const;

  inline float getGyroBias() const;

  inline float getAngleOffsetDeg() const;

  inline float getAngleOffsetAverageDeg() const;

  inline float getStiffnessFactor() const;

  inline float getSteerRatio() const;

  inline bool getSensorValid() const;

  inline float getYawRate() const;

  inline float getPosenetSpeed() const;

  inline bool getPosenetValid() const;

  inline float getAngleOffsetFastStd() const;

  inline float getAngleOffsetAverageStd() const;

  inline float getStiffnessFactorStd() const;

  inline float getSteerRatioStd() const;

  inline float getRoll() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveParametersData::Builder {
public:
  typedef LiveParametersData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getValid();
  inline void setValid(bool value);

  inline float getGyroBias();
  inline void setGyroBias(float value);

  inline float getAngleOffsetDeg();
  inline void setAngleOffsetDeg(float value);

  inline float getAngleOffsetAverageDeg();
  inline void setAngleOffsetAverageDeg(float value);

  inline float getStiffnessFactor();
  inline void setStiffnessFactor(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline bool getSensorValid();
  inline void setSensorValid(bool value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getPosenetSpeed();
  inline void setPosenetSpeed(float value);

  inline bool getPosenetValid();
  inline void setPosenetValid(bool value);

  inline float getAngleOffsetFastStd();
  inline void setAngleOffsetFastStd(float value);

  inline float getAngleOffsetAverageStd();
  inline void setAngleOffsetAverageStd(float value);

  inline float getStiffnessFactorStd();
  inline void setStiffnessFactorStd(float value);

  inline float getSteerRatioStd();
  inline void setSteerRatioStd(float value);

  inline float getRoll();
  inline void setRoll(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveParametersData::Pipeline {
public:
  typedef LiveParametersData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UploaderState::Reader {
public:
  typedef UploaderState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getImmediateQueueSize() const;

  inline  ::uint32_t getImmediateQueueCount() const;

  inline  ::uint32_t getRawQueueSize() const;

  inline  ::uint32_t getRawQueueCount() const;

  inline float getLastTime() const;

  inline float getLastSpeed() const;

  inline bool hasLastFilename() const;
  inline  ::capnp::Text::Reader getLastFilename() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UploaderState::Builder {
public:
  typedef UploaderState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getImmediateQueueSize();
  inline void setImmediateQueueSize( ::uint32_t value);

  inline  ::uint32_t getImmediateQueueCount();
  inline void setImmediateQueueCount( ::uint32_t value);

  inline  ::uint32_t getRawQueueSize();
  inline void setRawQueueSize( ::uint32_t value);

  inline  ::uint32_t getRawQueueCount();
  inline void setRawQueueCount( ::uint32_t value);

  inline float getLastTime();
  inline void setLastTime(float value);

  inline float getLastSpeed();
  inline void setLastSpeed(float value);

  inline bool hasLastFilename();
  inline  ::capnp::Text::Builder getLastFilename();
  inline void setLastFilename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLastFilename(unsigned int size);
  inline void adoptLastFilename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLastFilename();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UploaderState::Pipeline {
public:
  typedef UploaderState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::Reader {
public:
  typedef GnssMeasurements Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMeasTime() const;

  inline  ::int16_t getGpsWeek() const;

  inline double getGpsTimeOfWeek() const;

  inline bool hasCorrectedMeasurements() const;
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader getCorrectedMeasurements() const;

  inline bool hasKalmanPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getKalmanPositionECEF() const;

  inline bool hasKalmanVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getKalmanVelocityECEF() const;

  inline bool hasPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionECEF() const;

  inline bool hasVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityECEF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::Builder {
public:
  typedef GnssMeasurements Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMeasTime();
  inline void setMeasTime( ::uint64_t value);

  inline  ::int16_t getGpsWeek();
  inline void setGpsWeek( ::int16_t value);

  inline double getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek(double value);

  inline bool hasCorrectedMeasurements();
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder getCorrectedMeasurements();
  inline void setCorrectedMeasurements( ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder initCorrectedMeasurements(unsigned int size);
  inline void adoptCorrectedMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>> disownCorrectedMeasurements();

  inline bool hasKalmanPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getKalmanPositionECEF();
  inline void setKalmanPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initKalmanPositionECEF();
  inline void adoptKalmanPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownKalmanPositionECEF();

  inline bool hasKalmanVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getKalmanVelocityECEF();
  inline void setKalmanVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initKalmanVelocityECEF();
  inline void adoptKalmanVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownKalmanVelocityECEF();

  inline bool hasPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionECEF();
  inline void setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionECEF();
  inline void adoptPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionECEF();

  inline bool hasVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityECEF();
  inline void setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityECEF();
  inline void adoptVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityECEF();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::Pipeline {
public:
  typedef GnssMeasurements Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getKalmanPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getKalmanVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityECEF();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::CorrectedMeasurement::Reader {
public:
  typedef CorrectedMeasurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId() const;

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequency() const;

  inline double getPseudorange() const;

  inline double getPseudorangeStd() const;

  inline double getPseudorangeRate() const;

  inline double getPseudorangeRateStd() const;

  inline bool hasSatPos() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getSatPos() const;

  inline bool hasSatVel() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getSatVel() const;

  inline bool hasEphemerisSource() const;
  inline  ::cereal::GnssMeasurements::EphemerisSource::Reader getEphemerisSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::CorrectedMeasurement::Builder {
public:
  typedef CorrectedMeasurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId();
  inline void setConstellationId( ::cereal::GnssMeasurements::ConstellationId value);

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequency();
  inline void setGlonassFrequency( ::int8_t value);

  inline double getPseudorange();
  inline void setPseudorange(double value);

  inline double getPseudorangeStd();
  inline void setPseudorangeStd(double value);

  inline double getPseudorangeRate();
  inline void setPseudorangeRate(double value);

  inline double getPseudorangeRateStd();
  inline void setPseudorangeRateStd(double value);

  inline bool hasSatPos();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getSatPos();
  inline void setSatPos( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSatPos(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initSatPos(unsigned int size);
  inline void adoptSatPos(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownSatPos();

  inline bool hasSatVel();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getSatVel();
  inline void setSatVel( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSatVel(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initSatVel(unsigned int size);
  inline void adoptSatVel(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownSatVel();

  inline bool hasEphemerisSource();
  inline  ::cereal::GnssMeasurements::EphemerisSource::Builder getEphemerisSource();
  inline void setEphemerisSource( ::cereal::GnssMeasurements::EphemerisSource::Reader value);
  inline  ::cereal::GnssMeasurements::EphemerisSource::Builder initEphemerisSource();
  inline void adoptEphemerisSource(::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSource>&& value);
  inline ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSource> disownEphemerisSource();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::CorrectedMeasurement::Pipeline {
public:
  typedef CorrectedMeasurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::GnssMeasurements::EphemerisSource::Pipeline getEphemerisSource();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::EphemerisSource::Reader {
public:
  typedef EphemerisSource Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::EphemerisSourceType getType() const;

  inline  ::int16_t getGpsWeek() const;

  inline  ::int32_t getGpsTimeOfWeek() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::EphemerisSource::Builder {
public:
  typedef EphemerisSource Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::EphemerisSourceType getType();
  inline void setType( ::cereal::GnssMeasurements::EphemerisSourceType value);

  inline  ::int16_t getGpsWeek();
  inline void setGpsWeek( ::int16_t value);

  inline  ::int32_t getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::EphemerisSource::Pipeline {
public:
  typedef EphemerisSource Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Reader {
public:
  typedef UbloxGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMeasurementReport() const;
  inline bool hasMeasurementReport() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Reader getMeasurementReport() const;

  inline bool isEphemeris() const;
  inline bool hasEphemeris() const;
  inline  ::cereal::UbloxGnss::Ephemeris::Reader getEphemeris() const;

  inline bool isIonoData() const;
  inline bool hasIonoData() const;
  inline  ::cereal::UbloxGnss::IonoData::Reader getIonoData() const;

  inline bool isHwStatus() const;
  inline bool hasHwStatus() const;
  inline  ::cereal::UbloxGnss::HwStatus::Reader getHwStatus() const;

  inline bool isHwStatus2() const;
  inline bool hasHwStatus2() const;
  inline  ::cereal::UbloxGnss::HwStatus2::Reader getHwStatus2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Builder {
public:
  typedef UbloxGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMeasurementReport();
  inline bool hasMeasurementReport();
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder getMeasurementReport();
  inline void setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder initMeasurementReport();
  inline void adoptMeasurementReport(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> disownMeasurementReport();

  inline bool isEphemeris();
  inline bool hasEphemeris();
  inline  ::cereal::UbloxGnss::Ephemeris::Builder getEphemeris();
  inline void setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value);
  inline  ::cereal::UbloxGnss::Ephemeris::Builder initEphemeris();
  inline void adoptEphemeris(::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> disownEphemeris();

  inline bool isIonoData();
  inline bool hasIonoData();
  inline  ::cereal::UbloxGnss::IonoData::Builder getIonoData();
  inline void setIonoData( ::cereal::UbloxGnss::IonoData::Reader value);
  inline  ::cereal::UbloxGnss::IonoData::Builder initIonoData();
  inline void adoptIonoData(::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> disownIonoData();

  inline bool isHwStatus();
  inline bool hasHwStatus();
  inline  ::cereal::UbloxGnss::HwStatus::Builder getHwStatus();
  inline void setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value);
  inline  ::cereal::UbloxGnss::HwStatus::Builder initHwStatus();
  inline void adoptHwStatus(::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> disownHwStatus();

  inline bool isHwStatus2();
  inline bool hasHwStatus2();
  inline  ::cereal::UbloxGnss::HwStatus2::Builder getHwStatus2();
  inline void setHwStatus2( ::cereal::UbloxGnss::HwStatus2::Reader value);
  inline  ::cereal::UbloxGnss::HwStatus2::Builder initHwStatus2();
  inline void adoptHwStatus2(::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2> disownHwStatus2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Pipeline {
public:
  typedef UbloxGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Reader {
public:
  typedef MeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRcvTow() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint16_t getLeapSeconds() const;

  inline bool hasReceiverStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader getReceiverStatus() const;

  inline  ::uint8_t getNumMeas() const;

  inline bool hasMeasurements() const;
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader getMeasurements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Builder {
public:
  typedef MeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRcvTow();
  inline void setRcvTow(double value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint16_t getLeapSeconds();
  inline void setLeapSeconds( ::uint16_t value);

  inline bool hasReceiverStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder getReceiverStatus();
  inline void setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder initReceiverStatus();
  inline void adoptReceiverStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> disownReceiverStatus();

  inline  ::uint8_t getNumMeas();
  inline void setNumMeas( ::uint8_t value);

  inline bool hasMeasurements();
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder getMeasurements();
  inline void setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder initMeasurements(unsigned int size);
  inline void adoptMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>> disownMeasurements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Pipeline {
public:
  typedef MeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline getReceiverStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::ReceiverStatus::Reader {
public:
  typedef ReceiverStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid() const;

  inline bool getClkReset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::ReceiverStatus::Builder {
public:
  typedef ReceiverStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid();
  inline void setLeapSecValid(bool value);

  inline bool getClkReset();
  inline void setClkReset(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline {
public:
  typedef ReceiverStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline bool hasTrackingStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader getTrackingStatus() const;

  inline double getPseudorange() const;

  inline double getCarrierCycles() const;

  inline float getDoppler() const;

  inline  ::uint8_t getGnssId() const;

  inline  ::uint8_t getGlonassFrequencyIndex() const;

  inline  ::uint16_t getLocktime() const;

  inline  ::uint8_t getCno() const;

  inline float getPseudorangeStdev() const;

  inline float getCarrierPhaseStdev() const;

  inline float getDopplerStdev() const;

  inline  ::uint8_t getSigId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline bool hasTrackingStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder getTrackingStatus();
  inline void setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder initTrackingStatus();
  inline void adoptTrackingStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> disownTrackingStatus();

  inline double getPseudorange();
  inline void setPseudorange(double value);

  inline double getCarrierCycles();
  inline void setCarrierCycles(double value);

  inline float getDoppler();
  inline void setDoppler(float value);

  inline  ::uint8_t getGnssId();
  inline void setGnssId( ::uint8_t value);

  inline  ::uint8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::uint8_t value);

  inline  ::uint16_t getLocktime();
  inline void setLocktime( ::uint16_t value);

  inline  ::uint8_t getCno();
  inline void setCno( ::uint8_t value);

  inline float getPseudorangeStdev();
  inline void setPseudorangeStdev(float value);

  inline float getCarrierPhaseStdev();
  inline void setCarrierPhaseStdev(float value);

  inline float getDopplerStdev();
  inline void setDopplerStdev(float value);

  inline  ::uint8_t getSigId();
  inline void setSigId( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline getTrackingStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader {
public:
  typedef TrackingStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid() const;

  inline bool getCarrierPhaseValid() const;

  inline bool getHalfCycleValid() const;

  inline bool getHalfCycleSubtracted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder {
public:
  typedef TrackingStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid();
  inline void setPseudorangeValid(bool value);

  inline bool getCarrierPhaseValid();
  inline void setCarrierPhaseValid(bool value);

  inline bool getHalfCycleValid();
  inline void setHalfCycleValid(bool value);

  inline bool getHalfCycleSubtracted();
  inline void setHalfCycleSubtracted(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline {
public:
  typedef TrackingStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Ephemeris::Reader {
public:
  typedef Ephemeris Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::uint16_t getYear() const;

  inline  ::uint16_t getMonth() const;

  inline  ::uint16_t getDay() const;

  inline  ::uint16_t getHour() const;

  inline  ::uint16_t getMinute() const;

  inline float getSecond() const;

  inline double getAf0() const;

  inline double getAf1() const;

  inline double getAf2() const;

  inline double getIode() const;

  inline double getCrs() const;

  inline double getDeltaN() const;

  inline double getM0() const;

  inline double getCuc() const;

  inline double getEcc() const;

  inline double getCus() const;

  inline double getA() const;

  inline double getToe() const;

  inline double getCic() const;

  inline double getOmega0() const;

  inline double getCis() const;

  inline double getI0() const;

  inline double getCrc() const;

  inline double getOmega() const;

  inline double getOmegaDot() const;

  inline double getIDot() const;

  inline double getCodesL2() const;

  inline double getGpsWeek() const;

  inline double getL2() const;

  inline double getSvAcc() const;

  inline double getSvHealth() const;

  inline double getTgd() const;

  inline double getIodc() const;

  inline double getTransmissionTime() const;

  inline double getFitInterval() const;

  inline double getToc() const;

  inline bool getIonoCoeffsValid() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoBeta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Ephemeris::Builder {
public:
  typedef Ephemeris Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::uint16_t getYear();
  inline void setYear( ::uint16_t value);

  inline  ::uint16_t getMonth();
  inline void setMonth( ::uint16_t value);

  inline  ::uint16_t getDay();
  inline void setDay( ::uint16_t value);

  inline  ::uint16_t getHour();
  inline void setHour( ::uint16_t value);

  inline  ::uint16_t getMinute();
  inline void setMinute( ::uint16_t value);

  inline float getSecond();
  inline void setSecond(float value);

  inline double getAf0();
  inline void setAf0(double value);

  inline double getAf1();
  inline void setAf1(double value);

  inline double getAf2();
  inline void setAf2(double value);

  inline double getIode();
  inline void setIode(double value);

  inline double getCrs();
  inline void setCrs(double value);

  inline double getDeltaN();
  inline void setDeltaN(double value);

  inline double getM0();
  inline void setM0(double value);

  inline double getCuc();
  inline void setCuc(double value);

  inline double getEcc();
  inline void setEcc(double value);

  inline double getCus();
  inline void setCus(double value);

  inline double getA();
  inline void setA(double value);

  inline double getToe();
  inline void setToe(double value);

  inline double getCic();
  inline void setCic(double value);

  inline double getOmega0();
  inline void setOmega0(double value);

  inline double getCis();
  inline void setCis(double value);

  inline double getI0();
  inline void setI0(double value);

  inline double getCrc();
  inline void setCrc(double value);

  inline double getOmega();
  inline void setOmega(double value);

  inline double getOmegaDot();
  inline void setOmegaDot(double value);

  inline double getIDot();
  inline void setIDot(double value);

  inline double getCodesL2();
  inline void setCodesL2(double value);

  inline double getGpsWeek();
  inline void setGpsWeek(double value);

  inline double getL2();
  inline void setL2(double value);

  inline double getSvAcc();
  inline void setSvAcc(double value);

  inline double getSvHealth();
  inline void setSvHealth(double value);

  inline double getTgd();
  inline void setTgd(double value);

  inline double getIodc();
  inline void setIodc(double value);

  inline double getTransmissionTime();
  inline void setTransmissionTime(double value);

  inline double getFitInterval();
  inline void setFitInterval(double value);

  inline double getToc();
  inline void setToc(double value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoBeta();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Ephemeris::Pipeline {
public:
  typedef Ephemeris Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::IonoData::Reader {
public:
  typedef IonoData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth() const;

  inline double getTow() const;

  inline double getGpsWeek() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoBeta() const;

  inline bool getHealthValid() const;

  inline bool getIonoCoeffsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::IonoData::Builder {
public:
  typedef IonoData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth();
  inline void setSvHealth( ::uint32_t value);

  inline double getTow();
  inline void setTow(double value);

  inline double getGpsWeek();
  inline void setGpsWeek(double value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoBeta();

  inline bool getHealthValid();
  inline void setHealthValid(bool value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::IonoData::Pipeline {
public:
  typedef IonoData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::HwStatus::Reader {
public:
  typedef HwStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS() const;

  inline  ::uint16_t getAgcCnt() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower() const;

  inline  ::uint8_t getJamInd() const;

  inline  ::uint8_t getFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::HwStatus::Builder {
public:
  typedef HwStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS();
  inline void setNoisePerMS( ::uint16_t value);

  inline  ::uint16_t getAgcCnt();
  inline void setAgcCnt( ::uint16_t value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus();
  inline void setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower();
  inline void setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value);

  inline  ::uint8_t getJamInd();
  inline void setJamInd( ::uint8_t value);

  inline  ::uint8_t getFlags();
  inline void setFlags( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::HwStatus::Pipeline {
public:
  typedef HwStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::HwStatus2::Reader {
public:
  typedef HwStatus2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getOfsI() const;

  inline  ::uint8_t getMagI() const;

  inline  ::int8_t getOfsQ() const;

  inline  ::uint8_t getMagQ() const;

  inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource getCfgSource() const;

  inline  ::uint32_t getLowLevCfg() const;

  inline  ::uint32_t getPostStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::HwStatus2::Builder {
public:
  typedef HwStatus2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getOfsI();
  inline void setOfsI( ::int8_t value);

  inline  ::uint8_t getMagI();
  inline void setMagI( ::uint8_t value);

  inline  ::int8_t getOfsQ();
  inline void setOfsQ( ::int8_t value);

  inline  ::uint8_t getMagQ();
  inline void setMagQ( ::uint8_t value);

  inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource getCfgSource();
  inline void setCfgSource( ::cereal::UbloxGnss::HwStatus2::ConfigSource value);

  inline  ::uint32_t getLowLevCfg();
  inline void setLowLevCfg( ::uint32_t value);

  inline  ::uint32_t getPostStatus();
  inline void setPostStatus( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::HwStatus2::Pipeline {
public:
  typedef HwStatus2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelRaw::Reader {
public:
  typedef ModelRaw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getFrameIdExtra() const;

  inline  ::uint32_t getFrameAge() const;

  inline float getFrameDropPerc() const;

  inline  ::uint64_t getTimestampEof() const;

  inline float getModelExecutionTime() const;

  inline bool getValid() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRawPredictions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelRaw::Builder {
public:
  typedef ModelRaw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getFrameIdExtra();
  inline void setFrameIdExtra( ::uint32_t value);

  inline  ::uint32_t getFrameAge();
  inline void setFrameAge( ::uint32_t value);

  inline float getFrameDropPerc();
  inline void setFrameDropPerc(float value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasRawPredictions();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRawPredictions(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRawPredictions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelRaw::Pipeline {
public:
  typedef ModelRaw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clocks::Reader {
public:
  typedef Clocks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanos() const;

  inline  ::uint64_t getMonotonicNanos() const;

  inline  ::uint64_t getMonotonicRawNanos() const;

  inline  ::uint64_t getWallTimeNanos() const;

  inline  ::uint64_t getModemUptimeMillis() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clocks::Builder {
public:
  typedef Clocks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanos();
  inline void setBootTimeNanos( ::uint64_t value);

  inline  ::uint64_t getMonotonicNanos();
  inline void setMonotonicNanos( ::uint64_t value);

  inline  ::uint64_t getMonotonicRawNanos();
  inline void setMonotonicRawNanos( ::uint64_t value);

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline  ::uint64_t getModemUptimeMillis();
  inline void setModemUptimeMillis( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clocks::Pipeline {
public:
  typedef Clocks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Joystick::Reader {
public:
  typedef Joystick Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAxes() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAxes() const;

  inline bool hasButtons() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getButtons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Joystick::Builder {
public:
  typedef Joystick Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAxes();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAxes();
  inline void setAxes( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAxes(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAxes(unsigned int size);
  inline void adoptAxes(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAxes();

  inline bool hasButtons();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getButtons();
  inline void setButtons( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setButtons(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initButtons(unsigned int size);
  inline void adoptButtons(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownButtons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Joystick::Pipeline {
public:
  typedef Joystick Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTorqueParametersData::Reader {
public:
  typedef LiveTorqueParametersData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLiveValid() const;

  inline float getLatAccelFactorRaw() const;

  inline float getLatAccelOffsetRaw() const;

  inline float getFrictionCoefficientRaw() const;

  inline float getLatAccelFactorFiltered() const;

  inline float getLatAccelOffsetFiltered() const;

  inline float getFrictionCoefficientFiltered() const;

  inline float getTotalBucketPoints() const;

  inline float getDecay() const;

  inline float getMaxResets() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getPoints() const;

  inline  ::int32_t getVersion() const;

  inline bool getUseParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTorqueParametersData::Builder {
public:
  typedef LiveTorqueParametersData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLiveValid();
  inline void setLiveValid(bool value);

  inline float getLatAccelFactorRaw();
  inline void setLatAccelFactorRaw(float value);

  inline float getLatAccelOffsetRaw();
  inline void setLatAccelOffsetRaw(float value);

  inline float getFrictionCoefficientRaw();
  inline void setFrictionCoefficientRaw(float value);

  inline float getLatAccelFactorFiltered();
  inline void setLatAccelFactorFiltered(float value);

  inline float getLatAccelOffsetFiltered();
  inline void setLatAccelOffsetFiltered(float value);

  inline float getFrictionCoefficientFiltered();
  inline void setFrictionCoefficientFiltered(float value);

  inline float getTotalBucketPoints();
  inline void setTotalBucketPoints(float value);

  inline float getDecay();
  inline void setDecay(float value);

  inline float getMaxResets();
  inline void setMaxResets(float value);

  inline bool hasPoints();
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownPoints();

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline bool getUseParams();
  inline void setUseParams(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTorqueParametersData::Pipeline {
public:
  typedef LiveTorqueParametersData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isProcLog() const;
  inline bool hasProcLog() const;
  inline  ::cereal::ProcLog::Reader getProcLog() const;

  inline bool isRoadCameraState() const;
  inline bool hasRoadCameraState() const;
  inline  ::cereal::FrameData::Reader getRoadCameraState() const;

  inline bool isAccelerometer() const;
  inline bool hasAccelerometer() const;
  inline  ::cereal::SensorEventData::Reader getAccelerometer() const;

  inline bool isGyroscope() const;
  inline bool hasGyroscope() const;
  inline  ::cereal::SensorEventData::Reader getGyroscope() const;

  inline bool isDesireDEPRECATED() const;
  inline bool hasDesireDEPRECATED() const;
  inline  ::cereal::Desire::Reader getDesireDEPRECATED() const;

  inline bool isModelV2() const;
  inline bool hasModelV2() const;
  inline  ::cereal::ModelDataV2::Reader getModelV2() const;

  inline bool isLiveCalibration() const;
  inline bool hasLiveCalibration() const;
  inline  ::cereal::LiveCalibrationData::Reader getLiveCalibration() const;

  inline bool isCameraOdometry() const;
  inline bool hasCameraOdometry() const;
  inline  ::cereal::CameraOdometry::Reader getCameraOdometry() const;

  inline bool isCarState() const;
  inline bool hasCarState() const;
  inline  ::cereal::CarState::Reader getCarState() const;

  inline bool isCarControl() const;
  inline bool hasCarControl() const;
  inline  ::cereal::CarControl::Reader getCarControl() const;

  inline bool isCan() const;
  inline bool hasCan() const;
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader getCan() const;

  inline bool isSendcan() const;
  inline bool hasSendcan() const;
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader getSendcan() const;

  inline bool isLateralPlan() const;
  inline bool hasLateralPlan() const;
  inline  ::cereal::LateralPlan::Reader getLateralPlan() const;

  inline bool isCarParams() const;
  inline bool hasCarParams() const;
  inline  ::cereal::CarParams::Reader getCarParams() const;

  inline bool isControlsState() const;
  inline bool hasControlsState() const;
  inline  ::cereal::ControlsState::Reader getControlsState() const;

  inline bool isRadarState() const;
  inline bool hasRadarState() const;
  inline  ::cereal::RadarState::Reader getRadarState() const;

  inline bool isLongitudinalPlan() const;
  inline bool hasLongitudinalPlan() const;
  inline  ::cereal::LongitudinalPlan::Reader getLongitudinalPlan() const;

  inline bool isCarEvents() const;
  inline bool hasCarEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader getCarEvents() const;

  inline bool isFrameDataDEPRECATED() const;
  inline bool hasFrameDataDEPRECATED() const;
  inline  ::cereal::FrameData::Reader getFrameDataDEPRECATED() const;

  inline bool isSensorEventsDEPRECATED() const;
  inline bool hasSensorEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader getSensorEventsDEPRECATED() const;

  inline bool isGpsLocationExternal() const;
  inline bool hasGpsLocationExternal() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocationExternal() const;

  inline bool isPeripheralState() const;
  inline bool hasPeripheralState() const;
  inline  ::cereal::PeripheralState::Reader getPeripheralState() const;

  inline bool isPandaStates() const;
  inline bool hasPandaStates() const;
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader getPandaStates() const;

  inline bool isDriverState() const;
  inline bool hasDriverState() const;
  inline  ::cereal::DriverState::Reader getDriverState() const;

  inline bool isDriverMonitoringState() const;
  inline bool hasDriverMonitoringState() const;
  inline  ::cereal::DriverMonitoringState::Reader getDriverMonitoringState() const;

  inline bool isDriverCameraState() const;
  inline bool hasDriverCameraState() const;
  inline  ::cereal::FrameData::Reader getDriverCameraState() const;

  inline bool isDeviceState() const;
  inline bool hasDeviceState() const;
  inline  ::cereal::DeviceState::Reader getDeviceState() const;

  inline bool isLiveLocationKalman() const;
  inline bool hasLiveLocationKalman() const;
  inline  ::cereal::LiveLocationKalman::Reader getLiveLocationKalman() const;

  inline bool isManagerState() const;
  inline bool hasManagerState() const;
  inline  ::cereal::ManagerState::Reader getManagerState() const;

  inline bool isLiveParameters() const;
  inline bool hasLiveParameters() const;
  inline  ::cereal::LiveParametersData::Reader getLiveParameters() const;

  inline bool isWideRoadCameraState() const;
  inline bool hasWideRoadCameraState() const;
  inline  ::cereal::FrameData::Reader getWideRoadCameraState() const;

  inline bool isLogMessage() const;
  inline bool hasLogMessage() const;
  inline  ::capnp::Text::Reader getLogMessage() const;

  inline bool isErrorLogMessage() const;
  inline bool hasErrorLogMessage() const;
  inline  ::capnp::Text::Reader getErrorLogMessage() const;

  inline  ::uint64_t getLogMonoTime() const;

  inline bool getValid() const;

  inline bool isInitData() const;
  inline bool hasInitData() const;
  inline  ::cereal::InitData::Reader getInitData() const;

  inline bool isUbloxRaw() const;
  inline bool hasUbloxRaw() const;
  inline  ::capnp::Data::Reader getUbloxRaw() const;

  inline bool isLiveTracks() const;
  inline bool hasLiveTracks() const;
  inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Reader getLiveTracks() const;

  inline bool isSentinel() const;
  inline bool hasSentinel() const;
  inline  ::cereal::Sentinel::Reader getSentinel() const;

  inline bool isUploaderState() const;
  inline bool hasUploaderState() const;
  inline  ::cereal::UploaderState::Reader getUploaderState() const;

  inline bool isGnssMeasurements() const;
  inline bool hasGnssMeasurements() const;
  inline  ::cereal::GnssMeasurements::Reader getGnssMeasurements() const;

  inline bool isUbloxGnss() const;
  inline bool hasUbloxGnss() const;
  inline  ::cereal::UbloxGnss::Reader getUbloxGnss() const;

  inline bool isGyroscope2() const;
  inline bool hasGyroscope2() const;
  inline  ::cereal::SensorEventData::Reader getGyroscope2() const;

  inline bool isAccelerometer2() const;
  inline bool hasAccelerometer2() const;
  inline  ::cereal::SensorEventData::Reader getAccelerometer2() const;

  inline bool isGpsLocation() const;
  inline bool hasGpsLocation() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocation() const;

  inline bool isNavModel() const;
  inline bool hasNavModel() const;
  inline  ::cereal::NavModelData::Reader getNavModel() const;

  inline bool isModelRaw() const;
  inline bool hasModelRaw() const;
  inline  ::cereal::ModelRaw::Reader getModelRaw() const;

  inline bool isRoadCameraBuffer() const;
  inline bool hasRoadCameraBuffer() const;
  inline  ::cereal::FrameBuffer::Reader getRoadCameraBuffer() const;

  inline bool isWideRoadCameraBuffer() const;
  inline bool hasWideRoadCameraBuffer() const;
  inline  ::cereal::FrameBuffer::Reader getWideRoadCameraBuffer() const;

  inline bool isDriverCameraBuffer() const;
  inline bool hasDriverCameraBuffer() const;
  inline  ::cereal::FrameBuffer::Reader getDriverCameraBuffer() const;

  inline bool isTestJoystick() const;
  inline bool hasTestJoystick() const;
  inline  ::cereal::Joystick::Reader getTestJoystick() const;

  inline bool isClocks() const;
  inline bool hasClocks() const;
  inline  ::cereal::Clocks::Reader getClocks() const;

  inline bool isLiveTorqueParameters() const;
  inline bool hasLiveTorqueParameters() const;
  inline  ::cereal::LiveTorqueParametersData::Reader getLiveTorqueParameters() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isProcLog();
  inline bool hasProcLog();
  inline  ::cereal::ProcLog::Builder getProcLog();
  inline void setProcLog( ::cereal::ProcLog::Reader value);
  inline  ::cereal::ProcLog::Builder initProcLog();
  inline void adoptProcLog(::capnp::Orphan< ::cereal::ProcLog>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog> disownProcLog();

  inline bool isRoadCameraState();
  inline bool hasRoadCameraState();
  inline  ::cereal::FrameData::Builder getRoadCameraState();
  inline void setRoadCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initRoadCameraState();
  inline void adoptRoadCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownRoadCameraState();

  inline bool isAccelerometer();
  inline bool hasAccelerometer();
  inline  ::cereal::SensorEventData::Builder getAccelerometer();
  inline void setAccelerometer( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initAccelerometer();
  inline void adoptAccelerometer(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownAccelerometer();

  inline bool isGyroscope();
  inline bool hasGyroscope();
  inline  ::cereal::SensorEventData::Builder getGyroscope();
  inline void setGyroscope( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initGyroscope();
  inline void adoptGyroscope(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownGyroscope();

  inline bool isDesireDEPRECATED();
  inline bool hasDesireDEPRECATED();
  inline  ::cereal::Desire::Builder getDesireDEPRECATED();
  inline void setDesireDEPRECATED( ::cereal::Desire::Reader value);
  inline  ::cereal::Desire::Builder initDesireDEPRECATED();
  inline void adoptDesireDEPRECATED(::capnp::Orphan< ::cereal::Desire>&& value);
  inline ::capnp::Orphan< ::cereal::Desire> disownDesireDEPRECATED();

  inline bool isModelV2();
  inline bool hasModelV2();
  inline  ::cereal::ModelDataV2::Builder getModelV2();
  inline void setModelV2( ::cereal::ModelDataV2::Reader value);
  inline  ::cereal::ModelDataV2::Builder initModelV2();
  inline void adoptModelV2(::capnp::Orphan< ::cereal::ModelDataV2>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2> disownModelV2();

  inline bool isLiveCalibration();
  inline bool hasLiveCalibration();
  inline  ::cereal::LiveCalibrationData::Builder getLiveCalibration();
  inline void setLiveCalibration( ::cereal::LiveCalibrationData::Reader value);
  inline  ::cereal::LiveCalibrationData::Builder initLiveCalibration();
  inline void adoptLiveCalibration(::capnp::Orphan< ::cereal::LiveCalibrationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveCalibrationData> disownLiveCalibration();

  inline bool isCameraOdometry();
  inline bool hasCameraOdometry();
  inline  ::cereal::CameraOdometry::Builder getCameraOdometry();
  inline void setCameraOdometry( ::cereal::CameraOdometry::Reader value);
  inline  ::cereal::CameraOdometry::Builder initCameraOdometry();
  inline void adoptCameraOdometry(::capnp::Orphan< ::cereal::CameraOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::CameraOdometry> disownCameraOdometry();

  inline bool isCarState();
  inline bool hasCarState();
  inline  ::cereal::CarState::Builder getCarState();
  inline void setCarState( ::cereal::CarState::Reader value);
  inline  ::cereal::CarState::Builder initCarState();
  inline void adoptCarState(::capnp::Orphan< ::cereal::CarState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState> disownCarState();

  inline bool isCarControl();
  inline bool hasCarControl();
  inline  ::cereal::CarControl::Builder getCarControl();
  inline void setCarControl( ::cereal::CarControl::Reader value);
  inline  ::cereal::CarControl::Builder initCarControl();
  inline void adoptCarControl(::capnp::Orphan< ::cereal::CarControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl> disownCarControl();

  inline bool isCan();
  inline bool hasCan();
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder getCan();
  inline void setCan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder initCan(unsigned int size);
  inline void adoptCan(::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> disownCan();

  inline bool isSendcan();
  inline bool hasSendcan();
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder getSendcan();
  inline void setSendcan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder initSendcan(unsigned int size);
  inline void adoptSendcan(::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> disownSendcan();

  inline bool isLateralPlan();
  inline bool hasLateralPlan();
  inline  ::cereal::LateralPlan::Builder getLateralPlan();
  inline void setLateralPlan( ::cereal::LateralPlan::Reader value);
  inline  ::cereal::LateralPlan::Builder initLateralPlan();
  inline void adoptLateralPlan(::capnp::Orphan< ::cereal::LateralPlan>&& value);
  inline ::capnp::Orphan< ::cereal::LateralPlan> disownLateralPlan();

  inline bool isCarParams();
  inline bool hasCarParams();
  inline  ::cereal::CarParams::Builder getCarParams();
  inline void setCarParams( ::cereal::CarParams::Reader value);
  inline  ::cereal::CarParams::Builder initCarParams();
  inline void adoptCarParams(::capnp::Orphan< ::cereal::CarParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams> disownCarParams();

  inline bool isControlsState();
  inline bool hasControlsState();
  inline  ::cereal::ControlsState::Builder getControlsState();
  inline void setControlsState( ::cereal::ControlsState::Reader value);
  inline  ::cereal::ControlsState::Builder initControlsState();
  inline void adoptControlsState(::capnp::Orphan< ::cereal::ControlsState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState> disownControlsState();

  inline bool isRadarState();
  inline bool hasRadarState();
  inline  ::cereal::RadarState::Builder getRadarState();
  inline void setRadarState( ::cereal::RadarState::Reader value);
  inline  ::cereal::RadarState::Builder initRadarState();
  inline void adoptRadarState(::capnp::Orphan< ::cereal::RadarState>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState> disownRadarState();

  inline bool isLongitudinalPlan();
  inline bool hasLongitudinalPlan();
  inline  ::cereal::LongitudinalPlan::Builder getLongitudinalPlan();
  inline void setLongitudinalPlan( ::cereal::LongitudinalPlan::Reader value);
  inline  ::cereal::LongitudinalPlan::Builder initLongitudinalPlan();
  inline void adoptLongitudinalPlan(::capnp::Orphan< ::cereal::LongitudinalPlan>&& value);
  inline ::capnp::Orphan< ::cereal::LongitudinalPlan> disownLongitudinalPlan();

  inline bool isCarEvents();
  inline bool hasCarEvents();
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder getCarEvents();
  inline void setCarEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder initCarEvents(unsigned int size);
  inline void adoptCarEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> disownCarEvents();

  inline bool isFrameDataDEPRECATED();
  inline bool hasFrameDataDEPRECATED();
  inline  ::cereal::FrameData::Builder getFrameDataDEPRECATED();
  inline void setFrameDataDEPRECATED( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initFrameDataDEPRECATED();
  inline void adoptFrameDataDEPRECATED(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownFrameDataDEPRECATED();

  inline bool isSensorEventsDEPRECATED();
  inline bool hasSensorEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder getSensorEventsDEPRECATED();
  inline void setSensorEventsDEPRECATED( ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder initSensorEventsDEPRECATED(unsigned int size);
  inline void adoptSensorEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>> disownSensorEventsDEPRECATED();

  inline bool isGpsLocationExternal();
  inline bool hasGpsLocationExternal();
  inline  ::cereal::GpsLocationData::Builder getGpsLocationExternal();
  inline void setGpsLocationExternal( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocationExternal();
  inline void adoptGpsLocationExternal(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocationExternal();

  inline bool isPeripheralState();
  inline bool hasPeripheralState();
  inline  ::cereal::PeripheralState::Builder getPeripheralState();
  inline void setPeripheralState( ::cereal::PeripheralState::Reader value);
  inline  ::cereal::PeripheralState::Builder initPeripheralState();
  inline void adoptPeripheralState(::capnp::Orphan< ::cereal::PeripheralState>&& value);
  inline ::capnp::Orphan< ::cereal::PeripheralState> disownPeripheralState();

  inline bool isPandaStates();
  inline bool hasPandaStates();
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder getPandaStates();
  inline void setPandaStates( ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder initPandaStates(unsigned int size);
  inline void adoptPandaStates(::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>> disownPandaStates();

  inline bool isDriverState();
  inline bool hasDriverState();
  inline  ::cereal::DriverState::Builder getDriverState();
  inline void setDriverState( ::cereal::DriverState::Reader value);
  inline  ::cereal::DriverState::Builder initDriverState();
  inline void adoptDriverState(::capnp::Orphan< ::cereal::DriverState>&& value);
  inline ::capnp::Orphan< ::cereal::DriverState> disownDriverState();

  inline bool isDriverMonitoringState();
  inline bool hasDriverMonitoringState();
  inline  ::cereal::DriverMonitoringState::Builder getDriverMonitoringState();
  inline void setDriverMonitoringState( ::cereal::DriverMonitoringState::Reader value);
  inline  ::cereal::DriverMonitoringState::Builder initDriverMonitoringState();
  inline void adoptDriverMonitoringState(::capnp::Orphan< ::cereal::DriverMonitoringState>&& value);
  inline ::capnp::Orphan< ::cereal::DriverMonitoringState> disownDriverMonitoringState();

  inline bool isDriverCameraState();
  inline bool hasDriverCameraState();
  inline  ::cereal::FrameData::Builder getDriverCameraState();
  inline void setDriverCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initDriverCameraState();
  inline void adoptDriverCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownDriverCameraState();

  inline bool isDeviceState();
  inline bool hasDeviceState();
  inline  ::cereal::DeviceState::Builder getDeviceState();
  inline void setDeviceState( ::cereal::DeviceState::Reader value);
  inline  ::cereal::DeviceState::Builder initDeviceState();
  inline void adoptDeviceState(::capnp::Orphan< ::cereal::DeviceState>&& value);
  inline ::capnp::Orphan< ::cereal::DeviceState> disownDeviceState();

  inline bool isLiveLocationKalman();
  inline bool hasLiveLocationKalman();
  inline  ::cereal::LiveLocationKalman::Builder getLiveLocationKalman();
  inline void setLiveLocationKalman( ::cereal::LiveLocationKalman::Reader value);
  inline  ::cereal::LiveLocationKalman::Builder initLiveLocationKalman();
  inline void adoptLiveLocationKalman(::capnp::Orphan< ::cereal::LiveLocationKalman>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman> disownLiveLocationKalman();

  inline bool isManagerState();
  inline bool hasManagerState();
  inline  ::cereal::ManagerState::Builder getManagerState();
  inline void setManagerState( ::cereal::ManagerState::Reader value);
  inline  ::cereal::ManagerState::Builder initManagerState();
  inline void adoptManagerState(::capnp::Orphan< ::cereal::ManagerState>&& value);
  inline ::capnp::Orphan< ::cereal::ManagerState> disownManagerState();

  inline bool isLiveParameters();
  inline bool hasLiveParameters();
  inline  ::cereal::LiveParametersData::Builder getLiveParameters();
  inline void setLiveParameters( ::cereal::LiveParametersData::Reader value);
  inline  ::cereal::LiveParametersData::Builder initLiveParameters();
  inline void adoptLiveParameters(::capnp::Orphan< ::cereal::LiveParametersData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveParametersData> disownLiveParameters();

  inline bool isWideRoadCameraState();
  inline bool hasWideRoadCameraState();
  inline  ::cereal::FrameData::Builder getWideRoadCameraState();
  inline void setWideRoadCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initWideRoadCameraState();
  inline void adoptWideRoadCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownWideRoadCameraState();

  inline bool isLogMessage();
  inline bool hasLogMessage();
  inline  ::capnp::Text::Builder getLogMessage();
  inline void setLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogMessage(unsigned int size);
  inline void adoptLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogMessage();

  inline bool isErrorLogMessage();
  inline bool hasErrorLogMessage();
  inline  ::capnp::Text::Builder getErrorLogMessage();
  inline void setErrorLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initErrorLogMessage(unsigned int size);
  inline void adoptErrorLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownErrorLogMessage();

  inline  ::uint64_t getLogMonoTime();
  inline void setLogMonoTime( ::uint64_t value);

  inline bool getValid();
  inline void setValid(bool value);

  inline bool isInitData();
  inline bool hasInitData();
  inline  ::cereal::InitData::Builder getInitData();
  inline void setInitData( ::cereal::InitData::Reader value);
  inline  ::cereal::InitData::Builder initInitData();
  inline void adoptInitData(::capnp::Orphan< ::cereal::InitData>&& value);
  inline ::capnp::Orphan< ::cereal::InitData> disownInitData();

  inline bool isUbloxRaw();
  inline bool hasUbloxRaw();
  inline  ::capnp::Data::Builder getUbloxRaw();
  inline void setUbloxRaw( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUbloxRaw(unsigned int size);
  inline void adoptUbloxRaw(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUbloxRaw();

  inline bool isLiveTracks();
  inline bool hasLiveTracks();
  inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Builder getLiveTracks();
  inline void setLiveTracks( ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Builder initLiveTracks(unsigned int size);
  inline void adoptLiveTracks(::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>> disownLiveTracks();

  inline bool isSentinel();
  inline bool hasSentinel();
  inline  ::cereal::Sentinel::Builder getSentinel();
  inline void setSentinel( ::cereal::Sentinel::Reader value);
  inline  ::cereal::Sentinel::Builder initSentinel();
  inline void adoptSentinel(::capnp::Orphan< ::cereal::Sentinel>&& value);
  inline ::capnp::Orphan< ::cereal::Sentinel> disownSentinel();

  inline bool isUploaderState();
  inline bool hasUploaderState();
  inline  ::cereal::UploaderState::Builder getUploaderState();
  inline void setUploaderState( ::cereal::UploaderState::Reader value);
  inline  ::cereal::UploaderState::Builder initUploaderState();
  inline void adoptUploaderState(::capnp::Orphan< ::cereal::UploaderState>&& value);
  inline ::capnp::Orphan< ::cereal::UploaderState> disownUploaderState();

  inline bool isGnssMeasurements();
  inline bool hasGnssMeasurements();
  inline  ::cereal::GnssMeasurements::Builder getGnssMeasurements();
  inline void setGnssMeasurements( ::cereal::GnssMeasurements::Reader value);
  inline  ::cereal::GnssMeasurements::Builder initGnssMeasurements();
  inline void adoptGnssMeasurements(::capnp::Orphan< ::cereal::GnssMeasurements>&& value);
  inline ::capnp::Orphan< ::cereal::GnssMeasurements> disownGnssMeasurements();

  inline bool isUbloxGnss();
  inline bool hasUbloxGnss();
  inline  ::cereal::UbloxGnss::Builder getUbloxGnss();
  inline void setUbloxGnss( ::cereal::UbloxGnss::Reader value);
  inline  ::cereal::UbloxGnss::Builder initUbloxGnss();
  inline void adoptUbloxGnss(::capnp::Orphan< ::cereal::UbloxGnss>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss> disownUbloxGnss();

  inline bool isGyroscope2();
  inline bool hasGyroscope2();
  inline  ::cereal::SensorEventData::Builder getGyroscope2();
  inline void setGyroscope2( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initGyroscope2();
  inline void adoptGyroscope2(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownGyroscope2();

  inline bool isAccelerometer2();
  inline bool hasAccelerometer2();
  inline  ::cereal::SensorEventData::Builder getAccelerometer2();
  inline void setAccelerometer2( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initAccelerometer2();
  inline void adoptAccelerometer2(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownAccelerometer2();

  inline bool isGpsLocation();
  inline bool hasGpsLocation();
  inline  ::cereal::GpsLocationData::Builder getGpsLocation();
  inline void setGpsLocation( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocation();
  inline void adoptGpsLocation(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocation();

  inline bool isNavModel();
  inline bool hasNavModel();
  inline  ::cereal::NavModelData::Builder getNavModel();
  inline void setNavModel( ::cereal::NavModelData::Reader value);
  inline  ::cereal::NavModelData::Builder initNavModel();
  inline void adoptNavModel(::capnp::Orphan< ::cereal::NavModelData>&& value);
  inline ::capnp::Orphan< ::cereal::NavModelData> disownNavModel();

  inline bool isModelRaw();
  inline bool hasModelRaw();
  inline  ::cereal::ModelRaw::Builder getModelRaw();
  inline void setModelRaw( ::cereal::ModelRaw::Reader value);
  inline  ::cereal::ModelRaw::Builder initModelRaw();
  inline void adoptModelRaw(::capnp::Orphan< ::cereal::ModelRaw>&& value);
  inline ::capnp::Orphan< ::cereal::ModelRaw> disownModelRaw();

  inline bool isRoadCameraBuffer();
  inline bool hasRoadCameraBuffer();
  inline  ::cereal::FrameBuffer::Builder getRoadCameraBuffer();
  inline void setRoadCameraBuffer( ::cereal::FrameBuffer::Reader value);
  inline  ::cereal::FrameBuffer::Builder initRoadCameraBuffer();
  inline void adoptRoadCameraBuffer(::capnp::Orphan< ::cereal::FrameBuffer>&& value);
  inline ::capnp::Orphan< ::cereal::FrameBuffer> disownRoadCameraBuffer();

  inline bool isWideRoadCameraBuffer();
  inline bool hasWideRoadCameraBuffer();
  inline  ::cereal::FrameBuffer::Builder getWideRoadCameraBuffer();
  inline void setWideRoadCameraBuffer( ::cereal::FrameBuffer::Reader value);
  inline  ::cereal::FrameBuffer::Builder initWideRoadCameraBuffer();
  inline void adoptWideRoadCameraBuffer(::capnp::Orphan< ::cereal::FrameBuffer>&& value);
  inline ::capnp::Orphan< ::cereal::FrameBuffer> disownWideRoadCameraBuffer();

  inline bool isDriverCameraBuffer();
  inline bool hasDriverCameraBuffer();
  inline  ::cereal::FrameBuffer::Builder getDriverCameraBuffer();
  inline void setDriverCameraBuffer( ::cereal::FrameBuffer::Reader value);
  inline  ::cereal::FrameBuffer::Builder initDriverCameraBuffer();
  inline void adoptDriverCameraBuffer(::capnp::Orphan< ::cereal::FrameBuffer>&& value);
  inline ::capnp::Orphan< ::cereal::FrameBuffer> disownDriverCameraBuffer();

  inline bool isTestJoystick();
  inline bool hasTestJoystick();
  inline  ::cereal::Joystick::Builder getTestJoystick();
  inline void setTestJoystick( ::cereal::Joystick::Reader value);
  inline  ::cereal::Joystick::Builder initTestJoystick();
  inline void adoptTestJoystick(::capnp::Orphan< ::cereal::Joystick>&& value);
  inline ::capnp::Orphan< ::cereal::Joystick> disownTestJoystick();

  inline bool isClocks();
  inline bool hasClocks();
  inline  ::cereal::Clocks::Builder getClocks();
  inline void setClocks( ::cereal::Clocks::Reader value);
  inline  ::cereal::Clocks::Builder initClocks();
  inline void adoptClocks(::capnp::Orphan< ::cereal::Clocks>&& value);
  inline ::capnp::Orphan< ::cereal::Clocks> disownClocks();

  inline bool isLiveTorqueParameters();
  inline bool hasLiveTorqueParameters();
  inline  ::cereal::LiveTorqueParametersData::Builder getLiveTorqueParameters();
  inline void setLiveTorqueParameters( ::cereal::LiveTorqueParametersData::Reader value);
  inline  ::cereal::LiveTorqueParametersData::Builder initLiveTorqueParameters();
  inline void adoptLiveTorqueParameters(::capnp::Orphan< ::cereal::LiveTorqueParametersData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveTorqueParametersData> disownLiveTorqueParameters();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return  ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey( ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Value> Map<Key, Value>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue( ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::Entry::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xeb724a566d17af0f, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_d099a8ba9b899200, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// Map<Key, Value>
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::_capnpPrivate::brandScopes[] = {
  { 0xeb724a566d17af0f, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::cereal::Map<Key, Value>::Entry::_capnpPrivate::brand() },
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_eb724a566d17af0f, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

inline bool InitData::Reader::hasKernelArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader InitData::Reader::getKernelArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::Builder::getKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelArgs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void InitData::Builder::setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::Builder::initKernelArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelArgs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> InitData::Builder::disownKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGctxDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGctxDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGctxDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGctxDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGctxDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGctxDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGctxDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGctxDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::InitData::DeviceType InitData::Reader::getDeviceType() const {
  return _reader.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::InitData::DeviceType InitData::Builder::getDeviceType() {
  return _builder.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDeviceType( ::cereal::InitData::DeviceType value) {
  _builder.setDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidBuildInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidBuildInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::AndroidBuildInfo::Reader InitData::Reader::getAndroidBuildInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::getAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::AndroidBuildInfo::Pipeline InitData::Pipeline::getAndroidBuildInfo() {
  return  ::cereal::InitData::AndroidBuildInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::initAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidBuildInfo(
    ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> InitData::Builder::disownAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidSensorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidSensorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader InitData::Reader::getAndroidSensorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder InitData::Builder::getAndroidSensorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setAndroidSensorsDEPRECATED( ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder InitData::Builder::initAndroidSensorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptAndroidSensorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>> InitData::Builder::disownAndroidSensorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasChffrAndroidExtraDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasChffrAndroidExtraDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::ChffrAndroidExtra::Reader InitData::Reader::getChffrAndroidExtraDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::getChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline InitData::Pipeline::getChffrAndroidExtraDEPRECATED() {
  return  ::cereal::InitData::ChffrAndroidExtra::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setChffrAndroidExtraDEPRECATED( ::cereal::InitData::ChffrAndroidExtra::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::initChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptChffrAndroidExtraDEPRECATED(
    ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> InitData::Builder::disownChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasPandaInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasPandaInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::PandaInfo::Reader InitData::Reader::getPandaInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::getPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::PandaInfo::Pipeline InitData::Pipeline::getPandaInfo() {
  return  ::cereal::InitData::PandaInfo::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setPandaInfo( ::cereal::InitData::PandaInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::initPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptPandaInfo(
    ::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> InitData::Builder::disownPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getDirty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getDirty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDirty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitCommit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitCommit() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitCommit() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitCommit( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitCommit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitCommit(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGitBranch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitBranch() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitBranch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitBranch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitBranch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitBranch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitRemote() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitRemote() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitRemote() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitRemote( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitRemote(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitRemote(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasIosBuildInfoDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasIosBuildInfoDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::IosBuildInfo::Reader InitData::Reader::getIosBuildInfoDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::getIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::IosBuildInfo::Pipeline InitData::Pipeline::getIosBuildInfoDEPRECATED() {
  return  ::cereal::InitData::IosBuildInfo::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setIosBuildInfoDEPRECATED( ::cereal::InitData::IosBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::initIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptIosBuildInfoDEPRECATED(
    ::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> InitData::Builder::disownIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasKernelVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getKernelVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initKernelVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidProperties() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidProperties() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::Reader::getAndroidProperties() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::getAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::Pipeline::getAndroidProperties() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::initAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidProperties(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::Builder::disownAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader InitData::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline InitData::Pipeline::getParams() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptParams(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> InitData::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasOsVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasOsVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getOsVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setOsVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initOsVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptOsVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasCommands() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasCommands() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader InitData::Reader::getCommands() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::getCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline InitData::Pipeline::getCommands() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::initCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptCommands(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> InitData::Builder::disownCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::getHasPanda() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool InitData::PandaInfo::Builder::getHasPanda() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::PandaInfo::Builder::setHasPanda(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::PandaInfo::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasStVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasStVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getStVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setStVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initStVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptStVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasEspVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasEspVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getEspVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setEspVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initEspVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptEspVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBoard() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBoard() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBoard() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBoard( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBoard(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBoard(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBootloader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBootloader() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBootloader() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBootloader( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBootloader(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBootloader(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBrand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBrand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBrand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBrand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBrand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBrand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDevice() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDevice( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDevice(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDevice(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDisplay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDisplay() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDisplay() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDisplay( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDisplay(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDisplay(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHardware() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHardware() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHardware() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHardware( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHardware(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHardware(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHost() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHost() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasManufacturer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasManufacturer() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getManufacturer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setManufacturer( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initManufacturer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptManufacturer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasProduct() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasProduct() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getProduct() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setProduct( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initProduct(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptProduct(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasRadioVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasRadioVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getRadioVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setRadioVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initRadioVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptRadioVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSerial() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSerial() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getSerial() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSerial( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initSerial(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSerial(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSupportedAbis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSupportedAbis() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader InitData::AndroidBuildInfo::Reader::getSupportedAbis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::AndroidBuildInfo::Builder::getSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::AndroidBuildInfo::Builder::initSupportedAbis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSupportedAbis(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> InitData::AndroidBuildInfo::Builder::disownSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::int64_t InitData::AndroidBuildInfo::Reader::getTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t InitData::AndroidBuildInfo::Builder::getTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionCodename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionCodename() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionCodename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionCodename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionCodename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionCodename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionRelease() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionRelease() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionRelease() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionRelease( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionRelease(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionRelease(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidBuildInfo::Reader::getVersionSdk() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidBuildInfo::Builder::getVersionSdk() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSdk( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionSecurityPatch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionSecurityPatch() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionSecurityPatch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSecurityPatch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionSecurityPatch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionSecurityPatch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidSensor::Reader::hasVendor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasVendor() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getVendor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setVendor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initVendor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptVendor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getHandle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getHandle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setHandle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getMaxRange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getMaxRange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxRange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getResolution() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getResolution() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setResolution(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getPower() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getPower() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setPower(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMinDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMinDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMinDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoReservedEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoReservedEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoReservedEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoMaxEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoMaxEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoMaxEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasStringType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasStringType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getStringType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setStringType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initStringType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptStringType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMaxDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMaxDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::ChffrAndroidExtra::Reader::hasAllCameraCharacteristics() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::ChffrAndroidExtra::Builder::hasAllCameraCharacteristics() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::ChffrAndroidExtra::Reader::getAllCameraCharacteristics() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::getAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::ChffrAndroidExtra::Pipeline::getAllCameraCharacteristics() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InitData::ChffrAndroidExtra::Builder::setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::initAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::ChffrAndroidExtra::Builder::adoptAllCameraCharacteristics(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::ChffrAndroidExtra::Builder::disownAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasAppVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasAppVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getAppVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setAppVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initAppVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptAppVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t InitData::IosBuildInfo::Reader::getAppBuild() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::IosBuildInfo::Builder::getAppBuild() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::IosBuildInfo::Builder::setAppBuild( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::IosBuildInfo::Reader::hasOsVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasOsVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getOsVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setOsVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initOsVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptOsVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasDeviceModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasDeviceModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getDeviceModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setDeviceModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initDeviceModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptDeviceModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t CameraOdometry::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraOdometry::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CameraOdometry::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CameraOdometry::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CameraOdometry::Reader::hasWideFromDeviceEuler() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasWideFromDeviceEuler() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getWideFromDeviceEuler() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setWideFromDeviceEuler(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initWideFromDeviceEuler(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptWideFromDeviceEuler(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasWideFromDeviceEulerStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasWideFromDeviceEulerStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getWideFromDeviceEulerStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getWideFromDeviceEulerStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setWideFromDeviceEulerStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setWideFromDeviceEulerStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initWideFromDeviceEulerStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptWideFromDeviceEulerStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownWideFromDeviceEulerStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::cereal::Sentinel::SentinelType Sentinel::Reader::getType() const {
  return _reader.getDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::Sentinel::SentinelType Sentinel::Builder::getType() {
  return _builder.getDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sentinel::Builder::setType( ::cereal::Sentinel::SentinelType value) {
  _builder.setDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Sentinel::Reader::getSignal() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Sentinel::Builder::getSignal() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Sentinel::Builder::setSignal( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasWarpMatrixDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrixDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrixDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrixDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrixDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t LiveCalibrationData::Reader::getCalStatusDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalStatusDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatusDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveCalibrationData::Reader::getCalCycle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getCalCycle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalCycle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveCalibrationData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasExtrinsicMatrix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasExtrinsicMatrix() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getExtrinsicMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initExtrinsicMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptExtrinsicMatrix(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrix2DEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrix2DEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrix2DEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrix2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrix2DEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrix2DEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrix2DEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrix2DEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrix2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrixBigDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrixBigDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrixBigDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrixBigDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrixBigDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrixBigDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrixBigDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrixBigDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrixBigDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasRpyCalib() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasRpyCalib() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getRpyCalib() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setRpyCalib( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setRpyCalib(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initRpyCalib(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptRpyCalib(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasRpyCalibSpread() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasRpyCalibSpread() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getRpyCalibSpread() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getRpyCalibSpread() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setRpyCalibSpread( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setRpyCalibSpread(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initRpyCalibSpread(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptRpyCalibSpread(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownRpyCalibSpread() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveCalibrationData::Reader::getValidBlocks() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getValidBlocks() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setValidBlocks( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasWideFromDeviceEuler() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWideFromDeviceEuler() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWideFromDeviceEuler() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWideFromDeviceEuler(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWideFromDeviceEuler(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWideFromDeviceEuler(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::cereal::LiveCalibrationData::Status LiveCalibrationData::Reader::getCalStatus() const {
  return _reader.getDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveCalibrationData::Status LiveCalibrationData::Builder::getCalStatus() {
  return _builder.getDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatus( ::cereal::LiveCalibrationData::Status value) {
  _builder.setDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelDataV2::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelDataV2::Reader::getFrameAge() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameAge() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameAge( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::Reader::getFrameDropPerc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getFrameDropPerc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameDropPerc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ModelDataV2::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelDataV2::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::XYZTData::Reader ModelDataV2::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::XYZTData::Pipeline ModelDataV2::Pipeline::getPosition() {
  return  ::cereal::ModelDataV2::XYZTData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setPosition( ::cereal::ModelDataV2::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptPosition(
    ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> ModelDataV2::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::XYZTData::Reader ModelDataV2::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::XYZTData::Pipeline ModelDataV2::Pipeline::getOrientation() {
  return  ::cereal::ModelDataV2::XYZTData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setOrientation( ::cereal::ModelDataV2::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> ModelDataV2::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::XYZTData::Reader ModelDataV2::Reader::getVelocity() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::getVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::XYZTData::Pipeline ModelDataV2::Pipeline::getVelocity() {
  return  ::cereal::ModelDataV2::XYZTData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setVelocity( ::cereal::ModelDataV2::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::initVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptVelocity(
    ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> ModelDataV2::Builder::disownVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasOrientationRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasOrientationRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::XYZTData::Reader ModelDataV2::Reader::getOrientationRate() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::getOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::XYZTData::Pipeline ModelDataV2::Pipeline::getOrientationRate() {
  return  ::cereal::ModelDataV2::XYZTData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setOrientationRate( ::cereal::ModelDataV2::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::initOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptOrientationRate(
    ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> ModelDataV2::Builder::disownOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLaneLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLines( ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLaneLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLines(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLineProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLineProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getLaneLineProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getLaneLineProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLineProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setLaneLineProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initLaneLineProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLineProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownLaneLineProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasRoadEdges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRoadEdges() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getRoadEdges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getRoadEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRoadEdges( ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initRoadEdges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRoadEdges(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownRoadEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::XYZTData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLeads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLeads() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLeads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLeads( ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLeads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLeads(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::MetaData::Reader ModelDataV2::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::MetaData::Builder ModelDataV2::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::MetaData::Pipeline ModelDataV2::Pipeline::getMeta() {
  return  ::cereal::ModelDataV2::MetaData::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setMeta( ::cereal::ModelDataV2::MetaData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::MetaData::Builder ModelDataV2::Builder::initMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptMeta(
    ::capnp::Orphan< ::cereal::ModelDataV2::MetaData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::MetaData> ModelDataV2::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLineStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLineStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getLaneLineStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getLaneLineStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLineStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setLaneLineStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initLaneLineStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLineStds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownLaneLineStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasRoadEdgeStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRoadEdgeStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getRoadEdgeStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getRoadEdgeStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRoadEdgeStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setRoadEdgeStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initRoadEdgeStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRoadEdgeStds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownRoadEdgeStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline float ModelDataV2::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ModelDataV2::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ModelDataV2::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRawPredictions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ModelDataV2::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ModelDataV2::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline float ModelDataV2::Reader::getGpuExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getGpuExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setGpuExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasLeadsV3() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLeadsV3() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLeadsV3() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLeadsV3() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLeadsV3( ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLeadsV3(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLeadsV3(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLeadsV3() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::XYZTData::Reader ModelDataV2::Reader::getAcceleration() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::getAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::XYZTData::Pipeline ModelDataV2::Pipeline::getAcceleration() {
  return  ::cereal::ModelDataV2::XYZTData::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setAcceleration( ::cereal::ModelDataV2::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::XYZTData::Builder ModelDataV2::Builder::initAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::XYZTData> ModelDataV2::Builder::disownAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelDataV2::Reader::getFrameIdExtra() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameIdExtra() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameIdExtra( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasTemporalPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasTemporalPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Pose::Reader ModelDataV2::Reader::getTemporalPose() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Pose::Builder ModelDataV2::Builder::getTemporalPose() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::Pose::Pipeline ModelDataV2::Pipeline::getTemporalPose() {
  return  ::cereal::ModelDataV2::Pose::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setTemporalPose( ::cereal::ModelDataV2::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Pose::Builder ModelDataV2::Builder::initTemporalPose() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptTemporalPose(
    ::capnp::Orphan< ::cereal::ModelDataV2::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::Pose> ModelDataV2::Builder::disownTemporalPose() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasZ() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasZ() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getZ() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getZ() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setZ( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setZ(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initZ(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptZ(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownZ() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::XYZTData::Reader::hasZStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::XYZTData::Builder::hasZStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::XYZTData::Reader::getZStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::getZStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::XYZTData::Builder::setZStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::XYZTData::Builder::setZStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::XYZTData::Builder::initZStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::XYZTData::Builder::adoptZStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::XYZTData::Builder::disownZStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline float ModelDataV2::LeadDataV2::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV2::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV2::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::LeadDataV2::Reader::getT() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV2::Builder::getT() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV2::Builder::setT(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::LeadDataV2::Reader::hasXyva() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV2::Builder::hasXyva() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV2::Reader::getXyva() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::getXyva() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV2::Builder::setXyva( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV2::Builder::setXyva(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::initXyva(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV2::Builder::adoptXyva(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV2::Builder::disownXyva() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV2::Reader::hasXyvaStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV2::Builder::hasXyvaStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV2::Reader::getXyvaStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::getXyvaStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV2::Builder::setXyvaStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV2::Builder::setXyvaStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::initXyvaStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV2::Builder::adoptXyvaStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV2::Builder::disownXyvaStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float ModelDataV2::LeadDataV3::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV3::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV3::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::LeadDataV3::Reader::getProbTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV3::Builder::getProbTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV3::Builder::setProbTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::LeadDataV3::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasVStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasVStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getVStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getVStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setVStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setVStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initVStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptVStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownVStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setA(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasAStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasAStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getAStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getAStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setAStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setAStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initAStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptAStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownAStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline float ModelDataV2::MetaData::Reader::getEngagedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getEngagedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setEngagedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::MetaData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::MetaData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::MetaData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::MetaData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::MetaData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelDataV2::MetaData::Reader::getBrakeDisengageProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getBrakeDisengageProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setBrakeDisengageProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::MetaData::Reader::getGasDisengageProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getGasDisengageProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setGasDisengageProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::MetaData::Reader::getSteerOverrideProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getSteerOverrideProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setSteerOverrideProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::MetaData::Reader::hasDesireState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDesireState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::MetaData::Reader::getDesireState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::getDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::MetaData::Builder::setDesireState(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::initDesireState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::MetaData::Builder::adoptDesireState(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::MetaData::Builder::disownDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::MetaData::Reader::hasDisengagePredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDisengagePredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Reader ModelDataV2::MetaData::Reader::getDisengagePredictions() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Builder ModelDataV2::MetaData::Builder::getDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::DisengagePredictions::Pipeline ModelDataV2::MetaData::Pipeline::getDisengagePredictions() {
  return  ::cereal::ModelDataV2::DisengagePredictions::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::MetaData::Builder::setDisengagePredictions( ::cereal::ModelDataV2::DisengagePredictions::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Builder ModelDataV2::MetaData::Builder::initDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::adoptDisengagePredictions(
    ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions> ModelDataV2::MetaData::Builder::disownDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::MetaData::Reader::getHardBrakePredicted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2::MetaData::Builder::getHardBrakePredicted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setHardBrakePredicted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrakeDisengageProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrakeDisengageProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrakeDisengageProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrakeDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakeDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakeDisengageProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrakeDisengageProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrakeDisengageProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrakeDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasGasDisengageProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasGasDisengageProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getGasDisengageProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getGasDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasDisengageProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initGasDisengageProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptGasDisengageProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownGasDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasSteerOverrideProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasSteerOverrideProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getSteerOverrideProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getSteerOverrideProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setSteerOverrideProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setSteerOverrideProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initSteerOverrideProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptSteerOverrideProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownSteerOverrideProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake3MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake3MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake3MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake3MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake3MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake3MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake3MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake3MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake3MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake4MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake4MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake4MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake4MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake4MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake4MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake4MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake4MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake4MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake5MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake5MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake5MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake5MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake5MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake5MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake5MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake5MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake5MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t NavModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t NavModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float NavModelData::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float NavModelData::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float NavModelData::Reader::getDspExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float NavModelData::Builder::getDspExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setDspExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool NavModelData::Reader::hasFeatures() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasFeatures() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::Reader::getFeatures() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::getFeatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::setFeatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavModelData::Builder::setFeatures(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::initFeatures(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavModelData::Builder::adoptFeatures(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::Builder::disownFeatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavModelData::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavModelData::XYData::Reader NavModelData::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::NavModelData::XYData::Builder NavModelData::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavModelData::XYData::Pipeline NavModelData::Pipeline::getPosition() {
  return  ::cereal::NavModelData::XYData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void NavModelData::Builder::setPosition( ::cereal::NavModelData::XYData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavModelData::XYData::Builder NavModelData::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::adoptPosition(
    ::capnp::Orphan< ::cereal::NavModelData::XYData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavModelData::XYData> NavModelData::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavModelData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void NavModelData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavModelData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Desire::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Desire::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Desire::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Desire::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Desire::Builder::setMeta( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Desire::Builder::setMeta(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Desire::Builder::initMeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Desire::Builder::adoptMeta(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Desire::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Gyroscope::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Gyroscope::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Gyroscope::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Gyroscope::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Gyroscope::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Gyroscope::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Gyroscope::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Gyroscope::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Gyroscope::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Accelerometer::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Accelerometer::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Accelerometer::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Accelerometer::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Accelerometer::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Accelerometer::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Accelerometer::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Accelerometer::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Accelerometer::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getFrameLength() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getFrameLength() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getIntegLines() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getIntegLines() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setIntegLines( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getGlobalGainDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getGlobalGainDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGlobalGainDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FrameData::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FrameData::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setImage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FrameData::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FrameData::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::FrameData::FrameType FrameData::Reader::getFrameType() const {
  return _reader.getDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::FrameData::FrameType FrameData::Builder::getFrameType() {
  return _builder.getDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameType( ::cereal::FrameData::FrameType value) {
  _builder.setDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampSof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampSof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampSof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasAndroidCaptureResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasAndroidCaptureResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::AndroidCaptureResult::Reader FrameData::Reader::getAndroidCaptureResult() const {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::getAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline FrameData::Pipeline::getAndroidCaptureResult() {
  return  ::cereal::FrameData::AndroidCaptureResult::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FrameData::Builder::setAndroidCaptureResult( ::cereal::FrameData::AndroidCaptureResult::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::initAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::adoptAndroidCaptureResult(
    ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> FrameData::Builder::disownAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasIntrinsics() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasIntrinsics() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getIntrinsics() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getIntrinsics() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setIntrinsics( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setIntrinsics(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initIntrinsics(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptIntrinsics(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownIntrinsics() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t FrameData::Reader::getLensPos() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getLensPos() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensPos( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensSag() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensSag() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensSag(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensErr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensErr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensErr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensTruePos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensTruePos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensTruePos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasFocusVal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasFocusVal() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getFocusVal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getFocusVal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setFocusVal( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setFocusVal(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initFocusVal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptFocusVal(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownFocusVal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasFocusConf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasFocusConf() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getFocusConf() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getFocusConf() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setFocusConf( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setFocusConf(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initFocusConf(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptFocusConf(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownFocusConf() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasSharpnessScore() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasSharpnessScore() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getSharpnessScore() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getSharpnessScore() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setSharpnessScore( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setSharpnessScore(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initSharpnessScore(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptSharpnessScore(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownSharpnessScore() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t FrameData::Reader::getRecoverState() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getRecoverState() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setRecoverState( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::getHighConversionGain() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}

inline bool FrameData::Builder::getHighConversionGain() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setHighConversionGain(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getMeasuredGreyFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getMeasuredGreyFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setMeasuredGreyFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getTargetGreyFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getTargetGreyFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTargetGreyFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getNativeImageAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getNativeImageAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setNativeImageAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Reader::getSensitivity() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Builder::getSensitivity() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setSensitivity( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getFrameDuration() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getFrameDuration() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setFrameDuration( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getExposureTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getExposureTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setExposureTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Reader::getRollingShutterSkew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Builder::getRollingShutterSkew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setRollingShutterSkew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionTransform(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionGains() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionGains() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionGains() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionGains(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionGains(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int8_t FrameData::AndroidCaptureResult::Reader::getDisplayRotation() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t FrameData::AndroidCaptureResult::Builder::getDisplayRotation() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setDisplayRotation( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FrameBuffer::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameBuffer::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FrameBuffer::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FrameBuffer::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameBuffer::Builder::setImage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FrameBuffer::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameBuffer::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FrameBuffer::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t FrameBuffer::Reader::getImageAddress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameBuffer::Builder::getImageAddress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setImageAddress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::FrameBuffer::Encoding FrameBuffer::Reader::getEncoding() const {
  return _reader.getDataField< ::cereal::FrameBuffer::Encoding>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::FrameBuffer::Encoding FrameBuffer::Builder::getEncoding() {
  return _builder.getDataField< ::cereal::FrameBuffer::Encoding>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setEncoding( ::cereal::FrameBuffer::Encoding value) {
  _builder.setDataField< ::cereal::FrameBuffer::Encoding>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getFrameWidth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getFrameWidth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setFrameWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getFrameHeight() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getFrameHeight() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setFrameHeight( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getStride() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getStride() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setStride( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getYWidth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getYWidth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setYWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getYHeight() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getYHeight() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setYHeight( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getYPixelStride() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getYPixelStride() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setYPixelStride( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getUvWidth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getUvWidth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setUvWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getUvHeight() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getUvHeight() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setUvHeight( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getUvPixelStride() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getUvPixelStride() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setUvPixelStride( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getUOffset() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getUOffset() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setUOffset( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameBuffer::Reader::getVOffset() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameBuffer::Builder::getVOffset() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void FrameBuffer::Builder::setVOffset( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getFree() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getFree() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setFree( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getAvailable() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getAvailable() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setAvailable( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getBuffers() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getBuffers() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setBuffers( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getCached() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getCached() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setCached( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getActive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getActive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setActive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getInactive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getInactive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setInactive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Memory::Reader::getShared() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Memory::Builder::getShared() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Memory::Builder::setShared( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CanData::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CanData::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CanData::Reader::getBusTime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t CanData::Builder::getBusTime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setBusTime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CanData::Reader::hasDat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CanData::Builder::hasDat() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CanData::Reader::getDat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CanData::Builder::getDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CanData::Builder::setDat( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CanData::Builder::initDat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CanData::Builder::adoptDat(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CanData::Builder::disownDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t CanData::Reader::getSrc() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CanData::Builder::getSrc() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setSrc( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LateralPlan::Reader::getModelMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LateralPlan::Builder::getModelMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setModelMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getLaneWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getLaneWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getLProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getLProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getRProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getRProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setRProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasDPathPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasDPathPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getDPathPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getDPathPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setDPathPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setDPathPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initDPathPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptDPathPoints(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownDPathPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getDProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getDProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setDProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getMpcSolutionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getMpcSolutionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setMpcSolutionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LateralPlan::Desire LateralPlan::Reader::getDesire() const {
  return _reader.getDataField< ::cereal::LateralPlan::Desire>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LateralPlan::Desire LateralPlan::Builder::getDesire() {
  return _builder.getDataField< ::cereal::LateralPlan::Desire>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setDesire( ::cereal::LateralPlan::Desire value) {
  _builder.setDataField< ::cereal::LateralPlan::Desire>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LateralPlan::LaneChangeState LateralPlan::Reader::getLaneChangeState() const {
  return _reader.getDataField< ::cereal::LateralPlan::LaneChangeState>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LateralPlan::LaneChangeState LateralPlan::Builder::getLaneChangeState() {
  return _builder.getDataField< ::cereal::LateralPlan::LaneChangeState>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneChangeState( ::cereal::LateralPlan::LaneChangeState value) {
  _builder.setDataField< ::cereal::LateralPlan::LaneChangeState>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LateralPlan::LaneChangeDirection LateralPlan::Reader::getLaneChangeDirection() const {
  return _reader.getDataField< ::cereal::LateralPlan::LaneChangeDirection>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LateralPlan::LaneChangeDirection LateralPlan::Builder::getLaneChangeDirection() {
  return _builder.getDataField< ::cereal::LateralPlan::LaneChangeDirection>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneChangeDirection( ::cereal::LateralPlan::LaneChangeDirection value) {
  _builder.setDataField< ::cereal::LateralPlan::LaneChangeDirection>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getUseLaneLines() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getUseLaneLines() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setUseLaneLines(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasPsis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasPsis() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getPsis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getPsis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setPsis( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setPsis(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initPsis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptPsis(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownPsis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::hasCurvatures() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasCurvatures() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getCurvatures() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setCurvatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setCurvatures(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initCurvatures(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptCurvatures(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::hasCurvatureRates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasCurvatureRates() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getCurvatureRates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getCurvatureRates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setCurvatureRates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setCurvatureRates(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initCurvatureRates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptCurvatureRates(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownCurvatureRates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getSolverExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getSolverExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSolverExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgoDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAEgoDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVPid() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVPid() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVPid(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVTargetLead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVTargetLead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVTargetLead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYActualDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYActualDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYActualDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYDesDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYDesDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYDesDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMinDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMinDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMinDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getJerkFactorDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getJerkFactorDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setJerkFactorDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleSteersDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleSteersDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleSteersDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ControlsState::Reader::getHudLeadDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ControlsState::Builder::getHudLeadDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setHudLeadDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getCanMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getCanMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getRadarStateMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getRadarStateMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRadarStateMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getMdMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getMdMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMdMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getSteerOverrideDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getSteerOverrideDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setSteerOverrideDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasCanMonoTimesDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasCanMonoTimesDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ControlsState::Reader::getCanMonoTimesDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ControlsState::Builder::getCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ControlsState::Builder::setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ControlsState::Builder::initCanMonoTimesDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptCanMonoTimesDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ControlsState::Builder::disownCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCruise() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCruise() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCruise(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getRearViewCamDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getRearViewCamDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRearViewCamDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getAwarenessStatusDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAwarenessStatusDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAwarenessStatusDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleModelBiasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleModelBiasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleModelBiasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getLongitudinalPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getLongitudinalPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLongitudinalPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getSteeringAngleDesiredDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getSteeringAngleDesiredDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setSteeringAngleDesiredDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::Actuators::LongControlState ControlsState::Reader::getLongControlState() const {
  return _reader.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::Actuators::LongControlState ControlsState::Builder::getLongControlState() {
  return _builder.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLongControlState( ::cereal::CarControl::Actuators::LongControlState value) {
  _builder.setDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::FlowpilotState ControlsState::Reader::getState() const {
  return _reader.getDataField< ::cereal::ControlsState::FlowpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::FlowpilotState ControlsState::Builder::getState() {
  return _builder.getDataField< ::cereal::ControlsState::FlowpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setState( ::cereal::ControlsState::FlowpilotState value) {
  _builder.setDataField< ::cereal::ControlsState::FlowpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgoRawDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgoRawDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgoRawDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::AlertStatus ControlsState::Reader::getAlertStatus() const {
  return _reader.getDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::AlertStatus ControlsState::Builder::getAlertStatus() {
  return _builder.getDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertStatus( ::cereal::ControlsState::AlertStatus value) {
  _builder.setDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::AlertSize ControlsState::Reader::getAlertSize() const {
  return _reader.getDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::AlertSize ControlsState::Builder::getAlertSize() {
  return _builder.getDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSize( ::cereal::ControlsState::AlertSize value) {
  _builder.setDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getGpsPlannerActiveDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getGpsPlannerActiveDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setGpsPlannerActiveDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEngageable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEngageable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEngageable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAlertBlinkingRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAlertBlinkingRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertBlinkingRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDriverMonitoringOnDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDriverMonitoringOnDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDriverMonitoringOnDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertType() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertSoundDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertSoundDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertSoundDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertSoundDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertSoundDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertSoundDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCurvatureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCurvatureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCurvatureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDecelForTurnDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForTurnDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForTurnDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getStartMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getStartMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setStartMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getMapValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getMapValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMapValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getLateralPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getLateralPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLateralPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getForceDecel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getForceDecel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setForceDecel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS, value);
}

inline typename ControlsState::LateralControlState::Reader ControlsState::Reader::getLateralControlState() const {
  return typename ControlsState::LateralControlState::Reader(_reader);
}
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::getLateralControlState() {
  return typename ControlsState::LateralControlState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ControlsState::LateralControlState::Pipeline ControlsState::Pipeline::getLateralControlState() {
  return typename ControlsState::LateralControlState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::initLateralControlState() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<71>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename ControlsState::LateralControlState::Builder(_builder);
}
inline bool ControlsState::Reader::getDecelForModelDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForModelDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForModelDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Reader::getAlertSound() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Builder::getAlertSound() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlsState::Reader::getCanErrorCounter() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlsState::Builder::getCanErrorCounter() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanErrorCounter( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getDesiredCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getDesiredCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDesiredCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getDesiredCurvatureRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getDesiredCurvatureRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDesiredCurvatureRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVCruiseCluster() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCruiseCluster() {
  return _builder.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCruiseCluster(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getExperimentalMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getExperimentalMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setExperimentalMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAccelDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAccelDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAccelDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getRateSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getRateSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setRateSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelayedOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelayedOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelayedOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringRateDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringRateDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringRateDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getAngleError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getAngleError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setAngleError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralTorqueState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralTorqueState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getD() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getD() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setD(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralTorqueState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralTorqueState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getErrorRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getErrorRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setErrorRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getActualLateralAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getActualLateralAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setActualLateralAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getDesiredLateralAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getDesiredLateralAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setDesiredLateralAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getLqrOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getLqrOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setLqrOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralAngleState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralAngleState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralAngleState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralAngleState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralCurvatureState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralCurvatureState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getActualCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getActualCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setActualCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getDesiredCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getDesiredCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setDesiredCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralCurvatureState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralCurvatureState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralDebugState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralDebugState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralDebugState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralDebugState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralDebugState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralDebugState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralDebugState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralDebugState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralControlState::Reader::isIndiState() const {
  return which() == ControlsState::LateralControlState::INDI_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isIndiState() {
  return which() == ControlsState::LateralControlState::INDI_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasIndiState() const {
  if (which() != ControlsState::LateralControlState::INDI_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasIndiState() {
  if (which() != ControlsState::LateralControlState::INDI_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralINDIState::Reader ControlsState::LateralControlState::Reader::getIndiState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::getIndiState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setIndiState( ::cereal::ControlsState::LateralINDIState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::initIndiState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptIndiState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> ControlsState::LateralControlState::Builder::disownIndiState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isPidState() const {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isPidState() {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasPidState() const {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasPidState() {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralPIDState::Reader ControlsState::LateralControlState::Reader::getPidState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::getPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setPidState( ::cereal::ControlsState::LateralPIDState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::initPidState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptPidState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> ControlsState::LateralControlState::Builder::disownPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isLqrStateDEPRECATED() const {
  return which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Builder::isLqrStateDEPRECATED() {
  return which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Reader::hasLqrStateDEPRECATED() const {
  if (which() != ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasLqrStateDEPRECATED() {
  if (which() != ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralLQRState::Reader ControlsState::LateralControlState::Reader::getLqrStateDEPRECATED() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::getLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setLqrStateDEPRECATED( ::cereal::ControlsState::LateralLQRState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::initLqrStateDEPRECATED() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptLqrStateDEPRECATED(
    ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> ControlsState::LateralControlState::Builder::disownLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isAngleState() const {
  return which() == ControlsState::LateralControlState::ANGLE_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isAngleState() {
  return which() == ControlsState::LateralControlState::ANGLE_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasAngleState() const {
  if (which() != ControlsState::LateralControlState::ANGLE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasAngleState() {
  if (which() != ControlsState::LateralControlState::ANGLE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralAngleState::Reader ControlsState::LateralControlState::Reader::getAngleState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralAngleState::Builder ControlsState::LateralControlState::Builder::getAngleState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setAngleState( ::cereal::ControlsState::LateralAngleState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralAngleState::Builder ControlsState::LateralControlState::Builder::initAngleState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptAngleState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState> ControlsState::LateralControlState::Builder::disownAngleState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isDebugState() const {
  return which() == ControlsState::LateralControlState::DEBUG_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isDebugState() {
  return which() == ControlsState::LateralControlState::DEBUG_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasDebugState() const {
  if (which() != ControlsState::LateralControlState::DEBUG_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasDebugState() {
  if (which() != ControlsState::LateralControlState::DEBUG_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralDebugState::Reader ControlsState::LateralControlState::Reader::getDebugState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralDebugState::Builder ControlsState::LateralControlState::Builder::getDebugState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setDebugState( ::cereal::ControlsState::LateralDebugState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralDebugState::Builder ControlsState::LateralControlState::Builder::initDebugState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptDebugState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState> ControlsState::LateralControlState::Builder::disownDebugState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isTorqueState() const {
  return which() == ControlsState::LateralControlState::TORQUE_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isTorqueState() {
  return which() == ControlsState::LateralControlState::TORQUE_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasTorqueState() const {
  if (which() != ControlsState::LateralControlState::TORQUE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasTorqueState() {
  if (which() != ControlsState::LateralControlState::TORQUE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralTorqueState::Reader ControlsState::LateralControlState::Reader::getTorqueState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralTorqueState::Builder ControlsState::LateralControlState::Builder::getTorqueState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setTorqueState( ::cereal::ControlsState::LateralTorqueState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralTorqueState::Builder ControlsState::LateralControlState::Builder::initTorqueState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptTorqueState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState> ControlsState::LateralControlState::Builder::disownTorqueState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isCurvatureState() const {
  return which() == ControlsState::LateralControlState::CURVATURE_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isCurvatureState() {
  return which() == ControlsState::LateralControlState::CURVATURE_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasCurvatureState() const {
  if (which() != ControlsState::LateralControlState::CURVATURE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasCurvatureState() {
  if (which() != ControlsState::LateralControlState::CURVATURE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralCurvatureState::Reader ControlsState::LateralControlState::Reader::getCurvatureState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralCurvatureState::Builder ControlsState::LateralControlState::Builder::getCurvatureState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setCurvatureState( ::cereal::ControlsState::LateralCurvatureState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralCurvatureState::Builder ControlsState::LateralControlState::Builder::initCurvatureState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptCurvatureState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState> ControlsState::LateralControlState::Builder::disownCurvatureState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader RadarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> RadarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarState::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarState::Reader::getCarStateMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getCarStateMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCarStateMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasRadarErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasRadarErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader RadarState::Reader::getRadarErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder RadarState::Builder::getRadarErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setRadarErrors( ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setRadarErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>::Builder RadarState::Builder::initRadarErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptRadarErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>> RadarState::Builder::disownRadarErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasLeadOne() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadOne() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadOne() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadOne() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadOne( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadOne(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasLeadTwo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadTwo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadTwo() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadTwo() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadTwo( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadTwo(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float RadarState::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarState::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getDPath() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDPath() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDPath(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadTau() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadTau() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadTau(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getModelProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getModelProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setModelProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getRadar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<290>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getRadar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<290>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setRadar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<290>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LongitudinalPlan::Reader::getModelMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LongitudinalPlan::Builder::getModelMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setModelMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getHasLead() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getHasLead() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setHasLead(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource LongitudinalPlan::Reader::getLongitudinalPlanSource() const {
  return _reader.getDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource LongitudinalPlan::Builder::getLongitudinalPlanSource() {
  return _builder.getDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setLongitudinalPlanSource( ::cereal::LongitudinalPlan::LongitudinalPlanSource value) {
  _builder.setDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getProcessingDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getProcessingDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setProcessingDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::hasAccels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasAccels() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getAccels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getAccels() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setAccels( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setAccels(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initAccels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptAccels(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownAccels() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::hasSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getSpeeds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setSpeeds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initSpeeds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptSpeeds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::hasJerks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasJerks() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getJerks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getJerks() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setJerks( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setJerks(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initJerks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptJerks(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownJerks() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float LongitudinalPlan::Reader::getSolverExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getSolverExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setSolverExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::GpsTrajectory::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::GpsTrajectory::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::GpsTrajectory::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::GpsTrajectory::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::GpsTrajectory::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::GpsTrajectory::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::GpsTrajectory::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::GpsTrajectory::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::Which SensorEventData::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::cereal::SensorEventData::Which SensorEventData::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getSensor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getSensor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSensor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t SensorEventData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t SensorEventData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isAcceleration() const {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Builder::isAcceleration() {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Reader::hasAcceleration() const {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasAcceleration() {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getAcceleration() const {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initAcceleration() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isMagnetic() const {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Builder::isMagnetic() {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Reader::hasMagnetic() const {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagnetic() {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagnetic() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagnetic() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagnetic(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isOrientation() const {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Builder::isOrientation() {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Reader::hasOrientation() const {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasOrientation() {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getOrientation() const {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setOrientation( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initOrientation() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyro() const {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Builder::isGyro() {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Reader::hasGyro() const {
  if (which() != SensorEventData::GYRO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyro() {
  if (which() != SensorEventData::GYRO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyro() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyro( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyro() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyro(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Builder::getSource() {
  return _builder.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSource( ::cereal::SensorEventData::SensorSource value) {
  _builder.setDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isPressure() const {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Builder::isPressure() {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Reader::hasPressure() const {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasPressure() {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getPressure() const {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setPressure( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initPressure() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptPressure(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::getUncalibratedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool SensorEventData::Builder::getUncalibratedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setUncalibratedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isMagneticUncalibrated() const {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isMagneticUncalibrated() {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasMagneticUncalibrated() const {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagneticUncalibrated() {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagneticUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagneticUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagneticUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyroUncalibrated() const {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isGyroUncalibrated() {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasGyroUncalibrated() const {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyroUncalibrated() {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyroUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyroUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyroUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isProximity() const {
  return which() == SensorEventData::PROXIMITY;
}
inline bool SensorEventData::Builder::isProximity() {
  return which() == SensorEventData::PROXIMITY;
}
inline float SensorEventData::Reader::getProximity() const {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getProximity() {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setProximity(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PROXIMITY);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isLight() const {
  return which() == SensorEventData::LIGHT;
}
inline bool SensorEventData::Builder::isLight() {
  return which() == SensorEventData::LIGHT;
}
inline float SensorEventData::Reader::getLight() const {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getLight() {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setLight(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::LIGHT);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isTemperature() const {
  return which() == SensorEventData::TEMPERATURE;
}
inline bool SensorEventData::Builder::isTemperature() {
  return which() == SensorEventData::TEMPERATURE;
}
inline float SensorEventData::Reader::getTemperature() const {
  KJ_IREQUIRE((which() == SensorEventData::TEMPERATURE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getTemperature() {
  KJ_IREQUIRE((which() == SensorEventData::TEMPERATURE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTemperature(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::TEMPERATURE);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::SensorVec::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::SensorVec::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SensorEventData::SensorVec::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SensorEventData::SensorVec::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::SensorVec::Builder::setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void SensorEventData::SensorVec::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SensorEventData::SensorVec::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SensorEventData::SensorVec::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SensorEventData::SensorVec::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t SensorEventData::SensorVec::Reader::getStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t SensorEventData::SensorVec::Builder::getStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::SensorVec::Builder::setStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t GpsLocationData::Reader::getFlags() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t GpsLocationData::Builder::getFlags() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setFlags( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearingDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearingDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearingDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t GpsLocationData::Reader::getUnixTimestampMillis() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GpsLocationData::Builder::getUnixTimestampMillis() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setUnixTimestampMillis( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Builder::getSource() {
  return _builder.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSource( ::cereal::GpsLocationData::SensorSource value) {
  _builder.setDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GpsLocationData::Reader::hasVNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GpsLocationData::Builder::hasVNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader GpsLocationData::Reader::getVNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GpsLocationData::Builder::getVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GpsLocationData::Builder::setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GpsLocationData::Builder::setVNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GpsLocationData::Builder::initVNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GpsLocationData::Builder::adoptVNED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> GpsLocationData::Builder::disownVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float GpsLocationData::Reader::getVerticalAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getVerticalAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setVerticalAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearingAccuracyDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearingAccuracyDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearingAccuracyDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeedAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeedAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeedAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaType PeripheralState::Reader::getPandaType() const {
  return _reader.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaType PeripheralState::Builder::getPandaType() {
  return _builder.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setPandaType( ::cereal::PandaState::PandaType value) {
  _builder.setDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PeripheralState::Reader::getVoltage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PeripheralState::Builder::getVoltage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setVoltage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PeripheralState::Reader::getCurrent() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PeripheralState::Builder::getCurrent() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setCurrent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PeripheralState::Reader::getFanSpeedRpm() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PeripheralState::Builder::getFanSpeedRpm() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setFanSpeedRpm( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PeripheralState::Reader::getUsbPowerModeDEPRECATED() const {
  return _reader.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PeripheralState::Builder::getUsbPowerModeDEPRECATED() {
  return _builder.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value) {
  _builder.setDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getVoltageDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getVoltageDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setVoltageDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getCurrentDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getCurrentDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setCurrentDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getIgnitionLine() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getIgnitionLine() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setIgnitionLine(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getControlsAllowed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getControlsAllowed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setControlsAllowed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getGasInterceptorDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getGasInterceptorDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setGasInterceptorDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getStartedSignalDetectedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getStartedSignalDetectedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setStartedSignalDetectedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getHasGpsDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getHasGpsDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHasGpsDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getRxBufferOverflow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getRxBufferOverflow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setRxBufferOverflow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getTxBufferOverflow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getTxBufferOverflow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setTxBufferOverflow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getGmlanSendErrs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getGmlanSendErrs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setGmlanSendErrs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaType PandaState::Reader::getPandaType() const {
  return _reader.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaType PandaState::Builder::getPandaType() {
  return _builder.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setPandaType( ::cereal::PandaState::PandaType value) {
  _builder.setDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::Reader::getFanSpeedRpmDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::Builder::getFanSpeedRpmDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFanSpeedRpmDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PandaState::Reader::getUsbPowerModeDEPRECATED() const {
  return _reader.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PandaState::Builder::getUsbPowerModeDEPRECATED() {
  return _builder.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value) {
  _builder.setDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getIgnitionCan() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getIgnitionCan() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setIgnitionCan(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel PandaState::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel PandaState::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::FaultStatus PandaState::Reader::getFaultStatus() const {
  return _reader.getDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::FaultStatus PandaState::Builder::getFaultStatus() {
  return _builder.getDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFaultStatus( ::cereal::PandaState::FaultStatus value) {
  _builder.setDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getPowerSaveEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getPowerSaveEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setPowerSaveEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getUptime() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getUptime() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setUptime( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::hasFaults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasFaults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader PandaState::Reader::getFaults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder PandaState::Builder::getFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::setFaults( ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PandaState::Builder::setFaults(::kj::ArrayPtr<const  ::cereal::PandaState::FaultType> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder PandaState::Builder::initFaults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PandaState::Builder::adoptFaults(
    ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>> PandaState::Builder::disownFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t PandaState::Reader::getSafetyRxInvalid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyRxInvalid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyRxInvalid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PandaState::Reader::getSafetyParamDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PandaState::Builder::getSafetyParamDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParamDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::HarnessStatus PandaState::Reader::getHarnessStatus() const {
  return _reader.getDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::HarnessStatus PandaState::Builder::getHarnessStatus() {
  return _builder.getDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHarnessStatus( ::cereal::PandaState::HarnessStatus value) {
  _builder.setDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getHeartbeatLost() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getHeartbeatLost() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHeartbeatLost(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PandaState::Reader::getAlternativeExperience() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PandaState::Builder::getAlternativeExperience() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setAlternativeExperience( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getSafetyTxBlocked() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyTxBlocked() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyTxBlocked( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float PandaState::Reader::getInterruptLoad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float PandaState::Builder::getInterruptLoad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setInterruptLoad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getSafetyParam2DEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyParam2DEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParam2DEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::Reader::getSafetyParam() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::Builder::getSafetyParam() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParam( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::Reader::getFanPower() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::Builder::getFanPower() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFanPower( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::hasCanState0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState0() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState0() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState0() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState0( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState0(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::hasCanState1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState1() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState1() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState1() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState1( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState1(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::hasCanState2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState2() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState2() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState2() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState2( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState2(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::getSafetyRxChecksInvalid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getSafetyRxChecksInvalid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyRxChecksInvalid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getBusOff() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getBusOff() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBusOff(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getBusOffCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getBusOffCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBusOffCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getErrorWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getErrorWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setErrorWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getErrorPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getErrorPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setErrorPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastStoredError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastStoredError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastDataError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastDataError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastDataError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastDataStoredError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastDataStoredError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastDataStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::PandaCanState::Reader::getReceiveErrorCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::PandaCanState::Builder::getReceiveErrorCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setReceiveErrorCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::PandaCanState::Reader::getTransmitErrorCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::PandaCanState::Builder::getTransmitErrorCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTransmitErrorCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalErrorCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalErrorCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalErrorCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalTxLostCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalTxLostCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalTxLostCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalRxLostCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalRxLostCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalRxLostCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalTxCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalTxCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalTxCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalRxCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalRxCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalRxCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalFwdCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalFwdCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalFwdCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::PandaCanState::Reader::getCanSpeed() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::PandaCanState::Builder::getCanSpeed() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanSpeed( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::PandaCanState::Reader::getCanDataSpeed() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::PandaCanState::Builder::getCanDataSpeed() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanDataSpeed( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getCanfdEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getCanfdEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanfdEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getBrsEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getBrsEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBrsEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getCanfdNonIso() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getCanfdNonIso() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanfdNonIso(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverState::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverState::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getDspExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getDspExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setDspExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader DriverState::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder DriverState::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setRawPredictions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder DriverState::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> DriverState::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasFaceOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFaceOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getFaceOrientation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFaceOrientation(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initFaceOrientation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFaceOrientation(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasFacePosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFacePosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getFacePosition() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFacePosition(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initFacePosition(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFacePosition(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DriverState::Reader::getFaceProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getFaceProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setFaceProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getLeftEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getLeftEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setLeftEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getRightEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getRightEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setRightEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getLeftBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getLeftBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setLeftBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getRightBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getRightBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setRightBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasFaceOrientationStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFaceOrientationStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getFaceOrientationStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFaceOrientationStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initFaceOrientationStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFaceOrientationStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasFacePositionStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFacePositionStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getFacePositionStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFacePositionStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initFacePositionStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFacePositionStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float DriverState::Reader::getSunglassesProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getSunglassesProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setSunglassesProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getPoorVision() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getPoorVision() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setPoorVision(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getPartialFace() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getPartialFace() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setPartialFace(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getDistractedPose() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getDistractedPose() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setDistractedPose(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getDistractedEyes() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getDistractedEyes() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setDistractedEyes(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getEyesOnRoad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getEyesOnRoad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setEyesOnRoad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getPhoneUse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getPhoneUse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setPhoneUse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getOccludedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getOccludedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setOccludedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasNotReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasNotReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverState::Reader::getNotReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::getNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setNotReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverState::Builder::initNotReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptNotReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverState::Builder::disownNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DriverMonitoringState::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverMonitoringState::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader DriverMonitoringState::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverMonitoringState::Builder::setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverMonitoringState::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> DriverMonitoringState::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DriverMonitoringState::Reader::getFaceDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getFaceDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setFaceDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsDistracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsDistracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsDistracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getDistractedType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getDistractedType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setDistractedType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getPosePitchOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getPosePitchOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPosePitchOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getPosePitchValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getPosePitchValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPosePitchValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getPoseYawOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getPoseYawOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPoseYawOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getPoseYawValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getPoseYawValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPoseYawValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getStepChange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getStepChange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setStepChange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessActive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessActive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessActive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessPassive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessPassive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessPassive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsLowStd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsLowStd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsLowStd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getHiStdCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getHiStdCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setHiStdCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsActiveMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsActiveMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsActiveMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getUsbOnline() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getUsbOnline() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setUsbOnline(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::DeviceState::NetworkType DeviceState::Reader::getNetworkType() const {
  return _reader.getDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::NetworkType DeviceState::Builder::getNetworkType() {
  return _builder.getDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkType( ::cereal::DeviceState::NetworkType value) {
  _builder.setDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasNetworkInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasNetworkInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DeviceState::NetworkInfo::Reader DeviceState::Reader::getNetworkInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DeviceState::NetworkInfo::Builder DeviceState::Builder::getNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DeviceState::NetworkInfo::Pipeline DeviceState::Pipeline::getNetworkInfo() {
  return  ::cereal::DeviceState::NetworkInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DeviceState::Builder::setNetworkInfo( ::cereal::DeviceState::NetworkInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DeviceState::NetworkInfo::Builder DeviceState::Builder::initNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::adoptNetworkInfo(
    ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo> DeviceState::Builder::disownNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::DeviceState::NetworkStrength DeviceState::Reader::getNetworkStrength() const {
  return _reader.getDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::NetworkStrength DeviceState::Builder::getNetworkStrength() {
  return _builder.getDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkStrength( ::cereal::DeviceState::NetworkStrength value) {
  _builder.setDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getNetworkMetered() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getNetworkMetered() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkMetered(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DeviceState::Reader::getLastAthenaPingTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DeviceState::Builder::getLastAthenaPingTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setLastAthenaPingTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getStarted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getStarted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setStarted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DeviceState::Reader::getStartedMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DeviceState::Builder::getStartedMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setStartedMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getFreeSpacePercent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getFreeSpacePercent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setFreeSpacePercent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getMemoryUsagePercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getMemoryUsagePercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMemoryUsagePercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getGpuUsagePercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getGpuUsagePercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setGpuUsagePercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasCpuUsagePercent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasCpuUsagePercent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getCpuUsagePercent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getCpuUsagePercent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setCpuUsagePercent( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setCpuUsagePercent(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initCpuUsagePercent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptCpuUsagePercent(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownCpuUsagePercent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t DeviceState::Reader::getBatteryPercent() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int16_t DeviceState::Builder::getBatteryPercent() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryPercent( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DeviceState::Reader::getBatteryCurrent() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DeviceState::Builder::getBatteryCurrent() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryCurrent( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getChargingError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getChargingError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setChargingError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getChargingDisabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getChargingDisabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setChargingDisabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DeviceState::Reader::getOffroadPowerUsageUwh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeviceState::Builder::getOffroadPowerUsageUwh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setOffroadPowerUsageUwh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DeviceState::Reader::getCarBatteryCapacityUwh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeviceState::Builder::getCarBatteryCapacityUwh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCarBatteryCapacityUwh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getPowerDrawW() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getPowerDrawW() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setPowerDrawW(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasCpuTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasCpuTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getCpuTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getCpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setCpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setCpuTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initCpuTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptCpuTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownCpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasGpuTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasGpuTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getGpuTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getGpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setGpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setGpuTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initGpuTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptGpuTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownGpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float DeviceState::Reader::getMemoryTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getMemoryTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMemoryTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getAmbientTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getAmbientTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setAmbientTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasNvmeTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasNvmeTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getNvmeTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getNvmeTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setNvmeTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setNvmeTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initNvmeTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptNvmeTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownNvmeTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasModemTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasModemTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getModemTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getModemTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setModemTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setModemTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initModemTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptModemTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownModemTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasPmicTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasPmicTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getPmicTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getPmicTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setPmicTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setPmicTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initPmicTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptPmicTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownPmicTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasThermalZones() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasThermalZones() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader DeviceState::Reader::getThermalZones() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder DeviceState::Builder::getThermalZones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setThermalZones( ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder DeviceState::Builder::initThermalZones(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptThermalZones(
    ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>> DeviceState::Builder::disownThermalZones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::cereal::DeviceState::ThermalStatus DeviceState::Reader::getThermalStatus() const {
  return _reader.getDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::ThermalStatus DeviceState::Builder::getThermalStatus() {
  return _builder.getDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setThermalStatus( ::cereal::DeviceState::ThermalStatus value) {
  _builder.setDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getFanSpeedPercentDesired() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getFanSpeedPercentDesired() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setFanSpeedPercentDesired( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getScreenBrightnessPercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getScreenBrightnessPercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setScreenBrightnessPercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::ThermalZone::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::ThermalZone::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::ThermalZone::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::ThermalZone::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::ThermalZone::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::ThermalZone::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeviceState::ThermalZone::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::ThermalZone::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DeviceState::ThermalZone::Reader::getTemp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DeviceState::ThermalZone::Builder::getTemp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::ThermalZone::Builder::setTemp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::NetworkInfo::Reader::hasTechnology() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasTechnology() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getTechnology() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getTechnology() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setTechnology( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initTechnology(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptTechnology(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownTechnology() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasOperator() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasOperator() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getOperator() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getOperator() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setOperator( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initOperator(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptOperator(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownOperator() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasBand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasBand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getBand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getBand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setBand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initBand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptBand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownBand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint16_t DeviceState::NetworkInfo::Reader::getChannel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::NetworkInfo::Builder::getChannel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::NetworkInfo::Builder::setChannel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::NetworkInfo::Reader::hasExtra() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasExtra() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getExtra() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getExtra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setExtra( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initExtra(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptExtra(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownExtra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasCpuTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasCpuTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader ProcLog::Reader::getCpuTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::getCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::initCpuTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptCpuTimes(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>> ProcLog::Builder::disownCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasMem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasMem() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Mem::Reader ProcLog::Reader::getMem() const {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::getMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ProcLog::Mem::Pipeline ProcLog::Pipeline::getMem() {
  return  ::cereal::ProcLog::Mem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ProcLog::Builder::setMem( ::cereal::ProcLog::Mem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::initMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::adoptMem(
    ::capnp::Orphan< ::cereal::ProcLog::Mem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog::Mem> ProcLog::Builder::disownMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasProcs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasProcs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader ProcLog::Reader::getProcs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::getProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setProcs( ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::initProcs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptProcs(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>> ProcLog::Builder::disownProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t ProcLog::Process::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t ProcLog::Process::Reader::getState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ProcLog::Process::Builder::getState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getPpid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPpid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPpid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ProcLog::Process::Reader::getPriority() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::Process::Builder::getPriority() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPriority( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNice() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNice() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNice( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNumThreads() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNumThreads() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNumThreads( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double ProcLog::Process::Reader::getStartTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double ProcLog::Process::Builder::getStartTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setStartTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemVms() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemVms() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemVms( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemRss() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemRss() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemRss( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getProcessor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getProcessor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setProcessor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasCmdline() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasCmdline() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ProcLog::Process::Reader::getCmdline() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ProcLog::Process::Builder::getCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setCmdline( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ProcLog::Process::Builder::setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ProcLog::Process::Builder::initCmdline(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptCmdline(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ProcLog::Process::Builder::disownCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Process::Reader::hasExe() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasExe() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getExe() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setExe( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initExe(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptExe(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t ProcLog::CPUTimes::Reader::getCpuNum() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::CPUTimes::Builder::getCpuNum() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setCpuNum( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getNice() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getNice() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setNice(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIdle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIdle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIdle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIowait() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIowait() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIowait(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIrq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIrq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIrq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSoftirq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSoftirq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSoftirq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getFree() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getFree() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setFree( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getAvailable() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getAvailable() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setAvailable( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getBuffers() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getBuffers() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setBuffers( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getCached() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getCached() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setCached( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getActive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getActive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setActive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getInactive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getInactive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setInactive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getShared() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getShared() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setShared( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasPositionGeodetic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasPositionGeodetic() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getPositionGeodetic() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getPositionGeodetic() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setPositionGeodetic( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptPositionGeodetic(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAccelerationDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAccelerationDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAccelerationDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAccelerationDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAccelerationDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAccelerationDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasOrientationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasOrientationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getOrientationECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getOrientationECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptOrientationECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getOrientationNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptOrientationNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAngularVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAngularVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAngularVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAngularVelocityDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAngularVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAngularVelocityDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasCalibratedOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasCalibratedOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getCalibratedOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getCalibratedOrientationNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setCalibratedOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptCalibratedOrientationNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAccelerationCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAccelerationCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAccelerationCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAccelerationCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAccelerationCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAccelerationCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAngularVelocityCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAngularVelocityCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAngularVelocityCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAngularVelocityCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAngularVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAngularVelocityCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveLocationKalman::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveLocationKalman::Builder::getGpsWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setGpsWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationKalman::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LiveLocationKalman::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setGpsTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LiveLocationKalman::Status LiveLocationKalman::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveLocationKalman::Status LiveLocationKalman::Builder::getStatus() {
  return _builder.getDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setStatus( ::cereal::LiveLocationKalman::Status value) {
  _builder.setDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t LiveLocationKalman::Reader::getUnixTimestampMillis() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t LiveLocationKalman::Builder::getUnixTimestampMillis() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setUnixTimestampMillis( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::getInputsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getInputsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setInputsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getPosenetOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getPosenetOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setPosenetOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getGpsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getGpsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setGpsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::hasCalibratedOrientationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasCalibratedOrientationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getCalibratedOrientationECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getCalibratedOrientationECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setCalibratedOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptCalibratedOrientationECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::getSensorsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getSensorsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setSensorsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getDeviceStable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getDeviceStable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setDeviceStable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value, true);
}

inline double LiveLocationKalman::Reader::getTimeSinceReset() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double LiveLocationKalman::Builder::getTimeSinceReset() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setTimeSinceReset(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::getExcessiveResets() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}

inline bool LiveLocationKalman::Builder::getExcessiveResets() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setExcessiveResets(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationKalman::Reader::getTimeToFirstFix() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveLocationKalman::Builder::getTimeToFirstFix() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setTimeToFirstFix(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Measurement::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Measurement::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationKalman::Measurement::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Measurement::Builder::setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationKalman::Measurement::Builder::setValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationKalman::Measurement::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveLocationKalman::Measurement::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Measurement::Reader::hasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Measurement::Builder::hasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationKalman::Measurement::Reader::getStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::getStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Measurement::Builder::setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationKalman::Measurement::Builder::setStd(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::initStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationKalman::Measurement::Builder::adoptStd(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveLocationKalman::Measurement::Builder::disownStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Measurement::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveLocationKalman::Measurement::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Measurement::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::Reader::hasProcesses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ManagerState::Builder::hasProcesses() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader ManagerState::Reader::getProcesses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder ManagerState::Builder::getProcesses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ManagerState::Builder::setProcesses( ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder ManagerState::Builder::initProcesses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ManagerState::Builder::adoptProcesses(
    ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>> ManagerState::Builder::disownProcesses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ManagerState::ProcessState::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ManagerState::ProcessState::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ManagerState::ProcessState::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ManagerState::ProcessState::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ManagerState::ProcessState::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ManagerState::ProcessState::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ManagerState::ProcessState::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ManagerState::ProcessState::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t ManagerState::ProcessState::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ManagerState::ProcessState::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::ProcessState::Reader::getRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool ManagerState::ProcessState::Builder::getRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ManagerState::ProcessState::Reader::getExitCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ManagerState::ProcessState::Builder::getExitCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setExitCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::ProcessState::Reader::getShouldBeRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool ManagerState::ProcessState::Builder::getShouldBeRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setShouldBeRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveTracks::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTracks::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getTimeStamp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getTimeStamp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTimeStamp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getCurrentTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getCurrentTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setCurrentTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getStationary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getStationary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStationary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getOncoming() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getOncoming() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setOncoming(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getGyroBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getGyroBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setGyroBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetAverageDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetAverageDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetAverageDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getStiffnessFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getStiffnessFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setStiffnessFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getSensorValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getSensorValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSensorValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getPosenetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getPosenetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getPosenetValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getPosenetValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetFastStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetFastStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetFastStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetAverageStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetAverageStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetAverageStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getStiffnessFactorStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getStiffnessFactorStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setStiffnessFactorStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getSteerRatioStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getSteerRatioStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSteerRatioStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getRoll() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getRoll() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setRoll(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getImmediateQueueSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getImmediateQueueSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setImmediateQueueSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getImmediateQueueCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getImmediateQueueCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setImmediateQueueCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getRawQueueSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getRawQueueSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setRawQueueSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getRawQueueCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getRawQueueCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setRawQueueCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UploaderState::Reader::getLastTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float UploaderState::Builder::getLastTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setLastTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float UploaderState::Reader::getLastSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float UploaderState::Builder::getLastSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setLastSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UploaderState::Reader::hasLastFilename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UploaderState::Builder::hasLastFilename() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UploaderState::Reader::getLastFilename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UploaderState::Builder::getLastFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UploaderState::Builder::setLastFilename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UploaderState::Builder::initLastFilename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UploaderState::Builder::adoptLastFilename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UploaderState::Builder::disownLastFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t GnssMeasurements::Reader::getMeasTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GnssMeasurements::Builder::getMeasTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setMeasTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GnssMeasurements::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GnssMeasurements::Builder::getGpsWeek() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setGpsWeek( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setGpsTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GnssMeasurements::Reader::hasCorrectedMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasCorrectedMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader GnssMeasurements::Reader::getCorrectedMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::getCorrectedMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::setCorrectedMeasurements( ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::initCorrectedMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::Builder::adoptCorrectedMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>> GnssMeasurements::Builder::disownCorrectedMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasKalmanPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasKalmanPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getKalmanPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getKalmanPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setKalmanPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptKalmanPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasKalmanVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasKalmanVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getKalmanVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getKalmanVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setKalmanVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptKalmanVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::CorrectedMeasurement::Reader::getConstellationId() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::CorrectedMeasurement::Builder::getConstellationId() {
  return _builder.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setConstellationId( ::cereal::GnssMeasurements::ConstellationId value) {
  _builder.setDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t GnssMeasurements::CorrectedMeasurement::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GnssMeasurements::CorrectedMeasurement::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t GnssMeasurements::CorrectedMeasurement::Reader::getGlonassFrequency() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int8_t GnssMeasurements::CorrectedMeasurement::Builder::getGlonassFrequency() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setGlonassFrequency( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeStd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeStd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeStd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeRateStd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeRateStd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeRateStd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasSatPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasSatPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader GnssMeasurements::CorrectedMeasurement::Reader::getSatPos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::getSatPos() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatPos( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatPos(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::initSatPos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptSatPos(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> GnssMeasurements::CorrectedMeasurement::Builder::disownSatPos() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasSatVel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasSatVel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader GnssMeasurements::CorrectedMeasurement::Reader::getSatVel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::getSatVel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatVel( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatVel(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::initSatVel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptSatVel(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> GnssMeasurements::CorrectedMeasurement::Builder::disownSatVel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasEphemerisSource() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasEphemerisSource() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GnssMeasurements::EphemerisSource::Reader GnssMeasurements::CorrectedMeasurement::Reader::getEphemerisSource() const {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::GnssMeasurements::EphemerisSource::Builder GnssMeasurements::CorrectedMeasurement::Builder::getEphemerisSource() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::GnssMeasurements::EphemerisSource::Pipeline GnssMeasurements::CorrectedMeasurement::Pipeline::getEphemerisSource() {
  return  ::cereal::GnssMeasurements::EphemerisSource::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::CorrectedMeasurement::Builder::setEphemerisSource( ::cereal::GnssMeasurements::EphemerisSource::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GnssMeasurements::EphemerisSource::Builder GnssMeasurements::CorrectedMeasurement::Builder::initEphemerisSource() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptEphemerisSource(
    ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSource>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSource> GnssMeasurements::CorrectedMeasurement::Builder::disownEphemerisSource() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSource>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::GnssMeasurements::EphemerisSourceType GnssMeasurements::EphemerisSource::Reader::getType() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::EphemerisSourceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::EphemerisSourceType GnssMeasurements::EphemerisSource::Builder::getType() {
  return _builder.getDataField< ::cereal::GnssMeasurements::EphemerisSourceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSource::Builder::setType( ::cereal::GnssMeasurements::EphemerisSourceType value) {
  _builder.setDataField< ::cereal::GnssMeasurements::EphemerisSourceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GnssMeasurements::EphemerisSource::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GnssMeasurements::EphemerisSource::Builder::getGpsWeek() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSource::Builder::setGpsWeek( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t GnssMeasurements::EphemerisSource::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t GnssMeasurements::EphemerisSource::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSource::Builder::setGpsTimeOfWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::Which UbloxGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::UbloxGnss::Which UbloxGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Reader::isMeasurementReport() const {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Builder::isMeasurementReport() {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Reader::hasMeasurementReport() const {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasMeasurementReport() {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Reader UbloxGnss::Reader::getMeasurementReport() const {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::getMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::initMeasurementReport() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptMeasurementReport(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> UbloxGnss::Builder::disownMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isEphemeris() const {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Builder::isEphemeris() {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Reader::hasEphemeris() const {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasEphemeris() {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Ephemeris::Reader UbloxGnss::Reader::getEphemeris() const {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::getEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::initEphemeris() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptEphemeris(
    ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> UbloxGnss::Builder::disownEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isIonoData() const {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Builder::isIonoData() {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Reader::hasIonoData() const {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasIonoData() {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::IonoData::Reader UbloxGnss::Reader::getIonoData() const {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::getIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setIonoData( ::cereal::UbloxGnss::IonoData::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::initIonoData() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptIonoData(
    ::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> UbloxGnss::Builder::disownIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isHwStatus() const {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Builder::isHwStatus() {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Reader::hasHwStatus() const {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasHwStatus() {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::HwStatus::Reader UbloxGnss::Reader::getHwStatus() const {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::getHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::initHwStatus() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptHwStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> UbloxGnss::Builder::disownHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isHwStatus2() const {
  return which() == UbloxGnss::HW_STATUS2;
}
inline bool UbloxGnss::Builder::isHwStatus2() {
  return which() == UbloxGnss::HW_STATUS2;
}
inline bool UbloxGnss::Reader::hasHwStatus2() const {
  if (which() != UbloxGnss::HW_STATUS2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasHwStatus2() {
  if (which() != UbloxGnss::HW_STATUS2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::HwStatus2::Reader UbloxGnss::Reader::getHwStatus2() const {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::HwStatus2::Builder UbloxGnss::Builder::getHwStatus2() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setHwStatus2( ::cereal::UbloxGnss::HwStatus2::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::HwStatus2::Builder UbloxGnss::Builder::initHwStatus2() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptHwStatus2(
    ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2> UbloxGnss::Builder::disownHwStatus2() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UbloxGnss::MeasurementReport::Reader::getRcvTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Builder::getRcvTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setRcvTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getLeapSeconds() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getLeapSeconds() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setLeapSeconds( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasReceiverStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasReceiverStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader UbloxGnss::MeasurementReport::Reader::getReceiverStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::getReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline UbloxGnss::MeasurementReport::Pipeline::getReceiverStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Builder::setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::initReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::adoptReceiverStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> UbloxGnss::MeasurementReport::Builder::disownReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Reader::getNumMeas() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Builder::getNumMeas() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setNumMeas( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader UbloxGnss::MeasurementReport::Reader::getMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::MeasurementReport::Builder::getMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::MeasurementReport::Builder::initMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::MeasurementReport::Builder::adoptMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>> UbloxGnss::MeasurementReport::Builder::disownMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getLeapSecValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getLeapSecValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setLeapSecValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getClkReset() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getClkReset() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setClkReset(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::Reader::hasTrackingStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Measurement::Builder::hasTrackingStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader UbloxGnss::MeasurementReport::Measurement::Reader::getTrackingStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::getTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline UbloxGnss::MeasurementReport::Measurement::Pipeline::getTrackingStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::initTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::adoptTrackingStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> UbloxGnss::MeasurementReport::Measurement::Builder::disownTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierCycles() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierCycles() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierCycles(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDoppler() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDoppler() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDoppler(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGnssId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGnssId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGnssId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGlonassFrequencyIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Reader::getLocktime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Builder::getLocktime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setLocktime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getCno() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getCno() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCno( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorangeStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorangeStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorangeStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierPhaseStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierPhaseStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierPhaseStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDopplerStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDopplerStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDopplerStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSigId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSigId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSigId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getPseudorangeValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getPseudorangeValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setPseudorangeValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getCarrierPhaseValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getCarrierPhaseValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setCarrierPhaseValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleSubtracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleSubtracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleSubtracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMonth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMonth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMonth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getHour() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getHour() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setHour( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMinute() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMinute() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMinute( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::Ephemeris::Reader::getSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::Ephemeris::Builder::getSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIode() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIode() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIode(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getDeltaN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getDeltaN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDeltaN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getM0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getM0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setM0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCuc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCuc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCuc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getEcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getEcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setEcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCus() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCus() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCus(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToe() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToe() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToe(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCic() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCic() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCic(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCis() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCis() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCis(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getI0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getI0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setI0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmegaDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmegaDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmegaDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCodesL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCodesL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCodesL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getGpsWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getGpsWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setGpsWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvAcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvAcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvAcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvHealth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvHealth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvHealth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTgd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTgd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTgd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIodc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIodc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIodc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTransmissionTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTransmissionTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTransmissionTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getFitInterval() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getFitInterval() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setFitInterval(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Ephemeris::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::Ephemeris::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::Ephemeris::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::Ephemeris::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::Ephemeris::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t UbloxGnss::IonoData::Reader::getSvHealth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::IonoData::Builder::getSvHealth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setSvHealth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getGpsWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getGpsWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setGpsWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::IonoData::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::IonoData::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::IonoData::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::IonoData::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::getHealthValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getHealthValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setHealthValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getNoisePerMS() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getNoisePerMS() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setNoisePerMS( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getAgcCnt() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getAgcCnt() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAgcCnt( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Reader::getAStatus() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Builder::getAStatus() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Reader::getAPower() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Builder::getAPower() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus::Reader::getJamInd() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus::Builder::getJamInd() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setJamInd( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus::Reader::getFlags() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus::Builder::getFlags() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setFlags( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t UbloxGnss::HwStatus2::Reader::getOfsI() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t UbloxGnss::HwStatus2::Builder::getOfsI() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setOfsI( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Reader::getMagI() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Builder::getMagI() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setMagI( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t UbloxGnss::HwStatus2::Reader::getOfsQ() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t UbloxGnss::HwStatus2::Builder::getOfsQ() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setOfsQ( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Reader::getMagQ() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Builder::getMagQ() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setMagQ( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource UbloxGnss::HwStatus2::Reader::getCfgSource() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource UbloxGnss::HwStatus2::Builder::getCfgSource() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setCfgSource( ::cereal::UbloxGnss::HwStatus2::ConfigSource value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Reader::getLowLevCfg() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Builder::getLowLevCfg() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setLowLevCfg( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Reader::getPostStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Builder::getPostStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setPostStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelRaw::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelRaw::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelRaw::Reader::getFrameIdExtra() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelRaw::Builder::getFrameIdExtra() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setFrameIdExtra( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelRaw::Reader::getFrameAge() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelRaw::Builder::getFrameAge() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setFrameAge( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelRaw::Reader::getFrameDropPerc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelRaw::Builder::getFrameDropPerc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setFrameDropPerc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ModelRaw::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelRaw::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelRaw::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelRaw::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ModelRaw::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool ModelRaw::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void ModelRaw::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool ModelRaw::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelRaw::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelRaw::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelRaw::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelRaw::Builder::setRawPredictions( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelRaw::Builder::setRawPredictions(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelRaw::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelRaw::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelRaw::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Clocks::Reader::getBootTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getBootTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setBootTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicRawNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicRawNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicRawNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getModemUptimeMillis() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getModemUptimeMillis() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setModemUptimeMillis( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Joystick::Reader::hasAxes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasAxes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Joystick::Reader::getAxes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::getAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setAxes( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setAxes(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::initAxes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptAxes(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Joystick::Builder::disownAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Joystick::Reader::hasButtons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasButtons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Joystick::Reader::getButtons() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::getButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setButtons( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setButtons(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::initButtons(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptButtons(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Joystick::Builder::disownButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveTorqueParametersData::Reader::getLiveValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveTorqueParametersData::Builder::getLiveValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLiveValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelFactorRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelFactorRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelFactorRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelOffsetRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelOffsetRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelOffsetRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getFrictionCoefficientRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getFrictionCoefficientRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setFrictionCoefficientRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelFactorFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelFactorFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelFactorFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelOffsetFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelOffsetFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelOffsetFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getFrictionCoefficientFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getFrictionCoefficientFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setFrictionCoefficientFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getTotalBucketPoints() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getTotalBucketPoints() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setTotalBucketPoints(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getDecay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getDecay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setDecay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getMaxResets() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getMaxResets() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setMaxResets(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTorqueParametersData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveTorqueParametersData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader LiveTorqueParametersData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LiveTorqueParametersData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveTorqueParametersData::Builder::setPoints( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveTorqueParametersData::Builder::setPoints(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LiveTorqueParametersData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveTorqueParametersData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> LiveTorqueParametersData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveTorqueParametersData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTorqueParametersData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTorqueParametersData::Reader::getUseParams() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveTorqueParametersData::Builder::getUseParams() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setUseParams(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Event::Reader::isProcLog() const {
  return which() == Event::PROC_LOG;
}
inline bool Event::Builder::isProcLog() {
  return which() == Event::PROC_LOG;
}
inline bool Event::Reader::hasProcLog() const {
  if (which() != Event::PROC_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasProcLog() {
  if (which() != Event::PROC_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Reader Event::Reader::getProcLog() const {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Builder Event::Builder::getProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setProcLog( ::cereal::ProcLog::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Builder Event::Builder::initProcLog() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptProcLog(
    ::capnp::Orphan< ::cereal::ProcLog>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog> Event::Builder::disownProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRoadCameraState() const {
  return which() == Event::ROAD_CAMERA_STATE;
}
inline bool Event::Builder::isRoadCameraState() {
  return which() == Event::ROAD_CAMERA_STATE;
}
inline bool Event::Reader::hasRoadCameraState() const {
  if (which() != Event::ROAD_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRoadCameraState() {
  if (which() != Event::ROAD_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getRoadCameraState() const {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getRoadCameraState() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRoadCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initRoadCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRoadCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownRoadCameraState() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAccelerometer() const {
  return which() == Event::ACCELEROMETER;
}
inline bool Event::Builder::isAccelerometer() {
  return which() == Event::ACCELEROMETER;
}
inline bool Event::Reader::hasAccelerometer() const {
  if (which() != Event::ACCELEROMETER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAccelerometer() {
  if (which() != Event::ACCELEROMETER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getAccelerometer() const {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getAccelerometer() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAccelerometer( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initAccelerometer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAccelerometer(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownAccelerometer() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGyroscope() const {
  return which() == Event::GYROSCOPE;
}
inline bool Event::Builder::isGyroscope() {
  return which() == Event::GYROSCOPE;
}
inline bool Event::Reader::hasGyroscope() const {
  if (which() != Event::GYROSCOPE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGyroscope() {
  if (which() != Event::GYROSCOPE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getGyroscope() const {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getGyroscope() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGyroscope( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initGyroscope() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGyroscope(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownGyroscope() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDesireDEPRECATED() const {
  return which() == Event::DESIRE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isDesireDEPRECATED() {
  return which() == Event::DESIRE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasDesireDEPRECATED() const {
  if (which() != Event::DESIRE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDesireDEPRECATED() {
  if (which() != Event::DESIRE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Desire::Reader Event::Reader::getDesireDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::DESIRE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Desire>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Desire::Builder Event::Builder::getDesireDEPRECATED() {
  KJ_IREQUIRE((which() == Event::DESIRE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Desire>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDesireDEPRECATED( ::cereal::Desire::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DESIRE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::Desire>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Desire::Builder Event::Builder::initDesireDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DESIRE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::Desire>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDesireDEPRECATED(
    ::capnp::Orphan< ::cereal::Desire>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DESIRE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::Desire>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Desire> Event::Builder::disownDesireDEPRECATED() {
  KJ_IREQUIRE((which() == Event::DESIRE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Desire>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isModelV2() const {
  return which() == Event::MODEL_V2;
}
inline bool Event::Builder::isModelV2() {
  return which() == Event::MODEL_V2;
}
inline bool Event::Reader::hasModelV2() const {
  if (which() != Event::MODEL_V2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModelV2() {
  if (which() != Event::MODEL_V2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Reader Event::Reader::getModelV2() const {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Builder Event::Builder::getModelV2() {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setModelV2( ::cereal::ModelDataV2::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Builder Event::Builder::initModelV2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModelV2(
    ::capnp::Orphan< ::cereal::ModelDataV2>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2> Event::Builder::disownModelV2() {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveCalibration() const {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Builder::isLiveCalibration() {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Reader::hasLiveCalibration() const {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveCalibration() {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveCalibrationData::Reader Event::Reader::getLiveCalibration() const {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::getLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveCalibration( ::cereal::LiveCalibrationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::initLiveCalibration() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveCalibration(
    ::capnp::Orphan< ::cereal::LiveCalibrationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveCalibrationData> Event::Builder::disownLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCameraOdometry() const {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Builder::isCameraOdometry() {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Reader::hasCameraOdometry() const {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCameraOdometry() {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CameraOdometry::Reader Event::Reader::getCameraOdometry() const {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::getCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCameraOdometry( ::cereal::CameraOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::initCameraOdometry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCameraOdometry(
    ::capnp::Orphan< ::cereal::CameraOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CameraOdometry> Event::Builder::disownCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarState() const {
  return which() == Event::CAR_STATE;
}
inline bool Event::Builder::isCarState() {
  return which() == Event::CAR_STATE;
}
inline bool Event::Reader::hasCarState() const {
  if (which() != Event::CAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarState() {
  if (which() != Event::CAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::Reader Event::Reader::getCarState() const {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::Builder Event::Builder::getCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarState( ::cereal::CarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::Builder Event::Builder::initCarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarState(
    ::capnp::Orphan< ::cereal::CarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState> Event::Builder::disownCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarControl() const {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Builder::isCarControl() {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Reader::hasCarControl() const {
  if (which() != Event::CAR_CONTROL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarControl() {
  if (which() != Event::CAR_CONTROL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Reader Event::Reader::getCarControl() const {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Builder Event::Builder::getCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarControl( ::cereal::CarControl::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Builder Event::Builder::initCarControl() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarControl(
    ::capnp::Orphan< ::cereal::CarControl>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl> Event::Builder::disownCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCan() const {
  return which() == Event::CAN;
}
inline bool Event::Builder::isCan() {
  return which() == Event::CAN;
}
inline bool Event::Reader::hasCan() const {
  if (which() != Event::CAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCan() {
  if (which() != Event::CAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getCan() const {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initCan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> Event::Builder::disownCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSendcan() const {
  return which() == Event::SENDCAN;
}
inline bool Event::Builder::isSendcan() {
  return which() == Event::SENDCAN;
}
inline bool Event::Reader::hasSendcan() const {
  if (which() != Event::SENDCAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSendcan() {
  if (which() != Event::SENDCAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getSendcan() const {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSendcan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initSendcan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENDCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSendcan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> Event::Builder::disownSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLateralPlan() const {
  return which() == Event::LATERAL_PLAN;
}
inline bool Event::Builder::isLateralPlan() {
  return which() == Event::LATERAL_PLAN;
}
inline bool Event::Reader::hasLateralPlan() const {
  if (which() != Event::LATERAL_PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLateralPlan() {
  if (which() != Event::LATERAL_PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LateralPlan::Reader Event::Reader::getLateralPlan() const {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LateralPlan::Builder Event::Builder::getLateralPlan() {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLateralPlan( ::cereal::LateralPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LateralPlan::Builder Event::Builder::initLateralPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLateralPlan(
    ::capnp::Orphan< ::cereal::LateralPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LateralPlan> Event::Builder::disownLateralPlan() {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarParams() const {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Builder::isCarParams() {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Reader::hasCarParams() const {
  if (which() != Event::CAR_PARAMS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarParams() {
  if (which() != Event::CAR_PARAMS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::Reader Event::Reader::getCarParams() const {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::Builder Event::Builder::getCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarParams( ::cereal::CarParams::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::Builder Event::Builder::initCarParams() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarParams(
    ::capnp::Orphan< ::cereal::CarParams>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams> Event::Builder::disownCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isControlsState() const {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Builder::isControlsState() {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Reader::hasControlsState() const {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasControlsState() {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::Reader Event::Reader::getControlsState() const {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::Builder Event::Builder::getControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setControlsState( ::cereal::ControlsState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::Builder Event::Builder::initControlsState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptControlsState(
    ::capnp::Orphan< ::cereal::ControlsState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState> Event::Builder::disownControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRadarState() const {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Builder::isRadarState() {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Reader::hasRadarState() const {
  if (which() != Event::RADAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRadarState() {
  if (which() != Event::RADAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::Reader Event::Reader::getRadarState() const {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::Builder Event::Builder::getRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRadarState( ::cereal::RadarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::Builder Event::Builder::initRadarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRadarState(
    ::capnp::Orphan< ::cereal::RadarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState> Event::Builder::disownRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLongitudinalPlan() const {
  return which() == Event::LONGITUDINAL_PLAN;
}
inline bool Event::Builder::isLongitudinalPlan() {
  return which() == Event::LONGITUDINAL_PLAN;
}
inline bool Event::Reader::hasLongitudinalPlan() const {
  if (which() != Event::LONGITUDINAL_PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLongitudinalPlan() {
  if (which() != Event::LONGITUDINAL_PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LongitudinalPlan::Reader Event::Reader::getLongitudinalPlan() const {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LongitudinalPlan::Builder Event::Builder::getLongitudinalPlan() {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLongitudinalPlan( ::cereal::LongitudinalPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LongitudinalPlan::Builder Event::Builder::initLongitudinalPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLongitudinalPlan(
    ::capnp::Orphan< ::cereal::LongitudinalPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LongitudinalPlan> Event::Builder::disownLongitudinalPlan() {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarEvents() const {
  return which() == Event::CAR_EVENTS;
}
inline bool Event::Builder::isCarEvents() {
  return which() == Event::CAR_EVENTS;
}
inline bool Event::Reader::hasCarEvents() const {
  if (which() != Event::CAR_EVENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarEvents() {
  if (which() != Event::CAR_EVENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getCarEvents() const {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getCarEvents() {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initCarEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCarEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> Event::Builder::disownCarEvents() {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isFrameDataDEPRECATED() const {
  return which() == Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isFrameDataDEPRECATED() {
  return which() == Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasFrameDataDEPRECATED() const {
  if (which() != Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFrameDataDEPRECATED() {
  if (which() != Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getFrameDataDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getFrameDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setFrameDataDEPRECATED( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initFrameDataDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFrameDataDEPRECATED(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownFrameDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::FRAME_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEventsDEPRECATED() const {
  return which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isSensorEventsDEPRECATED() {
  return which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasSensorEventsDEPRECATED() const {
  if (which() != Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEventsDEPRECATED() {
  if (which() != Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getSensorEventsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getSensorEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEventsDEPRECATED( ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initSensorEventsDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSensorEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>> Event::Builder::disownSensorEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocationExternal() const {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Builder::isGpsLocationExternal() {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Reader::hasGpsLocationExternal() const {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocationExternal() {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocationExternal() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocationExternal( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocationExternal() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocationExternal(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPeripheralState() const {
  return which() == Event::PERIPHERAL_STATE;
}
inline bool Event::Builder::isPeripheralState() {
  return which() == Event::PERIPHERAL_STATE;
}
inline bool Event::Reader::hasPeripheralState() const {
  if (which() != Event::PERIPHERAL_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPeripheralState() {
  if (which() != Event::PERIPHERAL_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PeripheralState::Reader Event::Reader::getPeripheralState() const {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::PeripheralState::Builder Event::Builder::getPeripheralState() {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPeripheralState( ::cereal::PeripheralState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PeripheralState::Builder Event::Builder::initPeripheralState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptPeripheralState(
    ::capnp::Orphan< ::cereal::PeripheralState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PeripheralState> Event::Builder::disownPeripheralState() {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPandaStates() const {
  return which() == Event::PANDA_STATES;
}
inline bool Event::Builder::isPandaStates() {
  return which() == Event::PANDA_STATES;
}
inline bool Event::Reader::hasPandaStates() const {
  if (which() != Event::PANDA_STATES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPandaStates() {
  if (which() != Event::PANDA_STATES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getPandaStates() const {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getPandaStates() {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPandaStates( ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initPandaStates(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptPandaStates(
    ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>> Event::Builder::disownPandaStates() {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverState() const {
  return which() == Event::DRIVER_STATE;
}
inline bool Event::Builder::isDriverState() {
  return which() == Event::DRIVER_STATE;
}
inline bool Event::Reader::hasDriverState() const {
  if (which() != Event::DRIVER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverState() {
  if (which() != Event::DRIVER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverState::Reader Event::Reader::getDriverState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverState::Builder Event::Builder::getDriverState() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverState( ::cereal::DriverState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverState::Builder Event::Builder::initDriverState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverState(
    ::capnp::Orphan< ::cereal::DriverState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverState> Event::Builder::disownDriverState() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverMonitoringState() const {
  return which() == Event::DRIVER_MONITORING_STATE;
}
inline bool Event::Builder::isDriverMonitoringState() {
  return which() == Event::DRIVER_MONITORING_STATE;
}
inline bool Event::Reader::hasDriverMonitoringState() const {
  if (which() != Event::DRIVER_MONITORING_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverMonitoringState() {
  if (which() != Event::DRIVER_MONITORING_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverMonitoringState::Reader Event::Reader::getDriverMonitoringState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverMonitoringState::Builder Event::Builder::getDriverMonitoringState() {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverMonitoringState( ::cereal::DriverMonitoringState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverMonitoringState::Builder Event::Builder::initDriverMonitoringState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverMonitoringState(
    ::capnp::Orphan< ::cereal::DriverMonitoringState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverMonitoringState> Event::Builder::disownDriverMonitoringState() {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverCameraState() const {
  return which() == Event::DRIVER_CAMERA_STATE;
}
inline bool Event::Builder::isDriverCameraState() {
  return which() == Event::DRIVER_CAMERA_STATE;
}
inline bool Event::Reader::hasDriverCameraState() const {
  if (which() != Event::DRIVER_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverCameraState() {
  if (which() != Event::DRIVER_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getDriverCameraState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getDriverCameraState() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initDriverCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownDriverCameraState() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDeviceState() const {
  return which() == Event::DEVICE_STATE;
}
inline bool Event::Builder::isDeviceState() {
  return which() == Event::DEVICE_STATE;
}
inline bool Event::Reader::hasDeviceState() const {
  if (which() != Event::DEVICE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDeviceState() {
  if (which() != Event::DEVICE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DeviceState::Reader Event::Reader::getDeviceState() const {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DeviceState::Builder Event::Builder::getDeviceState() {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDeviceState( ::cereal::DeviceState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DeviceState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DeviceState::Builder Event::Builder::initDeviceState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDeviceState(
    ::capnp::Orphan< ::cereal::DeviceState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DeviceState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DeviceState> Event::Builder::disownDeviceState() {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationKalman() const {
  return which() == Event::LIVE_LOCATION_KALMAN;
}
inline bool Event::Builder::isLiveLocationKalman() {
  return which() == Event::LIVE_LOCATION_KALMAN;
}
inline bool Event::Reader::hasLiveLocationKalman() const {
  if (which() != Event::LIVE_LOCATION_KALMAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationKalman() {
  if (which() != Event::LIVE_LOCATION_KALMAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Reader Event::Reader::getLiveLocationKalman() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Builder Event::Builder::getLiveLocationKalman() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationKalman( ::cereal::LiveLocationKalman::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Builder Event::Builder::initLiveLocationKalman() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationKalman(
    ::capnp::Orphan< ::cereal::LiveLocationKalman>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman> Event::Builder::disownLiveLocationKalman() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isManagerState() const {
  return which() == Event::MANAGER_STATE;
}
inline bool Event::Builder::isManagerState() {
  return which() == Event::MANAGER_STATE;
}
inline bool Event::Reader::hasManagerState() const {
  if (which() != Event::MANAGER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasManagerState() {
  if (which() != Event::MANAGER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ManagerState::Reader Event::Reader::getManagerState() const {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ManagerState::Builder Event::Builder::getManagerState() {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setManagerState( ::cereal::ManagerState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ManagerState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ManagerState::Builder Event::Builder::initManagerState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptManagerState(
    ::capnp::Orphan< ::cereal::ManagerState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ManagerState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ManagerState> Event::Builder::disownManagerState() {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveParameters() const {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Builder::isLiveParameters() {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Reader::hasLiveParameters() const {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveParameters() {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveParametersData::Reader Event::Reader::getLiveParameters() const {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::getLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveParameters( ::cereal::LiveParametersData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::initLiveParameters() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveParameters(
    ::capnp::Orphan< ::cereal::LiveParametersData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveParametersData> Event::Builder::disownLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWideRoadCameraState() const {
  return which() == Event::WIDE_ROAD_CAMERA_STATE;
}
inline bool Event::Builder::isWideRoadCameraState() {
  return which() == Event::WIDE_ROAD_CAMERA_STATE;
}
inline bool Event::Reader::hasWideRoadCameraState() const {
  if (which() != Event::WIDE_ROAD_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWideRoadCameraState() {
  if (which() != Event::WIDE_ROAD_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getWideRoadCameraState() const {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getWideRoadCameraState() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWideRoadCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initWideRoadCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptWideRoadCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownWideRoadCameraState() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLogMessage() const {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Builder::isLogMessage() {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Reader::hasLogMessage() const {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLogMessage() {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getLogMessage() const {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isErrorLogMessage() const {
  return which() == Event::ERROR_LOG_MESSAGE;
}
inline bool Event::Builder::isErrorLogMessage() {
  return which() == Event::ERROR_LOG_MESSAGE;
}
inline bool Event::Reader::hasErrorLogMessage() const {
  if (which() != Event::ERROR_LOG_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasErrorLogMessage() {
  if (which() != Event::ERROR_LOG_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getErrorLogMessage() const {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getErrorLogMessage() {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setErrorLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initErrorLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptErrorLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownErrorLogMessage() {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Event::Reader::getLogMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Builder::getLogMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setLogMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}

inline bool Event::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}
inline void Event::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, true);
}

inline bool Event::Reader::isInitData() const {
  return which() == Event::INIT_DATA;
}
inline bool Event::Builder::isInitData() {
  return which() == Event::INIT_DATA;
}
inline bool Event::Reader::hasInitData() const {
  if (which() != Event::INIT_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasInitData() {
  if (which() != Event::INIT_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::Reader Event::Reader::getInitData() const {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::Builder Event::Builder::getInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setInitData( ::cereal::InitData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::Builder Event::Builder::initInitData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptInitData(
    ::capnp::Orphan< ::cereal::InitData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData> Event::Builder::disownInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxRaw() const {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Builder::isUbloxRaw() {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Reader::hasUbloxRaw() const {
  if (which() != Event::UBLOX_RAW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxRaw() {
  if (which() != Event::UBLOX_RAW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getUbloxRaw() const {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxRaw( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initUbloxRaw(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptUbloxRaw(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTracks() const {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Builder::isLiveTracks() {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Reader::hasLiveTracks() const {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTracks() {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getLiveTracks() const {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTracks( ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initLiveTracks(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveTracks(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>> Event::Builder::disownLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSentinel() const {
  return which() == Event::SENTINEL;
}
inline bool Event::Builder::isSentinel() {
  return which() == Event::SENTINEL;
}
inline bool Event::Reader::hasSentinel() const {
  if (which() != Event::SENTINEL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSentinel() {
  if (which() != Event::SENTINEL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Sentinel::Reader Event::Reader::getSentinel() const {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Sentinel::Builder Event::Builder::getSentinel() {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSentinel( ::cereal::Sentinel::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENTINEL);
  ::capnp::_::PointerHelpers< ::cereal::Sentinel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Sentinel::Builder Event::Builder::initSentinel() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENTINEL);
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSentinel(
    ::capnp::Orphan< ::cereal::Sentinel>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::SENTINEL);
  ::capnp::_::PointerHelpers< ::cereal::Sentinel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Sentinel> Event::Builder::disownSentinel() {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUploaderState() const {
  return which() == Event::UPLOADER_STATE;
}
inline bool Event::Builder::isUploaderState() {
  return which() == Event::UPLOADER_STATE;
}
inline bool Event::Reader::hasUploaderState() const {
  if (which() != Event::UPLOADER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUploaderState() {
  if (which() != Event::UPLOADER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UploaderState::Reader Event::Reader::getUploaderState() const {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UploaderState::Builder Event::Builder::getUploaderState() {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUploaderState( ::cereal::UploaderState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UploaderState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UploaderState::Builder Event::Builder::initUploaderState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUploaderState(
    ::capnp::Orphan< ::cereal::UploaderState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UploaderState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UploaderState> Event::Builder::disownUploaderState() {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGnssMeasurements() const {
  return which() == Event::GNSS_MEASUREMENTS;
}
inline bool Event::Builder::isGnssMeasurements() {
  return which() == Event::GNSS_MEASUREMENTS;
}
inline bool Event::Reader::hasGnssMeasurements() const {
  if (which() != Event::GNSS_MEASUREMENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGnssMeasurements() {
  if (which() != Event::GNSS_MEASUREMENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GnssMeasurements::Reader Event::Reader::getGnssMeasurements() const {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GnssMeasurements::Builder Event::Builder::getGnssMeasurements() {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGnssMeasurements( ::cereal::GnssMeasurements::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GnssMeasurements::Builder Event::Builder::initGnssMeasurements() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGnssMeasurements(
    ::capnp::Orphan< ::cereal::GnssMeasurements>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GnssMeasurements> Event::Builder::disownGnssMeasurements() {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxGnss() const {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Builder::isUbloxGnss() {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Reader::hasUbloxGnss() const {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxGnss() {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Reader Event::Reader::getUbloxGnss() const {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::getUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxGnss( ::cereal::UbloxGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::initUbloxGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUbloxGnss(
    ::capnp::Orphan< ::cereal::UbloxGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss> Event::Builder::disownUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGyroscope2() const {
  return which() == Event::GYROSCOPE2;
}
inline bool Event::Builder::isGyroscope2() {
  return which() == Event::GYROSCOPE2;
}
inline bool Event::Reader::hasGyroscope2() const {
  if (which() != Event::GYROSCOPE2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGyroscope2() {
  if (which() != Event::GYROSCOPE2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getGyroscope2() const {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getGyroscope2() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGyroscope2( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initGyroscope2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGyroscope2(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownGyroscope2() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAccelerometer2() const {
  return which() == Event::ACCELEROMETER2;
}
inline bool Event::Builder::isAccelerometer2() {
  return which() == Event::ACCELEROMETER2;
}
inline bool Event::Reader::hasAccelerometer2() const {
  if (which() != Event::ACCELEROMETER2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAccelerometer2() {
  if (which() != Event::ACCELEROMETER2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getAccelerometer2() const {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getAccelerometer2() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAccelerometer2( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initAccelerometer2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAccelerometer2(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownAccelerometer2() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocation() const {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Builder::isGpsLocation() {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Reader::hasGpsLocation() const {
  if (which() != Event::GPS_LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocation() {
  if (which() != Event::GPS_LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocation() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocation( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocation(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavModel() const {
  return which() == Event::NAV_MODEL;
}
inline bool Event::Builder::isNavModel() {
  return which() == Event::NAV_MODEL;
}
inline bool Event::Reader::hasNavModel() const {
  if (which() != Event::NAV_MODEL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavModel() {
  if (which() != Event::NAV_MODEL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavModelData::Reader Event::Reader::getNavModel() const {
  KJ_IREQUIRE((which() == Event::NAV_MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavModelData::Builder Event::Builder::getNavModel() {
  KJ_IREQUIRE((which() == Event::NAV_MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavModel( ::cereal::NavModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::NAV_MODEL);
  ::capnp::_::PointerHelpers< ::cereal::NavModelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavModelData::Builder Event::Builder::initNavModel() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::NAV_MODEL);
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavModel(
    ::capnp::Orphan< ::cereal::NavModelData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::NAV_MODEL);
  ::capnp::_::PointerHelpers< ::cereal::NavModelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavModelData> Event::Builder::disownNavModel() {
  KJ_IREQUIRE((which() == Event::NAV_MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isModelRaw() const {
  return which() == Event::MODEL_RAW;
}
inline bool Event::Builder::isModelRaw() {
  return which() == Event::MODEL_RAW;
}
inline bool Event::Reader::hasModelRaw() const {
  if (which() != Event::MODEL_RAW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModelRaw() {
  if (which() != Event::MODEL_RAW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelRaw::Reader Event::Reader::getModelRaw() const {
  KJ_IREQUIRE((which() == Event::MODEL_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelRaw::Builder Event::Builder::getModelRaw() {
  KJ_IREQUIRE((which() == Event::MODEL_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setModelRaw( ::cereal::ModelRaw::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_RAW);
  ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelRaw::Builder Event::Builder::initModelRaw() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_RAW);
  return ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModelRaw(
    ::capnp::Orphan< ::cereal::ModelRaw>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::MODEL_RAW);
  ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelRaw> Event::Builder::disownModelRaw() {
  KJ_IREQUIRE((which() == Event::MODEL_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelRaw>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRoadCameraBuffer() const {
  return which() == Event::ROAD_CAMERA_BUFFER;
}
inline bool Event::Builder::isRoadCameraBuffer() {
  return which() == Event::ROAD_CAMERA_BUFFER;
}
inline bool Event::Reader::hasRoadCameraBuffer() const {
  if (which() != Event::ROAD_CAMERA_BUFFER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRoadCameraBuffer() {
  if (which() != Event::ROAD_CAMERA_BUFFER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameBuffer::Reader Event::Reader::getRoadCameraBuffer() const {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::getRoadCameraBuffer() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRoadCameraBuffer( ::cereal::FrameBuffer::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::initRoadCameraBuffer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_BUFFER);
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRoadCameraBuffer(
    ::capnp::Orphan< ::cereal::FrameBuffer>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameBuffer> Event::Builder::disownRoadCameraBuffer() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWideRoadCameraBuffer() const {
  return which() == Event::WIDE_ROAD_CAMERA_BUFFER;
}
inline bool Event::Builder::isWideRoadCameraBuffer() {
  return which() == Event::WIDE_ROAD_CAMERA_BUFFER;
}
inline bool Event::Reader::hasWideRoadCameraBuffer() const {
  if (which() != Event::WIDE_ROAD_CAMERA_BUFFER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWideRoadCameraBuffer() {
  if (which() != Event::WIDE_ROAD_CAMERA_BUFFER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameBuffer::Reader Event::Reader::getWideRoadCameraBuffer() const {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::getWideRoadCameraBuffer() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWideRoadCameraBuffer( ::cereal::FrameBuffer::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::initWideRoadCameraBuffer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_BUFFER);
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptWideRoadCameraBuffer(
    ::capnp::Orphan< ::cereal::FrameBuffer>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameBuffer> Event::Builder::disownWideRoadCameraBuffer() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverCameraBuffer() const {
  return which() == Event::DRIVER_CAMERA_BUFFER;
}
inline bool Event::Builder::isDriverCameraBuffer() {
  return which() == Event::DRIVER_CAMERA_BUFFER;
}
inline bool Event::Reader::hasDriverCameraBuffer() const {
  if (which() != Event::DRIVER_CAMERA_BUFFER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverCameraBuffer() {
  if (which() != Event::DRIVER_CAMERA_BUFFER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameBuffer::Reader Event::Reader::getDriverCameraBuffer() const {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::getDriverCameraBuffer() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverCameraBuffer( ::cereal::FrameBuffer::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameBuffer::Builder Event::Builder::initDriverCameraBuffer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_BUFFER);
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverCameraBuffer(
    ::capnp::Orphan< ::cereal::FrameBuffer>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_BUFFER);
  ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameBuffer> Event::Builder::disownDriverCameraBuffer() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_BUFFER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameBuffer>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTestJoystick() const {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Builder::isTestJoystick() {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Reader::hasTestJoystick() const {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTestJoystick() {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Joystick::Reader Event::Reader::getTestJoystick() const {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Joystick::Builder Event::Builder::getTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTestJoystick( ::cereal::Joystick::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Joystick::Builder Event::Builder::initTestJoystick() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptTestJoystick(
    ::capnp::Orphan< ::cereal::Joystick>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Joystick> Event::Builder::disownTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isClocks() const {
  return which() == Event::CLOCKS;
}
inline bool Event::Builder::isClocks() {
  return which() == Event::CLOCKS;
}
inline bool Event::Reader::hasClocks() const {
  if (which() != Event::CLOCKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasClocks() {
  if (which() != Event::CLOCKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Clocks::Reader Event::Reader::getClocks() const {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Clocks::Builder Event::Builder::getClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setClocks( ::cereal::Clocks::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Clocks::Builder Event::Builder::initClocks() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CLOCKS);
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptClocks(
    ::capnp::Orphan< ::cereal::Clocks>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Clocks> Event::Builder::disownClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTorqueParameters() const {
  return which() == Event::LIVE_TORQUE_PARAMETERS;
}
inline bool Event::Builder::isLiveTorqueParameters() {
  return which() == Event::LIVE_TORQUE_PARAMETERS;
}
inline bool Event::Reader::hasLiveTorqueParameters() const {
  if (which() != Event::LIVE_TORQUE_PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTorqueParameters() {
  if (which() != Event::LIVE_TORQUE_PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveTorqueParametersData::Reader Event::Reader::getLiveTorqueParameters() const {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveTorqueParametersData::Builder Event::Builder::getLiveTorqueParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTorqueParameters( ::cereal::LiveTorqueParametersData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveTorqueParametersData::Builder Event::Builder::initLiveTorqueParameters() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveTorqueParameters(
    ::capnp::Orphan< ::cereal::LiveTorqueParametersData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveTorqueParametersData> Event::Builder::disownLiveTorqueParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

